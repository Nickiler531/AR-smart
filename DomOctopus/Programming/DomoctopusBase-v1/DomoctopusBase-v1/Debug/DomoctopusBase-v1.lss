
DomoctopusBase-v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00802000  00002a8a  00002b1e  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000285  00802094  00802094  00002bb0  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000748  00000000  00000000  00002c10  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000e7dc  00000000  00000000  00003358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002ddb  00000000  00000000  00011b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000b4b5  00000000  00000000  0001490f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000013e4  00000000  00000000  0001fdc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000302b5  00000000  00000000  000211a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005d4e  00000000  00000000  0005145d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000650  00000000  00000000  000571b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000c465  00000000  00000000  00057800  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__vector_2>
       c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
       e:	00 00       	nop
      10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
      12:	00 00       	nop
      14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
      16:	00 00       	nop
      18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
      1e:	00 00       	nop
      20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
      22:	00 00       	nop
      24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
      26:	00 00       	nop
      28:	93 c7       	rjmp	.+3878   	; 0xf50 <__vector_10>
      2a:	00 00       	nop
      2c:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__vector_11>
      30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
      32:	00 00       	nop
      34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
      36:	00 00       	nop
      38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
      3e:	00 00       	nop
      40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
      42:	00 00       	nop
      44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
      46:	00 00       	nop
      48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
      52:	00 00       	nop
      54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
      56:	00 00       	nop
      58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
      62:	00 00       	nop
      64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
      66:	00 00       	nop
      68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
      72:	00 00       	nop
      74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
      76:	00 00       	nop
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
      82:	00 00       	nop
      84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
      92:	00 00       	nop
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
      96:	00 00       	nop
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
      fe:	00 00       	nop
     100:	0c 94 b7 12 	jmp	0x256e	; 0x256e <__vector_64>
     104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
     106:	00 00       	nop
     108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
     10e:	00 00       	nop
     110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
     112:	00 00       	nop
     114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
     116:	00 00       	nop
     118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
     11e:	00 00       	nop
     120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
     122:	00 00       	nop
     124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
     126:	00 00       	nop
     128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
     12e:	00 00       	nop
     130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
     132:	00 00       	nop
     134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
     136:	00 00       	nop
     138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
     13e:	00 00       	nop
     140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
     142:	00 00       	nop
     144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
     146:	00 00       	nop
     148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
     14e:	00 00       	nop
     150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
     152:	00 00       	nop
     154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
     156:	00 00       	nop
     158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
     15e:	00 00       	nop
     160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
     162:	00 00       	nop
     164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
     166:	00 00       	nop
     168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
     16e:	00 00       	nop
     170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
     172:	00 00       	nop
     174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
     176:	00 00       	nop
     178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
     17e:	00 00       	nop
     180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
     182:	00 00       	nop
     184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
     186:	00 00       	nop
     188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
     18e:	00 00       	nop
     190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
     192:	00 00       	nop
     194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
     196:	00 00       	nop
     198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__vector_125>
     1f8:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__vector_126>
     1fc:	c4 0a       	sbc	r12, r20
     1fe:	b2 0a       	sbc	r11, r18
     200:	b5 0a       	sbc	r11, r21
     202:	b8 0a       	sbc	r11, r24
     204:	bb 0a       	sbc	r11, r27
     206:	be 0a       	sbc	r11, r30
     208:	c1 0a       	sbc	r12, r17

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e2       	ldi	r29, 0x2F	; 47
     214:	de bf       	out	0x3e, r29	; 62

00000216 <__do_copy_data>:
     216:	10 e2       	ldi	r17, 0x20	; 32
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b0 e2       	ldi	r27, 0x20	; 32
     21c:	ea e8       	ldi	r30, 0x8A	; 138
     21e:	fa e2       	ldi	r31, 0x2A	; 42
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x10>
     222:	05 90       	lpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	a2 39       	cpi	r26, 0x92	; 146
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0xc>

0000022c <__do_clear_bss>:
     22c:	23 e2       	ldi	r18, 0x23	; 35
     22e:	a4 e9       	ldi	r26, 0x94	; 148
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	a9 31       	cpi	r26, 0x19	; 25
     238:	b2 07       	cpc	r27, r18
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
     23c:	0e 94 28 13 	call	0x2650	; 0x2650 <main>
     240:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <_exit>

00000244 <__bad_interrupt>:
     244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	00 d0       	rcall	.+0      	; 0x24c <sysclk_init+0x6>
     24c:	00 d0       	rcall	.+0      	; 0x24e <sysclk_init+0x8>
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     252:	8f ef       	ldi	r24, 0xFF	; 255
     254:	80 93 70 00 	sts	0x0070, r24
     258:	80 93 71 00 	sts	0x0071, r24
     25c:	80 93 72 00 	sts	0x0072, r24
     260:	80 93 73 00 	sts	0x0073, r24
     264:	80 93 74 00 	sts	0x0074, r24
     268:	80 93 75 00 	sts	0x0075, r24
     26c:	80 93 76 00 	sts	0x0076, r24
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     270:	6c e1       	ldi	r22, 0x1C	; 28
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	82 e0       	ldi	r24, 0x02	; 2
     276:	62 d6       	rcall	.+3268   	; 0xf3c <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
     278:	8a 83       	std	Y+2, r24	; 0x02
     27a:	6d e1       	ldi	r22, 0x1D	; 29
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	82 e0       	ldi	r24, 0x02	; 2
     280:	5d d6       	rcall	.+3258   	; 0xf3c <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
     282:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	21 f4       	brne	.+8      	; 0x294 <sysclk_init+0x4e>
		cal = 0x2340;
     28c:	80 e4       	ldi	r24, 0x40	; 64
     28e:	93 e2       	ldi	r25, 0x23	; 35
     290:	89 83       	std	Y+1, r24	; 0x01
     292:	9a 83       	std	Y+2, r25	; 0x02
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	9a 81       	ldd	r25, Y+2	; 0x02
     298:	8b 83       	std	Y+3, r24	; 0x03
     29a:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
     29c:	e0 e6       	ldi	r30, 0x60	; 96
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
     2a2:	8c 81       	ldd	r24, Y+4	; 0x04
     2a4:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     2a6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     2a8:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     2aa:	e0 e5       	ldi	r30, 0x50	; 80
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	90 81       	ld	r25, Z
     2b0:	92 60       	ori	r25, 0x02	; 2
     2b2:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2b4:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     2b6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     2b8:	81 ff       	sbrs	r24, 1
     2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <sysclk_init+0x70>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     2bc:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     2be:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     2c0:	a0 e5       	ldi	r26, 0x50	; 80
     2c2:	b0 e0       	ldi	r27, 0x00	; 0
     2c4:	16 96       	adiw	r26, 0x06	; 6
     2c6:	9c 91       	ld	r25, X
     2c8:	16 97       	sbiw	r26, 0x06	; 6
     2ca:	99 7f       	andi	r25, 0xF9	; 249
     2cc:	16 96       	adiw	r26, 0x06	; 6
     2ce:	9c 93       	st	X, r25
     2d0:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     2d2:	e0 e6       	ldi	r30, 0x60	; 96
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	90 e8       	ldi	r25, 0x80	; 128
     2d8:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     2da:	9b eb       	ldi	r25, 0xBB	; 187
     2dc:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     2de:	16 96       	adiw	r26, 0x06	; 6
     2e0:	9c 91       	ld	r25, X
     2e2:	16 97       	sbiw	r26, 0x06	; 6
     2e4:	94 60       	ori	r25, 0x04	; 4
     2e6:	16 96       	adiw	r26, 0x06	; 6
     2e8:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     2ea:	90 81       	ld	r25, Z
     2ec:	91 60       	ori	r25, 0x01	; 1
     2ee:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2f0:	8f bf       	out	0x3f, r24	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	80 e4       	ldi	r24, 0x40	; 64
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	1b d6       	rcall	.+3126   	; 0xf30 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     2fa:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     2fc:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     2fe:	e0 e5       	ldi	r30, 0x50	; 80
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	90 81       	ld	r25, Z
     304:	9e 7f       	andi	r25, 0xFE	; 254
     306:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     308:	8f bf       	out	0x3f, r24	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     30a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     30c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     30e:	90 81       	ld	r25, Z
     310:	94 60       	ori	r25, 0x04	; 4
     312:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     314:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     316:	81 81       	ldd	r24, Z+1	; 0x01
     318:	82 ff       	sbrs	r24, 2
     31a:	fd cf       	rjmp	.-6      	; 0x316 <sysclk_init+0xd0>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     31c:	8d e0       	ldi	r24, 0x0D	; 13
     31e:	e0 e4       	ldi	r30, 0x40	; 64
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	83 83       	std	Z+3, r24	; 0x03
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     324:	24 96       	adiw	r28, 0x04	; 4
     326:	cd bf       	out	0x3d, r28	; 61
     328:	de bf       	out	0x3e, r29	; 62
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     330:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     332:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     334:	e8 2f       	mov	r30, r24
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	e0 59       	subi	r30, 0x90	; 144
     33a:	ff 4f       	sbci	r31, 0xFF	; 255
     33c:	60 95       	com	r22
     33e:	80 81       	ld	r24, Z
     340:	68 23       	and	r22, r24
     342:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     344:	9f bf       	out	0x3f, r25	; 63
     346:	08 95       	ret

00000348 <udi_cdc_comm_enable>:
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
}
     348:	10 92 aa 21 	sts	0x21AA, r1
     34c:	10 92 b6 21 	sts	0x21B6, r1
     350:	10 92 b7 21 	sts	0x21B7, r1
     354:	81 ea       	ldi	r24, 0xA1	; 161
     356:	80 93 ac 21 	sts	0x21AC, r24
     35a:	80 e2       	ldi	r24, 0x20	; 32
     35c:	80 93 ad 21 	sts	0x21AD, r24
     360:	10 92 ae 21 	sts	0x21AE, r1
     364:	10 92 af 21 	sts	0x21AF, r1
     368:	10 92 b0 21 	sts	0x21B0, r1
     36c:	10 92 b1 21 	sts	0x21B1, r1
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	80 93 b2 21 	sts	0x21B2, r24
     378:	90 93 b3 21 	sts	0x21B3, r25
     37c:	10 92 b4 21 	sts	0x21B4, r1
     380:	10 92 b5 21 	sts	0x21B5, r1
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	92 ec       	ldi	r25, 0xC2	; 194
     388:	a1 e0       	ldi	r26, 0x01	; 1
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	80 93 b8 21 	sts	0x21B8, r24
     390:	90 93 b9 21 	sts	0x21B9, r25
     394:	a0 93 ba 21 	sts	0x21BA, r26
     398:	b0 93 bb 21 	sts	0x21BB, r27
     39c:	10 92 bc 21 	sts	0x21BC, r1
     3a0:	10 92 bd 21 	sts	0x21BD, r1
     3a4:	88 e0       	ldi	r24, 0x08	; 8
     3a6:	80 93 be 21 	sts	0x21BE, r24
     3aa:	80 91 aa 21 	lds	r24, 0x21AA
     3ae:	8f 5f       	subi	r24, 0xFF	; 255
     3b0:	80 93 aa 21 	sts	0x21AA, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	08 95       	ret

000003b8 <udi_cdc_comm_disable>:
     3b8:	80 91 aa 21 	lds	r24, 0x21AA
     3bc:	81 50       	subi	r24, 0x01	; 1
     3be:	80 93 aa 21 	sts	0x21AA, r24
     3c2:	08 95       	ret

000003c4 <udi_cdc_data_disable>:
     3c4:	80 91 a9 21 	lds	r24, 0x21A9
     3c8:	81 50       	subi	r24, 0x01	; 1
     3ca:	80 93 a9 21 	sts	0x21A9, r24
     3ce:	80 91 a9 21 	lds	r24, 0x21A9
     3d2:	10 92 a8 21 	sts	0x21A8, r1
     3d6:	08 95       	ret

000003d8 <udi_cdc_data_setup>:
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	08 95       	ret

000003dc <udi_cdc_getsetting>:
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	08 95       	ret

000003e0 <udi_cdc_comm_setup>:
     3e0:	80 91 03 23 	lds	r24, 0x2303
     3e4:	88 23       	and	r24, r24
     3e6:	dc f4       	brge	.+54     	; 0x41e <udi_cdc_comm_setup+0x3e>
     3e8:	80 76       	andi	r24, 0x60	; 96
     3ea:	80 32       	cpi	r24, 0x20	; 32
     3ec:	e9 f5       	brne	.+122    	; 0x468 <udi_cdc_comm_setup+0x88>
     3ee:	80 91 04 23 	lds	r24, 0x2304
     3f2:	81 32       	cpi	r24, 0x21	; 33
     3f4:	d9 f5       	brne	.+118    	; 0x46c <udi_cdc_comm_setup+0x8c>
     3f6:	80 91 09 23 	lds	r24, 0x2309
     3fa:	90 91 0a 23 	lds	r25, 0x230A
     3fe:	07 97       	sbiw	r24, 0x07	; 7
     400:	b9 f5       	brne	.+110    	; 0x470 <udi_cdc_comm_setup+0x90>
     402:	88 eb       	ldi	r24, 0xB8	; 184
     404:	91 e2       	ldi	r25, 0x21	; 33
     406:	80 93 0b 23 	sts	0x230B, r24
     40a:	90 93 0c 23 	sts	0x230C, r25
     40e:	87 e0       	ldi	r24, 0x07	; 7
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	80 93 0d 23 	sts	0x230D, r24
     416:	90 93 0e 23 	sts	0x230E, r25
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	08 95       	ret
     41e:	80 76       	andi	r24, 0x60	; 96
     420:	80 32       	cpi	r24, 0x20	; 32
     422:	41 f5       	brne	.+80     	; 0x474 <udi_cdc_comm_setup+0x94>
     424:	80 91 04 23 	lds	r24, 0x2304
     428:	80 32       	cpi	r24, 0x20	; 32
     42a:	21 f0       	breq	.+8      	; 0x434 <udi_cdc_comm_setup+0x54>
     42c:	82 32       	cpi	r24, 0x22	; 34
     42e:	21 f5       	brne	.+72     	; 0x478 <udi_cdc_comm_setup+0x98>
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	08 95       	ret
     434:	80 91 09 23 	lds	r24, 0x2309
     438:	90 91 0a 23 	lds	r25, 0x230A
     43c:	07 97       	sbiw	r24, 0x07	; 7
     43e:	f1 f4       	brne	.+60     	; 0x47c <udi_cdc_comm_setup+0x9c>
     440:	80 e4       	ldi	r24, 0x40	; 64
     442:	92 e0       	ldi	r25, 0x02	; 2
     444:	80 93 0f 23 	sts	0x230F, r24
     448:	90 93 10 23 	sts	0x2310, r25
     44c:	88 eb       	ldi	r24, 0xB8	; 184
     44e:	91 e2       	ldi	r25, 0x21	; 33
     450:	80 93 0b 23 	sts	0x230B, r24
     454:	90 93 0c 23 	sts	0x230C, r25
     458:	87 e0       	ldi	r24, 0x07	; 7
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	80 93 0d 23 	sts	0x230D, r24
     460:	90 93 0e 23 	sts	0x230E, r25
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	08 95       	ret
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	08 95       	ret
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	08 95       	ret
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	08 95       	ret
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	08 95       	ret
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	08 95       	ret
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	08 95       	ret

00000480 <udi_cdc_line_coding_received>:
     480:	08 95       	ret

00000482 <udi_cdc_tx_send>:
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	80 91 97 20 	lds	r24, 0x2097
     490:	81 11       	cpse	r24, r1
     492:	9c c0       	rjmp	.+312    	; 0x5cc <udi_cdc_tx_send+0x14a>
     494:	0e 94 65 0c 	call	0x18ca	; 0x18ca <udd_is_high_speed>
     498:	88 23       	and	r24, r24
     49a:	51 f0       	breq	.+20     	; 0x4b0 <udi_cdc_tx_send+0x2e>
     49c:	c0 91 98 20 	lds	r28, 0x2098
     4a0:	d0 91 99 20 	lds	r29, 0x2099
     4a4:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <udd_get_micro_frame_number>
     4a8:	c8 17       	cp	r28, r24
     4aa:	d9 07       	cpc	r29, r25
     4ac:	59 f4       	brne	.+22     	; 0x4c4 <udi_cdc_tx_send+0x42>
     4ae:	8e c0       	rjmp	.+284    	; 0x5cc <udi_cdc_tx_send+0x14a>
     4b0:	c0 91 98 20 	lds	r28, 0x2098
     4b4:	d0 91 99 20 	lds	r29, 0x2099
     4b8:	0e 94 6d 0c 	call	0x18da	; 0x18da <udd_get_frame_number>
     4bc:	c8 17       	cp	r28, r24
     4be:	d9 07       	cpc	r29, r25
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <udi_cdc_tx_send+0x42>
     4c2:	84 c0       	rjmp	.+264    	; 0x5cc <udi_cdc_tx_send+0x14a>
     4c4:	df b7       	in	r29, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	c0 91 9a 20 	lds	r28, 0x209A
     4cc:	ec 2f       	mov	r30, r28
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	ee 0f       	add	r30, r30
     4d2:	ff 1f       	adc	r31, r31
     4d4:	e5 56       	subi	r30, 0x65	; 101
     4d6:	ff 4d       	sbci	r31, 0xDF	; 223
     4d8:	80 81       	ld	r24, Z
     4da:	91 81       	ldd	r25, Z+1	; 0x01
     4dc:	89 2b       	or	r24, r25
     4de:	09 f5       	brne	.+66     	; 0x522 <udi_cdc_tx_send+0xa0>
     4e0:	80 91 94 20 	lds	r24, 0x2094
     4e4:	90 91 95 20 	lds	r25, 0x2095
     4e8:	01 96       	adiw	r24, 0x01	; 1
     4ea:	80 93 94 20 	sts	0x2094, r24
     4ee:	90 93 95 20 	sts	0x2095, r25
     4f2:	0e 94 65 0c 	call	0x18ca	; 0x18ca <udd_is_high_speed>
     4f6:	81 11       	cpse	r24, r1
     4f8:	07 c0       	rjmp	.+14     	; 0x508 <udi_cdc_tx_send+0x86>
     4fa:	80 91 94 20 	lds	r24, 0x2094
     4fe:	90 91 95 20 	lds	r25, 0x2095
     502:	84 36       	cpi	r24, 0x64	; 100
     504:	91 05       	cpc	r25, r1
     506:	58 f0       	brcs	.+22     	; 0x51e <udi_cdc_tx_send+0x9c>
     508:	0e 94 65 0c 	call	0x18ca	; 0x18ca <udd_is_high_speed>
     50c:	88 23       	and	r24, r24
     50e:	49 f0       	breq	.+18     	; 0x522 <udi_cdc_tx_send+0xa0>
     510:	80 91 94 20 	lds	r24, 0x2094
     514:	90 91 95 20 	lds	r25, 0x2095
     518:	80 32       	cpi	r24, 0x20	; 32
     51a:	93 40       	sbci	r25, 0x03	; 3
     51c:	10 f4       	brcc	.+4      	; 0x522 <udi_cdc_tx_send+0xa0>
     51e:	df bf       	out	0x3f, r29	; 63
     520:	55 c0       	rjmp	.+170    	; 0x5cc <udi_cdc_tx_send+0x14a>
     522:	10 92 94 20 	sts	0x2094, r1
     526:	10 92 95 20 	sts	0x2095, r1
     52a:	80 91 96 20 	lds	r24, 0x2096
     52e:	81 11       	cpse	r24, r1
     530:	06 c0       	rjmp	.+12     	; 0x53e <udi_cdc_tx_send+0xbc>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	c1 11       	cpse	r28, r1
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	80 93 9a 20 	sts	0x209A, r24
     53c:	04 c0       	rjmp	.+8      	; 0x546 <udi_cdc_tx_send+0xc4>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	c1 11       	cpse	r28, r1
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	c8 2f       	mov	r28, r24
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	80 93 97 20 	sts	0x2097, r24
     54c:	df bf       	out	0x3f, r29	; 63
     54e:	d0 e0       	ldi	r29, 0x00	; 0
     550:	fe 01       	movw	r30, r28
     552:	ee 0f       	add	r30, r30
     554:	ff 1f       	adc	r31, r31
     556:	e5 56       	subi	r30, 0x65	; 101
     558:	ff 4d       	sbci	r31, 0xDF	; 223
     55a:	ff 24       	eor	r15, r15
     55c:	f3 94       	inc	r15
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	80 34       	cpi	r24, 0x40	; 64
     564:	91 05       	cpc	r25, r1
     566:	09 f4       	brne	.+2      	; 0x56a <udi_cdc_tx_send+0xe8>
     568:	f1 2c       	mov	r15, r1
     56a:	ff 20       	and	r15, r15
     56c:	91 f0       	breq	.+36     	; 0x592 <udi_cdc_tx_send+0x110>
     56e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <udd_is_high_speed>
     572:	88 23       	and	r24, r24
     574:	39 f0       	breq	.+14     	; 0x584 <udi_cdc_tx_send+0x102>
     576:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <udd_get_micro_frame_number>
     57a:	80 93 98 20 	sts	0x2098, r24
     57e:	90 93 99 20 	sts	0x2099, r25
     582:	0b c0       	rjmp	.+22     	; 0x59a <udi_cdc_tx_send+0x118>
     584:	0e 94 6d 0c 	call	0x18da	; 0x18da <udd_get_frame_number>
     588:	80 93 98 20 	sts	0x2098, r24
     58c:	90 93 99 20 	sts	0x2099, r25
     590:	04 c0       	rjmp	.+8      	; 0x59a <udi_cdc_tx_send+0x118>
     592:	10 92 98 20 	sts	0x2098, r1
     596:	10 92 99 20 	sts	0x2099, r1
     59a:	fe 01       	movw	r30, r28
     59c:	ee 0f       	add	r30, r30
     59e:	ff 1f       	adc	r31, r31
     5a0:	e5 56       	subi	r30, 0x65	; 101
     5a2:	ff 4d       	sbci	r31, 0xDF	; 223
     5a4:	20 81       	ld	r18, Z
     5a6:	31 81       	ldd	r19, Z+1	; 0x01
     5a8:	ae 01       	movw	r20, r28
     5aa:	00 24       	eor	r0, r0
     5ac:	56 95       	lsr	r21
     5ae:	47 95       	ror	r20
     5b0:	07 94       	ror	r0
     5b2:	56 95       	lsr	r21
     5b4:	47 95       	ror	r20
     5b6:	07 94       	ror	r0
     5b8:	54 2f       	mov	r21, r20
     5ba:	40 2d       	mov	r20, r0
     5bc:	40 56       	subi	r20, 0x60	; 96
     5be:	5f 4d       	sbci	r21, 0xDF	; 223
     5c0:	0c ee       	ldi	r16, 0xEC	; 236
     5c2:	12 e0       	ldi	r17, 0x02	; 2
     5c4:	6f 2d       	mov	r22, r15
     5c6:	81 e8       	ldi	r24, 0x81	; 129
     5c8:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <udd_ep_run>
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	1f 91       	pop	r17
     5d2:	0f 91       	pop	r16
     5d4:	ff 90       	pop	r15
     5d6:	08 95       	ret

000005d8 <udi_cdc_data_sent>:
     5d8:	81 11       	cpse	r24, r1
     5da:	15 c0       	rjmp	.+42     	; 0x606 <udi_cdc_data_sent+0x2e>
     5dc:	20 91 9a 20 	lds	r18, 0x209A
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	22 23       	and	r18, r18
     5e6:	11 f0       	breq	.+4      	; 0x5ec <udi_cdc_data_sent+0x14>
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	fc 01       	movw	r30, r24
     5ee:	ee 0f       	add	r30, r30
     5f0:	ff 1f       	adc	r31, r31
     5f2:	e5 56       	subi	r30, 0x65	; 101
     5f4:	ff 4d       	sbci	r31, 0xDF	; 223
     5f6:	10 82       	st	Z, r1
     5f8:	11 82       	std	Z+1, r1	; 0x01
     5fa:	10 92 96 20 	sts	0x2096, r1
     5fe:	10 92 97 20 	sts	0x2097, r1
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	3e cf       	rjmp	.-388    	; 0x482 <udi_cdc_tx_send>
     606:	08 95       	ret

00000608 <udi_cdc_data_sof_notify>:
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	3b cf       	rjmp	.-394    	; 0x482 <udi_cdc_tx_send>
     60c:	08 95       	ret

0000060e <udi_cdc_multi_get_nb_received_data>:
     60e:	4f b7       	in	r20, 0x3f	; 63
     610:	f8 94       	cli
     612:	20 91 21 21 	lds	r18, 0x2121
     616:	30 91 22 21 	lds	r19, 0x2122
     61a:	e0 91 23 21 	lds	r30, 0x2123
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	ee 0f       	add	r30, r30
     622:	ff 1f       	adc	r31, r31
     624:	ec 5d       	subi	r30, 0xDC	; 220
     626:	fe 4d       	sbci	r31, 0xDE	; 222
     628:	80 81       	ld	r24, Z
     62a:	91 81       	ldd	r25, Z+1	; 0x01
     62c:	82 1b       	sub	r24, r18
     62e:	93 0b       	sbc	r25, r19
     630:	4f bf       	out	0x3f, r20	; 63
     632:	08 95       	ret

00000634 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     634:	ec df       	rcall	.-40     	; 0x60e <udi_cdc_multi_get_nb_received_data>
     636:	21 e0       	ldi	r18, 0x01	; 1
     638:	89 2b       	or	r24, r25
     63a:	09 f4       	brne	.+2      	; 0x63e <udi_cdc_multi_is_rx_ready+0xa>
     63c:	20 e0       	ldi	r18, 0x00	; 0
}
     63e:	82 2f       	mov	r24, r18
     640:	08 95       	ret

00000642 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     64a:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
     64c:	f8 94       	cli
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     64e:	50 91 23 21 	lds	r21, 0x2123
	if (udi_cdc_rx_trans_ongoing[port] ||
     652:	80 91 20 21 	lds	r24, 0x2120
     656:	81 11       	cpse	r24, r1
     658:	10 c0       	rjmp	.+32     	; 0x67a <udi_cdc_rx_start+0x38>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     65a:	20 91 21 21 	lds	r18, 0x2121
     65e:	30 91 22 21 	lds	r19, 0x2122
     662:	c5 2f       	mov	r28, r21
     664:	d0 e0       	ldi	r29, 0x00	; 0
     666:	fe 01       	movw	r30, r28
     668:	ee 0f       	add	r30, r30
     66a:	ff 1f       	adc	r31, r31
     66c:	ec 5d       	subi	r30, 0xDC	; 220
     66e:	fe 4d       	sbci	r31, 0xDE	; 222
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
     670:	80 81       	ld	r24, Z
     672:	91 81       	ldd	r25, Z+1	; 0x01
     674:	28 17       	cp	r18, r24
     676:	39 07       	cpc	r19, r25
     678:	18 f4       	brcc	.+6      	; 0x680 <udi_cdc_rx_start+0x3e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     67a:	4f bf       	out	0x3f, r20	; 63
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	23 c0       	rjmp	.+70     	; 0x6c6 <udi_cdc_rx_start+0x84>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
     680:	10 92 21 21 	sts	0x2121, r1
     684:	10 92 22 21 	sts	0x2122, r1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	51 11       	cpse	r21, r1
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	80 93 23 21 	sts	0x2123, r24

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	80 93 20 21 	sts	0x2120, r24
     698:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	cb df       	rcall	.-106    	; 0x634 <udi_cdc_multi_is_rx_ready>
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
     69e:	ae 01       	movw	r20, r28
     6a0:	00 24       	eor	r0, r0
     6a2:	56 95       	lsr	r21
     6a4:	47 95       	ror	r20
     6a6:	07 94       	ror	r0
     6a8:	56 95       	lsr	r21
     6aa:	47 95       	ror	r20
     6ac:	07 94       	ror	r0
     6ae:	54 2f       	mov	r21, r20
     6b0:	40 2d       	mov	r20, r0
     6b2:	48 5d       	subi	r20, 0xD8	; 216
     6b4:	5e 4d       	sbci	r21, 0xDE	; 222
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
     6b6:	0a e9       	ldi	r16, 0x9A	; 154
     6b8:	13 e0       	ldi	r17, 0x03	; 3
     6ba:	20 e4       	ldi	r18, 0x40	; 64
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <udd_ep_run>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	08 95       	ret

000006d0 <udi_cdc_data_enable>:
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
     6d0:	10 92 a9 21 	sts	0x21A9, r1
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
     6d4:	10 92 97 20 	sts	0x2097, r1
	udi_cdc_tx_both_buf_to_send[port] = false;
     6d8:	10 92 96 20 	sts	0x2096, r1
	udi_cdc_tx_buf_sel[port] = 0;
     6dc:	10 92 9a 20 	sts	0x209A, r1
	udi_cdc_tx_buf_nb[port][0] = 0;
     6e0:	10 92 9b 20 	sts	0x209B, r1
     6e4:	10 92 9c 20 	sts	0x209C, r1
	udi_cdc_tx_buf_nb[port][1] = 0;
     6e8:	10 92 9d 20 	sts	0x209D, r1
     6ec:	10 92 9e 20 	sts	0x209E, r1
	udi_cdc_tx_sof_num[port] = 0;
     6f0:	10 92 98 20 	sts	0x2098, r1
     6f4:	10 92 99 20 	sts	0x2099, r1
	udi_cdc_tx_send(port);
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	c3 de       	rcall	.-634    	; 0x482 <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
     6fc:	10 92 20 21 	sts	0x2120, r1
	udi_cdc_rx_buf_sel[port] = 0;
     700:	10 92 23 21 	sts	0x2123, r1
	udi_cdc_rx_buf_nb[port][0] = 0;
     704:	10 92 24 21 	sts	0x2124, r1
     708:	10 92 25 21 	sts	0x2125, r1
	udi_cdc_rx_pos[port] = 0;
     70c:	10 92 21 21 	sts	0x2121, r1
     710:	10 92 22 21 	sts	0x2122, r1
	if (!udi_cdc_rx_start(port)) {
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	95 df       	rcall	.-214    	; 0x642 <udi_cdc_rx_start>
     718:	88 23       	and	r24, r24
     71a:	59 f0       	breq	.+22     	; 0x732 <udi_cdc_data_enable+0x62>
		return false;
	}
	udi_cdc_nb_data_enabled++;
     71c:	90 91 a9 21 	lds	r25, 0x21A9
     720:	9f 5f       	subi	r25, 0xFF	; 255
     722:	90 93 a9 21 	sts	0x21A9, r25
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     726:	90 91 a9 21 	lds	r25, 0x21A9
     72a:	91 30       	cpi	r25, 0x01	; 1
     72c:	11 f4       	brne	.+4      	; 0x732 <udi_cdc_data_enable+0x62>
		udi_cdc_data_running = true;
     72e:	90 93 a8 21 	sts	0x21A8, r25
	}
	return true;
}
     732:	08 95       	ret

00000734 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	94 2f       	mov	r25, r20
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
     73a:	81 11       	cpse	r24, r1
     73c:	29 c0       	rjmp	.+82     	; 0x790 <udi_cdc_data_received+0x5c>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     73e:	80 91 23 21 	lds	r24, 0x2123
     742:	e1 e0       	ldi	r30, 0x01	; 1
     744:	81 11       	cpse	r24, r1
     746:	e0 e0       	ldi	r30, 0x00	; 0
	if (!n) {
     748:	61 15       	cp	r22, r1
     74a:	71 05       	cpc	r23, r1
     74c:	b1 f4       	brne	.+44     	; 0x77a <udi_cdc_data_received+0x46>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	00 24       	eor	r0, r0
     752:	f6 95       	lsr	r31
     754:	e7 95       	ror	r30
     756:	07 94       	ror	r0
     758:	f6 95       	lsr	r31
     75a:	e7 95       	ror	r30
     75c:	07 94       	ror	r0
     75e:	fe 2f       	mov	r31, r30
     760:	e0 2d       	mov	r30, r0
     762:	af 01       	movw	r20, r30
     764:	48 5d       	subi	r20, 0xD8	; 216
     766:	5e 4d       	sbci	r21, 0xDE	; 222
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
     768:	0a e9       	ldi	r16, 0x9A	; 154
     76a:	13 e0       	ldi	r17, 0x03	; 3
     76c:	20 e4       	ldi	r18, 0x40	; 64
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	61 e0       	ldi	r22, 0x01	; 1
     772:	89 2f       	mov	r24, r25
     774:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <udd_ep_run>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
     778:	0b c0       	rjmp	.+22     	; 0x790 <udi_cdc_data_received+0x5c>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	ee 0f       	add	r30, r30
     77e:	ff 1f       	adc	r31, r31
     780:	ec 5d       	subi	r30, 0xDC	; 220
     782:	fe 4d       	sbci	r31, 0xDE	; 222
     784:	60 83       	st	Z, r22
     786:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
     788:	10 92 20 21 	sts	0x2120, r1
	udi_cdc_rx_start(port);
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	59 df       	rcall	.-334    	; 0x642 <udi_cdc_rx_start>
}
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	08 95       	ret

00000796 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     796:	e0 91 c4 21 	lds	r30, 0x21C4
     79a:	f0 91 c5 21 	lds	r31, 0x21C5
     79e:	01 90       	ld	r0, Z+
     7a0:	f0 81       	ld	r31, Z
     7a2:	e0 2d       	mov	r30, r0
     7a4:	22 81       	ldd	r18, Z+2	; 0x02
     7a6:	33 81       	ldd	r19, Z+3	; 0x03
     7a8:	2e 0f       	add	r18, r30
     7aa:	3f 1f       	adc	r19, r31
     7ac:	fc 01       	movw	r30, r24
     7ae:	40 81       	ld	r20, Z
     7b0:	e4 0f       	add	r30, r20
     7b2:	f1 1d       	adc	r31, r1
     7b4:	e2 17       	cp	r30, r18
     7b6:	f3 07       	cpc	r31, r19
     7b8:	a0 f4       	brcc	.+40     	; 0x7e2 <udc_next_desc_in_iface+0x4c>
     7ba:	81 81       	ldd	r24, Z+1	; 0x01
     7bc:	84 30       	cpi	r24, 0x04	; 4
     7be:	a1 f0       	breq	.+40     	; 0x7e8 <udc_next_desc_in_iface+0x52>
     7c0:	86 13       	cpse	r24, r22
     7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <udc_next_desc_in_iface+0x3a>
     7c4:	14 c0       	rjmp	.+40     	; 0x7ee <udc_next_desc_in_iface+0x58>
     7c6:	81 81       	ldd	r24, Z+1	; 0x01
     7c8:	84 30       	cpi	r24, 0x04	; 4
     7ca:	a1 f0       	breq	.+40     	; 0x7f4 <udc_next_desc_in_iface+0x5e>
     7cc:	86 17       	cp	r24, r22
     7ce:	a9 f0       	breq	.+42     	; 0x7fa <udc_next_desc_in_iface+0x64>
     7d0:	80 81       	ld	r24, Z
     7d2:	e8 0f       	add	r30, r24
     7d4:	f1 1d       	adc	r31, r1
     7d6:	e2 17       	cp	r30, r18
     7d8:	f3 07       	cpc	r31, r19
     7da:	a8 f3       	brcs	.-22     	; 0x7c6 <udc_next_desc_in_iface+0x30>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	08 95       	ret
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	08 95       	ret
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	08 95       	ret
     7ee:	8e 2f       	mov	r24, r30
     7f0:	9f 2f       	mov	r25, r31
     7f2:	08 95       	ret
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	08 95       	ret
     7fa:	8e 2f       	mov	r24, r30
     7fc:	9f 2f       	mov	r25, r31
     7fe:	08 95       	ret

00000800 <udc_valid_address>:
     800:	80 91 05 23 	lds	r24, 0x2305
     804:	8f 77       	andi	r24, 0x7F	; 127
     806:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <udd_set_address>
     80a:	08 95       	ret

0000080c <udc_update_iface_desc>:
     80c:	90 91 c6 21 	lds	r25, 0x21C6
     810:	99 23       	and	r25, r25
     812:	81 f1       	breq	.+96     	; 0x874 <udc_update_iface_desc+0x68>
     814:	e0 91 c4 21 	lds	r30, 0x21C4
     818:	f0 91 c5 21 	lds	r31, 0x21C5
     81c:	01 90       	ld	r0, Z+
     81e:	f0 81       	ld	r31, Z
     820:	e0 2d       	mov	r30, r0
     822:	94 81       	ldd	r25, Z+4	; 0x04
     824:	89 17       	cp	r24, r25
     826:	40 f5       	brcc	.+80     	; 0x878 <udc_update_iface_desc+0x6c>
     828:	e0 93 c2 21 	sts	0x21C2, r30
     82c:	f0 93 c3 21 	sts	0x21C3, r31
     830:	22 81       	ldd	r18, Z+2	; 0x02
     832:	33 81       	ldd	r19, Z+3	; 0x03
     834:	2e 0f       	add	r18, r30
     836:	3f 1f       	adc	r19, r31
     838:	e2 17       	cp	r30, r18
     83a:	f3 07       	cpc	r31, r19
     83c:	f8 f4       	brcc	.+62     	; 0x87c <udc_update_iface_desc+0x70>
     83e:	91 81       	ldd	r25, Z+1	; 0x01
     840:	94 30       	cpi	r25, 0x04	; 4
     842:	61 f4       	brne	.+24     	; 0x85c <udc_update_iface_desc+0x50>
     844:	92 81       	ldd	r25, Z+2	; 0x02
     846:	98 13       	cpse	r25, r24
     848:	09 c0       	rjmp	.+18     	; 0x85c <udc_update_iface_desc+0x50>
     84a:	93 81       	ldd	r25, Z+3	; 0x03
     84c:	96 13       	cpse	r25, r22
     84e:	06 c0       	rjmp	.+12     	; 0x85c <udc_update_iface_desc+0x50>
     850:	e0 93 c2 21 	sts	0x21C2, r30
     854:	f0 93 c3 21 	sts	0x21C3, r31
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	08 95       	ret
     85c:	90 81       	ld	r25, Z
     85e:	e9 0f       	add	r30, r25
     860:	f1 1d       	adc	r31, r1
     862:	e2 17       	cp	r30, r18
     864:	f3 07       	cpc	r31, r19
     866:	58 f3       	brcs	.-42     	; 0x83e <udc_update_iface_desc+0x32>
     868:	e0 93 c2 21 	sts	0x21C2, r30
     86c:	f0 93 c3 21 	sts	0x21C3, r31
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	08 95       	ret
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	08 95       	ret
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	08 95       	ret
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	08 95       	ret

00000880 <udc_iface_disable>:
     880:	ff 92       	push	r15
     882:	0f 93       	push	r16
     884:	1f 93       	push	r17
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	c8 2f       	mov	r28, r24
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	be df       	rcall	.-132    	; 0x80c <udc_update_iface_desc>
     890:	f8 2e       	mov	r15, r24
     892:	88 23       	and	r24, r24
     894:	81 f1       	breq	.+96     	; 0x8f6 <udc_iface_disable+0x76>
     896:	a0 91 c4 21 	lds	r26, 0x21C4
     89a:	b0 91 c5 21 	lds	r27, 0x21C5
     89e:	ec 2f       	mov	r30, r28
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	ee 0f       	add	r30, r30
     8a4:	ff 1f       	adc	r31, r31
     8a6:	12 96       	adiw	r26, 0x02	; 2
     8a8:	2d 91       	ld	r18, X+
     8aa:	3c 91       	ld	r19, X
     8ac:	13 97       	sbiw	r26, 0x03	; 3
     8ae:	e2 0f       	add	r30, r18
     8b0:	f3 1f       	adc	r31, r19
     8b2:	00 81       	ld	r16, Z
     8b4:	11 81       	ldd	r17, Z+1	; 0x01
     8b6:	d8 01       	movw	r26, r16
     8b8:	16 96       	adiw	r26, 0x06	; 6
     8ba:	ed 91       	ld	r30, X+
     8bc:	fc 91       	ld	r31, X
     8be:	17 97       	sbiw	r26, 0x07	; 7
     8c0:	09 95       	icall
     8c2:	68 2f       	mov	r22, r24
     8c4:	8c 2f       	mov	r24, r28
     8c6:	a2 df       	rcall	.-188    	; 0x80c <udc_update_iface_desc>
     8c8:	f8 2e       	mov	r15, r24
     8ca:	88 23       	and	r24, r24
     8cc:	a1 f0       	breq	.+40     	; 0x8f6 <udc_iface_disable+0x76>
     8ce:	c0 91 c2 21 	lds	r28, 0x21C2
     8d2:	d0 91 c3 21 	lds	r29, 0x21C3
     8d6:	65 e0       	ldi	r22, 0x05	; 5
     8d8:	ce 01       	movw	r24, r28
     8da:	5d df       	rcall	.-326    	; 0x796 <udc_next_desc_in_iface>
     8dc:	ec 01       	movw	r28, r24
     8de:	00 97       	sbiw	r24, 0x00	; 0
     8e0:	21 f0       	breq	.+8      	; 0x8ea <udc_iface_disable+0x6a>
     8e2:	8a 81       	ldd	r24, Y+2	; 0x02
     8e4:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <udd_ep_free>
     8e8:	f6 cf       	rjmp	.-20     	; 0x8d6 <udc_iface_disable+0x56>
     8ea:	d8 01       	movw	r26, r16
     8ec:	12 96       	adiw	r26, 0x02	; 2
     8ee:	ed 91       	ld	r30, X+
     8f0:	fc 91       	ld	r31, X
     8f2:	13 97       	sbiw	r26, 0x03	; 3
     8f4:	09 95       	icall
     8f6:	8f 2d       	mov	r24, r15
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	ff 90       	pop	r15
     902:	08 95       	ret

00000904 <udc_iface_enable>:
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	18 2f       	mov	r17, r24
     90c:	7f df       	rcall	.-258    	; 0x80c <udc_update_iface_desc>
     90e:	88 23       	and	r24, r24
     910:	39 f1       	breq	.+78     	; 0x960 <udc_iface_enable+0x5c>
     912:	c0 91 c2 21 	lds	r28, 0x21C2
     916:	d0 91 c3 21 	lds	r29, 0x21C3
     91a:	65 e0       	ldi	r22, 0x05	; 5
     91c:	ce 01       	movw	r24, r28
     91e:	3b df       	rcall	.-394    	; 0x796 <udc_next_desc_in_iface>
     920:	ec 01       	movw	r28, r24
     922:	00 97       	sbiw	r24, 0x00	; 0
     924:	41 f0       	breq	.+16     	; 0x936 <udc_iface_enable+0x32>
     926:	4c 81       	ldd	r20, Y+4	; 0x04
     928:	5d 81       	ldd	r21, Y+5	; 0x05
     92a:	6b 81       	ldd	r22, Y+3	; 0x03
     92c:	8a 81       	ldd	r24, Y+2	; 0x02
     92e:	e6 d7       	rcall	.+4044   	; 0x18fc <udd_ep_alloc>
     930:	81 11       	cpse	r24, r1
     932:	f3 cf       	rjmp	.-26     	; 0x91a <udc_iface_enable+0x16>
     934:	15 c0       	rjmp	.+42     	; 0x960 <udc_iface_enable+0x5c>
     936:	a0 91 c4 21 	lds	r26, 0x21C4
     93a:	b0 91 c5 21 	lds	r27, 0x21C5
     93e:	81 2f       	mov	r24, r17
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	88 0f       	add	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	12 96       	adiw	r26, 0x02	; 2
     948:	ed 91       	ld	r30, X+
     94a:	fc 91       	ld	r31, X
     94c:	13 97       	sbiw	r26, 0x03	; 3
     94e:	e8 0f       	add	r30, r24
     950:	f9 1f       	adc	r31, r25
     952:	01 90       	ld	r0, Z+
     954:	f0 81       	ld	r31, Z
     956:	e0 2d       	mov	r30, r0
     958:	01 90       	ld	r0, Z+
     95a:	f0 81       	ld	r31, Z
     95c:	e0 2d       	mov	r30, r0
     95e:	09 95       	icall
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	08 95       	ret

00000968 <udc_reset>:
     968:	cf 93       	push	r28
     96a:	80 91 c6 21 	lds	r24, 0x21C6
     96e:	88 23       	and	r24, r24
     970:	c1 f0       	breq	.+48     	; 0x9a2 <udc_reset+0x3a>
     972:	e0 91 c4 21 	lds	r30, 0x21C4
     976:	f0 91 c5 21 	lds	r31, 0x21C5
     97a:	01 90       	ld	r0, Z+
     97c:	f0 81       	ld	r31, Z
     97e:	e0 2d       	mov	r30, r0
     980:	84 81       	ldd	r24, Z+4	; 0x04
     982:	88 23       	and	r24, r24
     984:	71 f0       	breq	.+28     	; 0x9a2 <udc_reset+0x3a>
     986:	c0 e0       	ldi	r28, 0x00	; 0
     988:	8c 2f       	mov	r24, r28
     98a:	7a df       	rcall	.-268    	; 0x880 <udc_iface_disable>
     98c:	cf 5f       	subi	r28, 0xFF	; 255
     98e:	e0 91 c4 21 	lds	r30, 0x21C4
     992:	f0 91 c5 21 	lds	r31, 0x21C5
     996:	01 90       	ld	r0, Z+
     998:	f0 81       	ld	r31, Z
     99a:	e0 2d       	mov	r30, r0
     99c:	84 81       	ldd	r24, Z+4	; 0x04
     99e:	c8 17       	cp	r28, r24
     9a0:	98 f3       	brcs	.-26     	; 0x988 <udc_reset+0x20>
     9a2:	10 92 c6 21 	sts	0x21C6, r1
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	80 93 c7 21 	sts	0x21C7, r24
     9ae:	90 93 c8 21 	sts	0x21C8, r25
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     9b6:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     9b8:	80 91 c6 21 	lds	r24, 0x21C6
     9bc:	88 23       	and	r24, r24
     9be:	41 f1       	breq	.+80     	; 0xa10 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     9c0:	e0 91 c4 21 	lds	r30, 0x21C4
     9c4:	f0 91 c5 21 	lds	r31, 0x21C5
     9c8:	a0 81       	ld	r26, Z
     9ca:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     9cc:	14 96       	adiw	r26, 0x04	; 4
     9ce:	8c 91       	ld	r24, X
     9d0:	88 23       	and	r24, r24
     9d2:	f1 f0       	breq	.+60     	; 0xa10 <udc_sof_notify+0x5a>
     9d4:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     9d6:	8c 2f       	mov	r24, r28
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	02 80       	ldd	r0, Z+2	; 0x02
     9e0:	f3 81       	ldd	r31, Z+3	; 0x03
     9e2:	e0 2d       	mov	r30, r0
     9e4:	e8 0f       	add	r30, r24
     9e6:	f9 1f       	adc	r31, r25
     9e8:	01 90       	ld	r0, Z+
     9ea:	f0 81       	ld	r31, Z
     9ec:	e0 2d       	mov	r30, r0
     9ee:	00 84       	ldd	r0, Z+8	; 0x08
     9f0:	f1 85       	ldd	r31, Z+9	; 0x09
     9f2:	e0 2d       	mov	r30, r0
     9f4:	30 97       	sbiw	r30, 0x00	; 0
     9f6:	09 f0       	breq	.+2      	; 0x9fa <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     9f8:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     9fa:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     9fc:	e0 91 c4 21 	lds	r30, 0x21C4
     a00:	f0 91 c5 21 	lds	r31, 0x21C5
     a04:	a0 81       	ld	r26, Z
     a06:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     a08:	14 96       	adiw	r26, 0x04	; 4
     a0a:	8c 91       	ld	r24, X
     a0c:	c8 17       	cp	r28, r24
     a0e:	18 f3       	brcs	.-58     	; 0x9d6 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     a20:	10 92 0d 23 	sts	0x230D, r1
     a24:	10 92 0e 23 	sts	0x230E, r1
	udd_g_ctrlreq.callback = NULL;
     a28:	10 92 0f 23 	sts	0x230F, r1
     a2c:	10 92 10 23 	sts	0x2310, r1
	udd_g_ctrlreq.over_under_run = NULL;
     a30:	10 92 11 23 	sts	0x2311, r1
     a34:	10 92 12 23 	sts	0x2312, r1

	if (Udd_setup_is_in()) {
     a38:	20 91 03 23 	lds	r18, 0x2303
     a3c:	22 23       	and	r18, r18
     a3e:	0c f0       	brlt	.+2      	; 0xa42 <udc_process_setup+0x2e>
     a40:	65 c2       	rjmp	.+1226   	; 0xf0c <udc_process_setup+0x4f8>
		if (udd_g_ctrlreq.req.wLength == 0) {
     a42:	80 91 09 23 	lds	r24, 0x2309
     a46:	90 91 0a 23 	lds	r25, 0x230A
     a4a:	00 97       	sbiw	r24, 0x00	; 0
     a4c:	09 f0       	breq	.+2      	; 0xa50 <udc_process_setup+0x3c>
     a4e:	63 c2       	rjmp	.+1222   	; 0xf16 <udc_process_setup+0x502>
     a50:	59 c2       	rjmp	.+1202   	; 0xf04 <udc_process_setup+0x4f0>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     a52:	2f 71       	andi	r18, 0x1F	; 31
     a54:	09 f0       	breq	.+2      	; 0xa58 <udc_process_setup+0x44>
     a56:	8b c0       	rjmp	.+278    	; 0xb6e <udc_process_setup+0x15a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     a58:	30 91 04 23 	lds	r19, 0x2304
     a5c:	36 30       	cpi	r19, 0x06	; 6
     a5e:	81 f0       	breq	.+32     	; 0xa80 <udc_process_setup+0x6c>
     a60:	38 30       	cpi	r19, 0x08	; 8
     a62:	09 f4       	brne	.+2      	; 0xa66 <udc_process_setup+0x52>
     a64:	79 c0       	rjmp	.+242    	; 0xb58 <udc_process_setup+0x144>
     a66:	31 11       	cpse	r19, r1
     a68:	82 c0       	rjmp	.+260    	; 0xb6e <udc_process_setup+0x15a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     a6a:	02 97       	sbiw	r24, 0x02	; 2
     a6c:	39 f4       	brne	.+14     	; 0xa7c <udc_process_setup+0x68>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     a6e:	62 e0       	ldi	r22, 0x02	; 2
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	87 ec       	ldi	r24, 0xC7	; 199
     a74:	91 e2       	ldi	r25, 0x21	; 33
     a76:	39 d7       	rcall	.+3698   	; 0x18ea <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     a78:	01 e0       	ldi	r16, 0x01	; 1
     a7a:	c7 c1       	rjmp	.+910    	; 0xe0a <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     a7c:	00 e0       	ldi	r16, 0x00	; 0
     a7e:	c5 c1       	rjmp	.+906    	; 0xe0a <udc_process_setup+0x3f6>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     a80:	20 91 05 23 	lds	r18, 0x2305
     a84:	30 91 06 23 	lds	r19, 0x2306

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     a88:	83 2f       	mov	r24, r19
     a8a:	99 27       	eor	r25, r25
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	91 05       	cpc	r25, r1
     a90:	99 f0       	breq	.+38     	; 0xab8 <udc_process_setup+0xa4>
     a92:	1c f4       	brge	.+6      	; 0xa9a <udc_process_setup+0x86>
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	39 f0       	breq	.+14     	; 0xaa6 <udc_process_setup+0x92>
     a98:	55 c0       	rjmp	.+170    	; 0xb44 <udc_process_setup+0x130>
     a9a:	83 30       	cpi	r24, 0x03	; 3
     a9c:	91 05       	cpc	r25, r1
     a9e:	d1 f1       	breq	.+116    	; 0xb14 <udc_process_setup+0x100>
     aa0:	0f 97       	sbiw	r24, 0x0f	; 15
     aa2:	59 f1       	breq	.+86     	; 0xafa <udc_process_setup+0xe6>
     aa4:	4f c0       	rjmp	.+158    	; 0xb44 <udc_process_setup+0x130>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     aa6:	80 91 14 20 	lds	r24, 0x2014
     aaa:	90 91 15 20 	lds	r25, 0x2015
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     aae:	dc 01       	movw	r26, r24
     ab0:	6c 91       	ld	r22, X
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	1a d7       	rcall	.+3636   	; 0x18ea <udd_set_setup_payload>
     ab6:	35 c0       	rjmp	.+106    	; 0xb22 <udc_process_setup+0x10e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     ab8:	e0 91 14 20 	lds	r30, 0x2014
     abc:	f0 91 15 20 	lds	r31, 0x2015
     ac0:	81 89       	ldd	r24, Z+17	; 0x11
     ac2:	28 17       	cp	r18, r24
     ac4:	08 f0       	brcs	.+2      	; 0xac8 <udc_process_setup+0xb4>
     ac6:	40 c0       	rjmp	.+128    	; 0xb48 <udc_process_setup+0x134>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     ac8:	c9 01       	movw	r24, r18
     aca:	99 27       	eor	r25, r25
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	e0 91 16 20 	lds	r30, 0x2016
     ad8:	f0 91 17 20 	lds	r31, 0x2017
     adc:	e8 0f       	add	r30, r24
     ade:	f9 1f       	adc	r31, r25
     ae0:	80 81       	ld	r24, Z
     ae2:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     ae4:	fc 01       	movw	r30, r24
     ae6:	62 81       	ldd	r22, Z+2	; 0x02
     ae8:	73 81       	ldd	r23, Z+3	; 0x03
     aea:	ff d6       	rcall	.+3582   	; 0x18ea <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     aec:	e0 91 0b 23 	lds	r30, 0x230B
     af0:	f0 91 0c 23 	lds	r31, 0x230C
     af4:	82 e0       	ldi	r24, 0x02	; 2
     af6:	81 83       	std	Z+1, r24	; 0x01
     af8:	14 c0       	rjmp	.+40     	; 0xb22 <udc_process_setup+0x10e>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     afa:	80 91 18 20 	lds	r24, 0x2018
     afe:	90 91 19 20 	lds	r25, 0x2019
     b02:	00 97       	sbiw	r24, 0x00	; 0
     b04:	19 f1       	breq	.+70     	; 0xb4c <udc_process_setup+0x138>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     b06:	dc 01       	movw	r26, r24
     b08:	12 96       	adiw	r26, 0x02	; 2
     b0a:	6d 91       	ld	r22, X+
     b0c:	7c 91       	ld	r23, X
     b0e:	13 97       	sbiw	r26, 0x03	; 3
     b10:	ec d6       	rcall	.+3544   	; 0x18ea <udd_set_setup_payload>
     b12:	07 c0       	rjmp	.+14     	; 0xb22 <udc_process_setup+0x10e>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     b14:	21 11       	cpse	r18, r1
     b16:	1c c0       	rjmp	.+56     	; 0xb50 <udc_process_setup+0x13c>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     b18:	64 e0       	ldi	r22, 0x04	; 4
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	88 e7       	ldi	r24, 0x78	; 120
     b1e:	90 e2       	ldi	r25, 0x20	; 32
     b20:	e4 d6       	rcall	.+3528   	; 0x18ea <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     b22:	80 91 09 23 	lds	r24, 0x2309
     b26:	90 91 0a 23 	lds	r25, 0x230A
     b2a:	20 91 0d 23 	lds	r18, 0x230D
     b2e:	30 91 0e 23 	lds	r19, 0x230E
     b32:	82 17       	cp	r24, r18
     b34:	93 07       	cpc	r25, r19
     b36:	70 f4       	brcc	.+28     	; 0xb54 <udc_process_setup+0x140>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     b38:	80 93 0d 23 	sts	0x230D, r24
     b3c:	90 93 0e 23 	sts	0x230E, r25
	}
	return true;
     b40:	01 e0       	ldi	r16, 0x01	; 1
     b42:	63 c1       	rjmp	.+710    	; 0xe0a <udc_process_setup+0x3f6>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     b44:	00 e0       	ldi	r16, 0x00	; 0
     b46:	61 c1       	rjmp	.+706    	; 0xe0a <udc_process_setup+0x3f6>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     b48:	00 e0       	ldi	r16, 0x00	; 0
     b4a:	5f c1       	rjmp	.+702    	; 0xe0a <udc_process_setup+0x3f6>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     b4c:	00 e0       	ldi	r16, 0x00	; 0
     b4e:	5d c1       	rjmp	.+698    	; 0xe0a <udc_process_setup+0x3f6>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     b50:	00 e0       	ldi	r16, 0x00	; 0
     b52:	5b c1       	rjmp	.+694    	; 0xe0a <udc_process_setup+0x3f6>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     b54:	01 e0       	ldi	r16, 0x01	; 1
     b56:	59 c1       	rjmp	.+690    	; 0xe0a <udc_process_setup+0x3f6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     b58:	01 97       	sbiw	r24, 0x01	; 1
     b5a:	39 f4       	brne	.+14     	; 0xb6a <udc_process_setup+0x156>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	86 ec       	ldi	r24, 0xC6	; 198
     b62:	91 e2       	ldi	r25, 0x21	; 33
     b64:	c2 d6       	rcall	.+3460   	; 0x18ea <udd_set_setup_payload>
	return true;
     b66:	01 e0       	ldi	r16, 0x01	; 1
     b68:	50 c1       	rjmp	.+672    	; 0xe0a <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     b6a:	00 e0       	ldi	r16, 0x00	; 0
     b6c:	4e c1       	rjmp	.+668    	; 0xe0a <udc_process_setup+0x3f6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     b6e:	21 30       	cpi	r18, 0x01	; 1
     b70:	09 f0       	breq	.+2      	; 0xb74 <udc_process_setup+0x160>
     b72:	3f c0       	rjmp	.+126    	; 0xbf2 <udc_process_setup+0x1de>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     b74:	30 91 04 23 	lds	r19, 0x2304
     b78:	3a 30       	cpi	r19, 0x0A	; 10
     b7a:	d9 f5       	brne	.+118    	; 0xbf2 <udc_process_setup+0x1de>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	99 f5       	brne	.+102    	; 0xbe6 <udc_process_setup+0x1d2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     b80:	80 91 c6 21 	lds	r24, 0x21C6
     b84:	88 23       	and	r24, r24
     b86:	89 f1       	breq	.+98     	; 0xbea <udc_process_setup+0x1d6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     b88:	c0 91 07 23 	lds	r28, 0x2307
     b8c:	d0 91 08 23 	lds	r29, 0x2308
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     b90:	e0 90 c4 21 	lds	r14, 0x21C4
     b94:	f0 90 c5 21 	lds	r15, 0x21C5
     b98:	d7 01       	movw	r26, r14
     b9a:	ed 91       	ld	r30, X+
     b9c:	fc 91       	ld	r31, X
     b9e:	84 81       	ldd	r24, Z+4	; 0x04
     ba0:	c8 17       	cp	r28, r24
     ba2:	28 f5       	brcc	.+74     	; 0xbee <udc_process_setup+0x1da>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	8c 2f       	mov	r24, r28
     ba8:	31 de       	rcall	.-926    	; 0x80c <udc_update_iface_desc>
     baa:	08 2f       	mov	r16, r24
     bac:	88 23       	and	r24, r24
     bae:	09 f4       	brne	.+2      	; 0xbb2 <udc_process_setup+0x19e>
     bb0:	2c c1       	rjmp	.+600    	; 0xe0a <udc_process_setup+0x3f6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     bb2:	ce 01       	movw	r24, r28
     bb4:	99 27       	eor	r25, r25
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	d7 01       	movw	r26, r14
     bbc:	12 96       	adiw	r26, 0x02	; 2
     bbe:	ed 91       	ld	r30, X+
     bc0:	fc 91       	ld	r31, X
     bc2:	13 97       	sbiw	r26, 0x03	; 3
     bc4:	e8 0f       	add	r30, r24
     bc6:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     bc8:	01 90       	ld	r0, Z+
     bca:	f0 81       	ld	r31, Z
     bcc:	e0 2d       	mov	r30, r0
     bce:	06 80       	ldd	r0, Z+6	; 0x06
     bd0:	f7 81       	ldd	r31, Z+7	; 0x07
     bd2:	e0 2d       	mov	r30, r0
     bd4:	09 95       	icall
     bd6:	80 93 c1 21 	sts	0x21C1, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	81 ec       	ldi	r24, 0xC1	; 193
     be0:	91 e2       	ldi	r25, 0x21	; 33
     be2:	83 d6       	rcall	.+3334   	; 0x18ea <udd_set_setup_payload>
     be4:	12 c1       	rjmp	.+548    	; 0xe0a <udc_process_setup+0x3f6>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     be6:	00 e0       	ldi	r16, 0x00	; 0
     be8:	10 c1       	rjmp	.+544    	; 0xe0a <udc_process_setup+0x3f6>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     bea:	00 e0       	ldi	r16, 0x00	; 0
     bec:	0e c1       	rjmp	.+540    	; 0xe0a <udc_process_setup+0x3f6>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     bee:	00 e0       	ldi	r16, 0x00	; 0
     bf0:	0c c1       	rjmp	.+536    	; 0xe0a <udc_process_setup+0x3f6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     bf2:	22 30       	cpi	r18, 0x02	; 2
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <udc_process_setup+0x1e4>
     bf6:	0b c1       	rjmp	.+534    	; 0xe0e <udc_process_setup+0x3fa>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     bf8:	20 91 04 23 	lds	r18, 0x2304
     bfc:	21 11       	cpse	r18, r1
     bfe:	00 c1       	rjmp	.+512    	; 0xe00 <udc_process_setup+0x3ec>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     c00:	02 97       	sbiw	r24, 0x02	; 2
     c02:	79 f4       	brne	.+30     	; 0xc22 <udc_process_setup+0x20e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     c04:	80 91 07 23 	lds	r24, 0x2307
     c08:	da d6       	rcall	.+3508   	; 0x19be <udd_ep_is_halted>
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	80 93 bf 21 	sts	0x21BF, r24
     c10:	90 93 c0 21 	sts	0x21C0, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     c14:	62 e0       	ldi	r22, 0x02	; 2
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	8f eb       	ldi	r24, 0xBF	; 191
     c1a:	91 e2       	ldi	r25, 0x21	; 33
     c1c:	66 d6       	rcall	.+3276   	; 0x18ea <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     c1e:	01 e0       	ldi	r16, 0x01	; 1
     c20:	f4 c0       	rjmp	.+488    	; 0xe0a <udc_process_setup+0x3f6>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     c22:	00 e0       	ldi	r16, 0x00	; 0
     c24:	f2 c0       	rjmp	.+484    	; 0xe0a <udc_process_setup+0x3f6>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     c26:	2f 71       	andi	r18, 0x1F	; 31
     c28:	09 f0       	breq	.+2      	; 0xc2c <udc_process_setup+0x218>
     c2a:	90 c0       	rjmp	.+288    	; 0xd4c <udc_process_setup+0x338>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     c2c:	80 91 04 23 	lds	r24, 0x2304
     c30:	83 30       	cpi	r24, 0x03	; 3
     c32:	09 f4       	brne	.+2      	; 0xc36 <udc_process_setup+0x222>
     c34:	e7 c0       	rjmp	.+462    	; 0xe04 <udc_process_setup+0x3f0>
     c36:	18 f4       	brcc	.+6      	; 0xc3e <udc_process_setup+0x22a>
     c38:	81 30       	cpi	r24, 0x01	; 1
     c3a:	b1 f0       	breq	.+44     	; 0xc68 <udc_process_setup+0x254>
     c3c:	87 c0       	rjmp	.+270    	; 0xd4c <udc_process_setup+0x338>
     c3e:	85 30       	cpi	r24, 0x05	; 5
     c40:	19 f0       	breq	.+6      	; 0xc48 <udc_process_setup+0x234>
     c42:	89 30       	cpi	r24, 0x09	; 9
     c44:	61 f1       	breq	.+88     	; 0xc9e <udc_process_setup+0x28a>
     c46:	82 c0       	rjmp	.+260    	; 0xd4c <udc_process_setup+0x338>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     c48:	80 91 09 23 	lds	r24, 0x2309
     c4c:	90 91 0a 23 	lds	r25, 0x230A
     c50:	89 2b       	or	r24, r25
     c52:	41 f4       	brne	.+16     	; 0xc64 <udc_process_setup+0x250>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	94 e0       	ldi	r25, 0x04	; 4
     c58:	80 93 0f 23 	sts	0x230F, r24
     c5c:	90 93 10 23 	sts	0x2310, r25
	return true;
     c60:	01 e0       	ldi	r16, 0x01	; 1
     c62:	d3 c0       	rjmp	.+422    	; 0xe0a <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     c64:	00 e0       	ldi	r16, 0x00	; 0
     c66:	d1 c0       	rjmp	.+418    	; 0xe0a <udc_process_setup+0x3f6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     c68:	80 91 09 23 	lds	r24, 0x2309
     c6c:	90 91 0a 23 	lds	r25, 0x230A
     c70:	89 2b       	or	r24, r25
     c72:	89 f4       	brne	.+34     	; 0xc96 <udc_process_setup+0x282>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     c74:	80 91 05 23 	lds	r24, 0x2305
     c78:	90 91 06 23 	lds	r25, 0x2306
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	69 f4       	brne	.+26     	; 0xc9a <udc_process_setup+0x286>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     c80:	80 91 c7 21 	lds	r24, 0x21C7
     c84:	90 91 c8 21 	lds	r25, 0x21C8
     c88:	8d 7f       	andi	r24, 0xFD	; 253
     c8a:	80 93 c7 21 	sts	0x21C7, r24
     c8e:	90 93 c8 21 	sts	0x21C8, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     c92:	01 e0       	ldi	r16, 0x01	; 1
     c94:	ba c0       	rjmp	.+372    	; 0xe0a <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     c96:	00 e0       	ldi	r16, 0x00	; 0
     c98:	b8 c0       	rjmp	.+368    	; 0xe0a <udc_process_setup+0x3f6>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     c9a:	00 e0       	ldi	r16, 0x00	; 0
     c9c:	b6 c0       	rjmp	.+364    	; 0xe0a <udc_process_setup+0x3f6>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     c9e:	80 91 09 23 	lds	r24, 0x2309
     ca2:	90 91 0a 23 	lds	r25, 0x230A
     ca6:	89 2b       	or	r24, r25
     ca8:	09 f0       	breq	.+2      	; 0xcac <udc_process_setup+0x298>
     caa:	46 c0       	rjmp	.+140    	; 0xd38 <udc_process_setup+0x324>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     cac:	13 d6       	rcall	.+3110   	; 0x18d4 <udd_getaddress>
     cae:	88 23       	and	r24, r24
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <udc_process_setup+0x2a0>
     cb2:	44 c0       	rjmp	.+136    	; 0xd3c <udc_process_setup+0x328>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     cb4:	20 91 05 23 	lds	r18, 0x2305
     cb8:	30 91 06 23 	lds	r19, 0x2306
     cbc:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     cbe:	e0 91 14 20 	lds	r30, 0x2014
     cc2:	f0 91 15 20 	lds	r31, 0x2015
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     cc6:	81 89       	ldd	r24, Z+17	; 0x11
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	82 17       	cp	r24, r18
     ccc:	93 07       	cpc	r25, r19
     cce:	c0 f1       	brcs	.+112    	; 0xd40 <udc_process_setup+0x32c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     cd0:	4b de       	rcall	.-874    	; 0x968 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     cd2:	80 91 05 23 	lds	r24, 0x2305
     cd6:	90 91 06 23 	lds	r25, 0x2306
     cda:	80 93 c6 21 	sts	0x21C6, r24
	if (udc_num_configuration == 0) {
     cde:	88 23       	and	r24, r24
     ce0:	89 f1       	breq	.+98     	; 0xd44 <udc_process_setup+0x330>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     ce2:	99 27       	eor	r25, r25
     ce4:	81 50       	subi	r24, 0x01	; 1
     ce6:	90 4c       	sbci	r25, 0xC0	; 192
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	e0 91 16 20 	lds	r30, 0x2016
     cf4:	f0 91 17 20 	lds	r31, 0x2017
     cf8:	e8 0f       	add	r30, r24
     cfa:	f9 1f       	adc	r31, r25
     cfc:	e0 93 c4 21 	sts	0x21C4, r30
     d00:	f0 93 c5 21 	sts	0x21C5, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d04:	01 90       	ld	r0, Z+
     d06:	f0 81       	ld	r31, Z
     d08:	e0 2d       	mov	r30, r0
     d0a:	84 81       	ldd	r24, Z+4	; 0x04
     d0c:	88 23       	and	r24, r24
     d0e:	e1 f0       	breq	.+56     	; 0xd48 <udc_process_setup+0x334>
     d10:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	8c 2f       	mov	r24, r28
     d16:	f6 dd       	rcall	.-1044   	; 0x904 <udc_iface_enable>
     d18:	08 2f       	mov	r16, r24
     d1a:	88 23       	and	r24, r24
     d1c:	09 f4       	brne	.+2      	; 0xd20 <udc_process_setup+0x30c>
     d1e:	75 c0       	rjmp	.+234    	; 0xe0a <udc_process_setup+0x3f6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     d20:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d22:	e0 91 c4 21 	lds	r30, 0x21C4
     d26:	f0 91 c5 21 	lds	r31, 0x21C5
     d2a:	01 90       	ld	r0, Z+
     d2c:	f0 81       	ld	r31, Z
     d2e:	e0 2d       	mov	r30, r0
     d30:	84 81       	ldd	r24, Z+4	; 0x04
     d32:	c8 17       	cp	r28, r24
     d34:	70 f3       	brcs	.-36     	; 0xd12 <udc_process_setup+0x2fe>
     d36:	69 c0       	rjmp	.+210    	; 0xe0a <udc_process_setup+0x3f6>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     d38:	00 e0       	ldi	r16, 0x00	; 0
     d3a:	67 c0       	rjmp	.+206    	; 0xe0a <udc_process_setup+0x3f6>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     d3c:	00 e0       	ldi	r16, 0x00	; 0
     d3e:	65 c0       	rjmp	.+202    	; 0xe0a <udc_process_setup+0x3f6>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     d40:	00 e0       	ldi	r16, 0x00	; 0
     d42:	63 c0       	rjmp	.+198    	; 0xe0a <udc_process_setup+0x3f6>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     d44:	01 e0       	ldi	r16, 0x01	; 1
     d46:	61 c0       	rjmp	.+194    	; 0xe0a <udc_process_setup+0x3f6>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     d48:	01 e0       	ldi	r16, 0x01	; 1
     d4a:	5f c0       	rjmp	.+190    	; 0xe0a <udc_process_setup+0x3f6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     d4c:	21 30       	cpi	r18, 0x01	; 1
     d4e:	09 f5       	brne	.+66     	; 0xd92 <udc_process_setup+0x37e>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     d50:	80 91 04 23 	lds	r24, 0x2304
     d54:	8b 30       	cpi	r24, 0x0B	; 11
     d56:	e9 f4       	brne	.+58     	; 0xd92 <udc_process_setup+0x37e>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     d58:	80 91 09 23 	lds	r24, 0x2309
     d5c:	90 91 0a 23 	lds	r25, 0x230A
     d60:	89 2b       	or	r24, r25
     d62:	99 f4       	brne	.+38     	; 0xd8a <udc_process_setup+0x376>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     d64:	80 91 c6 21 	lds	r24, 0x21C6
     d68:	88 23       	and	r24, r24
     d6a:	89 f0       	breq	.+34     	; 0xd8e <udc_process_setup+0x37a>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     d6c:	c0 91 07 23 	lds	r28, 0x2307
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     d70:	d0 91 05 23 	lds	r29, 0x2305

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     d74:	8c 2f       	mov	r24, r28
     d76:	84 dd       	rcall	.-1272   	; 0x880 <udc_iface_disable>
     d78:	08 2f       	mov	r16, r24
     d7a:	88 23       	and	r24, r24
     d7c:	09 f4       	brne	.+2      	; 0xd80 <udc_process_setup+0x36c>
     d7e:	45 c0       	rjmp	.+138    	; 0xe0a <udc_process_setup+0x3f6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     d80:	6d 2f       	mov	r22, r29
     d82:	8c 2f       	mov	r24, r28
     d84:	bf dd       	rcall	.-1154   	; 0x904 <udc_iface_enable>
     d86:	08 2f       	mov	r16, r24
     d88:	40 c0       	rjmp	.+128    	; 0xe0a <udc_process_setup+0x3f6>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     d8a:	00 e0       	ldi	r16, 0x00	; 0
     d8c:	3e c0       	rjmp	.+124    	; 0xe0a <udc_process_setup+0x3f6>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     d8e:	00 e0       	ldi	r16, 0x00	; 0
     d90:	3c c0       	rjmp	.+120    	; 0xe0a <udc_process_setup+0x3f6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     d92:	22 30       	cpi	r18, 0x02	; 2
     d94:	09 f0       	breq	.+2      	; 0xd98 <udc_process_setup+0x384>
     d96:	3b c0       	rjmp	.+118    	; 0xe0e <udc_process_setup+0x3fa>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     d98:	80 91 04 23 	lds	r24, 0x2304
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	19 f0       	breq	.+6      	; 0xda6 <udc_process_setup+0x392>
     da0:	83 30       	cpi	r24, 0x03	; 3
     da2:	b1 f0       	breq	.+44     	; 0xdd0 <udc_process_setup+0x3bc>
     da4:	31 c0       	rjmp	.+98     	; 0xe08 <udc_process_setup+0x3f4>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     da6:	80 91 09 23 	lds	r24, 0x2309
     daa:	90 91 0a 23 	lds	r25, 0x230A
     dae:	89 2b       	or	r24, r25
     db0:	59 f4       	brne	.+22     	; 0xdc8 <udc_process_setup+0x3b4>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     db2:	80 91 05 23 	lds	r24, 0x2305
     db6:	90 91 06 23 	lds	r25, 0x2306
     dba:	89 2b       	or	r24, r25
     dbc:	39 f4       	brne	.+14     	; 0xdcc <udc_process_setup+0x3b8>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     dbe:	80 91 07 23 	lds	r24, 0x2307
     dc2:	18 d6       	rcall	.+3120   	; 0x19f4 <udd_ep_clear_halt>
     dc4:	08 2f       	mov	r16, r24
     dc6:	21 c0       	rjmp	.+66     	; 0xe0a <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     dc8:	00 e0       	ldi	r16, 0x00	; 0
     dca:	1f c0       	rjmp	.+62     	; 0xe0a <udc_process_setup+0x3f6>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     dcc:	00 e0       	ldi	r16, 0x00	; 0
     dce:	1d c0       	rjmp	.+58     	; 0xe0a <udc_process_setup+0x3f6>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     dd0:	80 91 09 23 	lds	r24, 0x2309
     dd4:	90 91 0a 23 	lds	r25, 0x230A
     dd8:	89 2b       	or	r24, r25
     dda:	71 f4       	brne	.+28     	; 0xdf8 <udc_process_setup+0x3e4>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     ddc:	80 91 05 23 	lds	r24, 0x2305
     de0:	90 91 06 23 	lds	r25, 0x2306
     de4:	89 2b       	or	r24, r25
     de6:	51 f4       	brne	.+20     	; 0xdfc <udc_process_setup+0x3e8>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     de8:	c7 e0       	ldi	r28, 0x07	; 7
     dea:	d3 e2       	ldi	r29, 0x23	; 35
     dec:	88 81       	ld	r24, Y
     dee:	b3 d6       	rcall	.+3430   	; 0x1b56 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     df0:	88 81       	ld	r24, Y
     df2:	07 d7       	rcall	.+3598   	; 0x1c02 <udd_ep_set_halt>
     df4:	08 2f       	mov	r16, r24
     df6:	09 c0       	rjmp	.+18     	; 0xe0a <udc_process_setup+0x3f6>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     df8:	00 e0       	ldi	r16, 0x00	; 0
     dfa:	07 c0       	rjmp	.+14     	; 0xe0a <udc_process_setup+0x3f6>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     dfc:	00 e0       	ldi	r16, 0x00	; 0
     dfe:	05 c0       	rjmp	.+10     	; 0xe0a <udc_process_setup+0x3f6>
				break;
			}
		}
#endif
	}
	return false;
     e00:	00 e0       	ldi	r16, 0x00	; 0
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <udc_process_setup+0x3f6>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     e04:	00 e0       	ldi	r16, 0x00	; 0
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <udc_process_setup+0x3f6>
				break;
			}
		}
#endif
	}
	return false;
     e08:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     e0a:	01 11       	cpse	r16, r1
     e0c:	89 c0       	rjmp	.+274    	; 0xf20 <udc_process_setup+0x50c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     e0e:	80 91 03 23 	lds	r24, 0x2303
     e12:	8f 71       	andi	r24, 0x1F	; 31
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	c1 f5       	brne	.+112    	; 0xe88 <udc_process_setup+0x474>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     e18:	80 91 c6 21 	lds	r24, 0x21C6
     e1c:	88 23       	and	r24, r24
     e1e:	a1 f1       	breq	.+104    	; 0xe88 <udc_process_setup+0x474>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     e20:	c0 91 07 23 	lds	r28, 0x2307
     e24:	d0 91 08 23 	lds	r29, 0x2308
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     e28:	00 91 c4 21 	lds	r16, 0x21C4
     e2c:	10 91 c5 21 	lds	r17, 0x21C5
     e30:	d8 01       	movw	r26, r16
     e32:	ed 91       	ld	r30, X+
     e34:	fc 91       	ld	r31, X
     e36:	84 81       	ldd	r24, Z+4	; 0x04
     e38:	c8 17       	cp	r28, r24
     e3a:	30 f5       	brcc	.+76     	; 0xe88 <udc_process_setup+0x474>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	8c 2f       	mov	r24, r28
     e40:	e5 dc       	rcall	.-1590   	; 0x80c <udc_update_iface_desc>
     e42:	88 23       	and	r24, r24
     e44:	09 f1       	breq	.+66     	; 0xe88 <udc_process_setup+0x474>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     e46:	ce 01       	movw	r24, r28
     e48:	99 27       	eor	r25, r25
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	d8 01       	movw	r26, r16
     e50:	12 96       	adiw	r26, 0x02	; 2
     e52:	ed 91       	ld	r30, X+
     e54:	fc 91       	ld	r31, X
     e56:	13 97       	sbiw	r26, 0x03	; 3
     e58:	e8 0f       	add	r30, r24
     e5a:	f9 1f       	adc	r31, r25
     e5c:	00 81       	ld	r16, Z
     e5e:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     e60:	d8 01       	movw	r26, r16
     e62:	16 96       	adiw	r26, 0x06	; 6
     e64:	ed 91       	ld	r30, X+
     e66:	fc 91       	ld	r31, X
     e68:	17 97       	sbiw	r26, 0x07	; 7
     e6a:	09 95       	icall
     e6c:	68 2f       	mov	r22, r24
     e6e:	8c 2f       	mov	r24, r28
     e70:	cd dc       	rcall	.-1638   	; 0x80c <udc_update_iface_desc>
     e72:	88 23       	and	r24, r24
     e74:	49 f0       	breq	.+18     	; 0xe88 <udc_process_setup+0x474>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     e76:	d8 01       	movw	r26, r16
     e78:	14 96       	adiw	r26, 0x04	; 4
     e7a:	ed 91       	ld	r30, X+
     e7c:	fc 91       	ld	r31, X
     e7e:	15 97       	sbiw	r26, 0x05	; 5
     e80:	09 95       	icall
     e82:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     e84:	81 11       	cpse	r24, r1
     e86:	4c c0       	rjmp	.+152    	; 0xf20 <udc_process_setup+0x50c>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     e88:	80 91 03 23 	lds	r24, 0x2303
     e8c:	8f 71       	andi	r24, 0x1F	; 31
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	d9 f5       	brne	.+118    	; 0xf08 <udc_process_setup+0x4f4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     e92:	80 91 c6 21 	lds	r24, 0x21C6
     e96:	88 23       	and	r24, r24
     e98:	89 f1       	breq	.+98     	; 0xefc <udc_process_setup+0x4e8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e9a:	e0 91 c4 21 	lds	r30, 0x21C4
     e9e:	f0 91 c5 21 	lds	r31, 0x21C5
     ea2:	a0 81       	ld	r26, Z
     ea4:	b1 81       	ldd	r27, Z+1	; 0x01
     ea6:	14 96       	adiw	r26, 0x04	; 4
     ea8:	8c 91       	ld	r24, X
     eaa:	88 23       	and	r24, r24
     eac:	49 f1       	breq	.+82     	; 0xf00 <udc_process_setup+0x4ec>
     eae:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     eb0:	21 2f       	mov	r18, r17
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	22 0f       	add	r18, r18
     eb6:	33 1f       	adc	r19, r19
     eb8:	02 80       	ldd	r0, Z+2	; 0x02
     eba:	f3 81       	ldd	r31, Z+3	; 0x03
     ebc:	e0 2d       	mov	r30, r0
     ebe:	e2 0f       	add	r30, r18
     ec0:	f3 1f       	adc	r31, r19
     ec2:	c0 81       	ld	r28, Z
     ec4:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     ec6:	ee 81       	ldd	r30, Y+6	; 0x06
     ec8:	ff 81       	ldd	r31, Y+7	; 0x07
     eca:	09 95       	icall
     ecc:	68 2f       	mov	r22, r24
     ece:	81 2f       	mov	r24, r17
     ed0:	9d dc       	rcall	.-1734   	; 0x80c <udc_update_iface_desc>
     ed2:	08 2f       	mov	r16, r24
     ed4:	88 23       	and	r24, r24
     ed6:	21 f1       	breq	.+72     	; 0xf20 <udc_process_setup+0x50c>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     ed8:	ec 81       	ldd	r30, Y+4	; 0x04
     eda:	fd 81       	ldd	r31, Y+5	; 0x05
     edc:	09 95       	icall
     ede:	08 2f       	mov	r16, r24
     ee0:	81 11       	cpse	r24, r1
     ee2:	1e c0       	rjmp	.+60     	; 0xf20 <udc_process_setup+0x50c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     ee4:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ee6:	e0 91 c4 21 	lds	r30, 0x21C4
     eea:	f0 91 c5 21 	lds	r31, 0x21C5
     eee:	a0 81       	ld	r26, Z
     ef0:	b1 81       	ldd	r27, Z+1	; 0x01
     ef2:	14 96       	adiw	r26, 0x04	; 4
     ef4:	8c 91       	ld	r24, X
     ef6:	18 17       	cp	r17, r24
     ef8:	d8 f2       	brcs	.-74     	; 0xeb0 <udc_process_setup+0x49c>
     efa:	12 c0       	rjmp	.+36     	; 0xf20 <udc_process_setup+0x50c>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     efc:	00 e0       	ldi	r16, 0x00	; 0
     efe:	10 c0       	rjmp	.+32     	; 0xf20 <udc_process_setup+0x50c>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     f00:	00 e0       	ldi	r16, 0x00	; 0
     f02:	0e c0       	rjmp	.+28     	; 0xf20 <udc_process_setup+0x50c>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
     f04:	00 e0       	ldi	r16, 0x00	; 0
     f06:	0c c0       	rjmp	.+24     	; 0xf20 <udc_process_setup+0x50c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     f08:	00 e0       	ldi	r16, 0x00	; 0
     f0a:	0a c0       	rjmp	.+20     	; 0xf20 <udc_process_setup+0x50c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     f0c:	82 2f       	mov	r24, r18
     f0e:	80 76       	andi	r24, 0x60	; 96
     f10:	09 f0       	breq	.+2      	; 0xf14 <udc_process_setup+0x500>
     f12:	7d cf       	rjmp	.-262    	; 0xe0e <udc_process_setup+0x3fa>
     f14:	88 ce       	rjmp	.-752    	; 0xc26 <udc_process_setup+0x212>
     f16:	32 2f       	mov	r19, r18
     f18:	30 76       	andi	r19, 0x60	; 96
     f1a:	09 f0       	breq	.+2      	; 0xf1e <udc_process_setup+0x50a>
     f1c:	78 cf       	rjmp	.-272    	; 0xe0e <udc_process_setup+0x3fa>
     f1e:	99 cd       	rjmp	.-1230   	; 0xa52 <udc_process_setup+0x3e>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     f20:	80 2f       	mov	r24, r16
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	08 95       	ret

00000f30 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     f30:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     f32:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     f34:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     f36:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     f38:	60 83       	st	Z, r22
	ret                             // Return to caller
     f3a:	08 95       	ret

00000f3c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     f3c:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
     f40:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     f42:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     f44:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
     f48:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     f4a:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     f4e:	08 95       	ret

00000f50 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     f50:	1f 92       	push	r1
     f52:	0f 92       	push	r0
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	0f 92       	push	r0
     f58:	11 24       	eor	r1, r1
     f5a:	8f 93       	push	r24
     f5c:	9f 93       	push	r25
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31
	rtc_data.counter_high++;
     f62:	eb ef       	ldi	r30, 0xFB	; 251
     f64:	f2 e2       	ldi	r31, 0x22	; 34
     f66:	80 81       	ld	r24, Z
     f68:	91 81       	ldd	r25, Z+1	; 0x01
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	80 83       	st	Z, r24
     f6e:	91 83       	std	Z+1, r25	; 0x01
}
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     f82:	fc 01       	movw	r30, r24
     f84:	81 81       	ldd	r24, Z+1	; 0x01
     f86:	85 ff       	sbrs	r24, 5
     f88:	fd cf       	rjmp	.-6      	; 0xf84 <usart_putchar+0x2>
     f8a:	60 83       	st	Z, r22
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	08 95       	ret

00000f92 <usart_getchar>:
     f92:	fc 01       	movw	r30, r24
     f94:	81 81       	ldd	r24, Z+1	; 0x01
     f96:	88 23       	and	r24, r24
     f98:	ec f7       	brge	.-6      	; 0xf94 <usart_getchar+0x2>
     f9a:	80 81       	ld	r24, Z
     f9c:	08 95       	ret

00000f9e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     f9e:	4f 92       	push	r4
     fa0:	5f 92       	push	r5
     fa2:	6f 92       	push	r6
     fa4:	7f 92       	push	r7
     fa6:	8f 92       	push	r8
     fa8:	9f 92       	push	r9
     faa:	af 92       	push	r10
     fac:	bf 92       	push	r11
     fae:	cf 92       	push	r12
     fb0:	df 92       	push	r13
     fb2:	ef 92       	push	r14
     fb4:	ff 92       	push	r15
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	ec 01       	movw	r28, r24
     fc0:	4a 01       	movw	r8, r20
     fc2:	5b 01       	movw	r10, r22
     fc4:	28 01       	movw	r4, r16
     fc6:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     fc8:	d9 01       	movw	r26, r18
     fca:	c8 01       	movw	r24, r16
     fcc:	68 94       	set
     fce:	12 f8       	bld	r1, 2
     fd0:	b6 95       	lsr	r27
     fd2:	a7 95       	ror	r26
     fd4:	97 95       	ror	r25
     fd6:	87 95       	ror	r24
     fd8:	16 94       	lsr	r1
     fda:	d1 f7       	brne	.-12     	; 0xfd0 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     fdc:	b9 01       	movw	r22, r18
     fde:	a8 01       	movw	r20, r16
     fe0:	03 2e       	mov	r0, r19
     fe2:	36 e1       	ldi	r19, 0x16	; 22
     fe4:	76 95       	lsr	r23
     fe6:	67 95       	ror	r22
     fe8:	57 95       	ror	r21
     fea:	47 95       	ror	r20
     fec:	3a 95       	dec	r19
     fee:	d1 f7       	brne	.-12     	; 0xfe4 <usart_set_baudrate+0x46>
     ff0:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     ff2:	2c 81       	ldd	r18, Y+4	; 0x04
     ff4:	22 fd       	sbrc	r18, 2
     ff6:	08 c0       	rjmp	.+16     	; 0x1008 <usart_set_baudrate+0x6a>
		max_rate /= 2;
     ff8:	b6 95       	lsr	r27
     ffa:	a7 95       	ror	r26
     ffc:	97 95       	ror	r25
     ffe:	87 95       	ror	r24
		min_rate /= 2;
    1000:	76 95       	lsr	r23
    1002:	67 95       	ror	r22
    1004:	57 95       	ror	r21
    1006:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1008:	88 15       	cp	r24, r8
    100a:	99 05       	cpc	r25, r9
    100c:	aa 05       	cpc	r26, r10
    100e:	bb 05       	cpc	r27, r11
    1010:	08 f4       	brcc	.+2      	; 0x1014 <usart_set_baudrate+0x76>
    1012:	a6 c0       	rjmp	.+332    	; 0x1160 <usart_set_baudrate+0x1c2>
    1014:	84 16       	cp	r8, r20
    1016:	95 06       	cpc	r9, r21
    1018:	a6 06       	cpc	r10, r22
    101a:	b7 06       	cpc	r11, r23
    101c:	08 f4       	brcc	.+2      	; 0x1020 <usart_set_baudrate+0x82>
    101e:	a2 c0       	rjmp	.+324    	; 0x1164 <usart_set_baudrate+0x1c6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1020:	8c 81       	ldd	r24, Y+4	; 0x04
    1022:	82 fd       	sbrc	r24, 2
    1024:	04 c0       	rjmp	.+8      	; 0x102e <usart_set_baudrate+0x90>
		baud *= 2;
    1026:	88 0c       	add	r8, r8
    1028:	99 1c       	adc	r9, r9
    102a:	aa 1c       	adc	r10, r10
    102c:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    102e:	c3 01       	movw	r24, r6
    1030:	b2 01       	movw	r22, r4
    1032:	a5 01       	movw	r20, r10
    1034:	94 01       	movw	r18, r8
    1036:	0e 94 b2 14 	call	0x2964	; 0x2964 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    103a:	2f 3f       	cpi	r18, 0xFF	; 255
    103c:	31 05       	cpc	r19, r1
    103e:	41 05       	cpc	r20, r1
    1040:	51 05       	cpc	r21, r1
    1042:	08 f4       	brcc	.+2      	; 0x1046 <usart_set_baudrate+0xa8>
    1044:	91 c0       	rjmp	.+290    	; 0x1168 <usart_set_baudrate+0x1ca>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    1046:	c1 2c       	mov	r12, r1
    1048:	d1 2c       	mov	r13, r1
    104a:	76 01       	movw	r14, r12
    104c:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    104e:	19 ef       	ldi	r17, 0xF9	; 249
    1050:	05 c0       	rjmp	.+10     	; 0x105c <usart_set_baudrate+0xbe>
		if (ratio < limit) {
    1052:	2c 15       	cp	r18, r12
    1054:	3d 05       	cpc	r19, r13
    1056:	4e 05       	cpc	r20, r14
    1058:	5f 05       	cpc	r21, r15
    105a:	68 f0       	brcs	.+26     	; 0x1076 <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
    105c:	cc 0c       	add	r12, r12
    105e:	dd 1c       	adc	r13, r13
    1060:	ee 1c       	adc	r14, r14
    1062:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    1064:	1d 3f       	cpi	r17, 0xFD	; 253
    1066:	14 f4       	brge	.+4      	; 0x106c <usart_set_baudrate+0xce>
			limit |= 1;
    1068:	68 94       	set
    106a:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    106c:	1f 5f       	subi	r17, 0xFF	; 255
    106e:	17 30       	cpi	r17, 0x07	; 7
    1070:	81 f7       	brne	.-32     	; 0x1052 <usart_set_baudrate+0xb4>
    1072:	21 2f       	mov	r18, r17
    1074:	50 c0       	rjmp	.+160    	; 0x1116 <usart_set_baudrate+0x178>
    1076:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1078:	11 23       	and	r17, r17
    107a:	0c f0       	brlt	.+2      	; 0x107e <usart_set_baudrate+0xe0>
    107c:	4c c0       	rjmp	.+152    	; 0x1116 <usart_set_baudrate+0x178>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    107e:	d5 01       	movw	r26, r10
    1080:	c4 01       	movw	r24, r8
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	aa 1f       	adc	r26, r26
    1088:	bb 1f       	adc	r27, r27
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	aa 1f       	adc	r26, r26
    1090:	bb 1f       	adc	r27, r27
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	aa 1f       	adc	r26, r26
    1098:	bb 1f       	adc	r27, r27
    109a:	48 1a       	sub	r4, r24
    109c:	59 0a       	sbc	r5, r25
    109e:	6a 0a       	sbc	r6, r26
    10a0:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    10a2:	1e 3f       	cpi	r17, 0xFE	; 254
    10a4:	f4 f4       	brge	.+60     	; 0x10e2 <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    10a6:	6d ef       	ldi	r22, 0xFD	; 253
    10a8:	7f ef       	ldi	r23, 0xFF	; 255
    10aa:	61 1b       	sub	r22, r17
    10ac:	71 09       	sbc	r23, r1
    10ae:	17 fd       	sbrc	r17, 7
    10b0:	73 95       	inc	r23
    10b2:	04 c0       	rjmp	.+8      	; 0x10bc <usart_set_baudrate+0x11e>
    10b4:	44 0c       	add	r4, r4
    10b6:	55 1c       	adc	r5, r5
    10b8:	66 1c       	adc	r6, r6
    10ba:	77 1c       	adc	r7, r7
    10bc:	6a 95       	dec	r22
    10be:	d2 f7       	brpl	.-12     	; 0x10b4 <usart_set_baudrate+0x116>
    10c0:	d5 01       	movw	r26, r10
    10c2:	c4 01       	movw	r24, r8
    10c4:	b6 95       	lsr	r27
    10c6:	a7 95       	ror	r26
    10c8:	97 95       	ror	r25
    10ca:	87 95       	ror	r24
    10cc:	bc 01       	movw	r22, r24
    10ce:	cd 01       	movw	r24, r26
    10d0:	64 0d       	add	r22, r4
    10d2:	75 1d       	adc	r23, r5
    10d4:	86 1d       	adc	r24, r6
    10d6:	97 1d       	adc	r25, r7
    10d8:	a5 01       	movw	r20, r10
    10da:	94 01       	movw	r18, r8
    10dc:	0e 94 b2 14 	call	0x2964	; 0x2964 <__udivmodsi4>
    10e0:	36 c0       	rjmp	.+108    	; 0x114e <usart_set_baudrate+0x1b0>
		} else {
			baud <<= exp + 3;
    10e2:	23 e0       	ldi	r18, 0x03	; 3
    10e4:	21 0f       	add	r18, r17
    10e6:	d5 01       	movw	r26, r10
    10e8:	c4 01       	movw	r24, r8
    10ea:	04 c0       	rjmp	.+8      	; 0x10f4 <usart_set_baudrate+0x156>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	aa 1f       	adc	r26, r26
    10f2:	bb 1f       	adc	r27, r27
    10f4:	2a 95       	dec	r18
    10f6:	d2 f7       	brpl	.-12     	; 0x10ec <usart_set_baudrate+0x14e>
    10f8:	9c 01       	movw	r18, r24
    10fa:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    10fc:	b6 95       	lsr	r27
    10fe:	a7 95       	ror	r26
    1100:	97 95       	ror	r25
    1102:	87 95       	ror	r24
    1104:	bc 01       	movw	r22, r24
    1106:	cd 01       	movw	r24, r26
    1108:	64 0d       	add	r22, r4
    110a:	75 1d       	adc	r23, r5
    110c:	86 1d       	adc	r24, r6
    110e:	97 1d       	adc	r25, r7
    1110:	0e 94 b2 14 	call	0x2964	; 0x2964 <__udivmodsi4>
    1114:	1c c0       	rjmp	.+56     	; 0x114e <usart_set_baudrate+0x1b0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1116:	2d 5f       	subi	r18, 0xFD	; 253
    1118:	d5 01       	movw	r26, r10
    111a:	c4 01       	movw	r24, r8
    111c:	04 c0       	rjmp	.+8      	; 0x1126 <usart_set_baudrate+0x188>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	aa 1f       	adc	r26, r26
    1124:	bb 1f       	adc	r27, r27
    1126:	2a 95       	dec	r18
    1128:	d2 f7       	brpl	.-12     	; 0x111e <usart_set_baudrate+0x180>
    112a:	9c 01       	movw	r18, r24
    112c:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    112e:	b6 95       	lsr	r27
    1130:	a7 95       	ror	r26
    1132:	97 95       	ror	r25
    1134:	87 95       	ror	r24
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	64 0d       	add	r22, r4
    113c:	75 1d       	adc	r23, r5
    113e:	86 1d       	adc	r24, r6
    1140:	97 1d       	adc	r25, r7
    1142:	0e 94 b2 14 	call	0x2964	; 0x2964 <__udivmodsi4>
    1146:	21 50       	subi	r18, 0x01	; 1
    1148:	31 09       	sbc	r19, r1
    114a:	41 09       	sbc	r20, r1
    114c:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    114e:	83 2f       	mov	r24, r19
    1150:	8f 70       	andi	r24, 0x0F	; 15
    1152:	12 95       	swap	r17
    1154:	10 7f       	andi	r17, 0xF0	; 240
    1156:	18 2b       	or	r17, r24
    1158:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    115a:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	18 c0       	rjmp	.+48     	; 0x1190 <usart_set_baudrate+0x1f2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	16 c0       	rjmp	.+44     	; 0x1190 <usart_set_baudrate+0x1f2>
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	14 c0       	rjmp	.+40     	; 0x1190 <usart_set_baudrate+0x1f2>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1168:	d5 01       	movw	r26, r10
    116a:	c4 01       	movw	r24, r8
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	aa 1f       	adc	r26, r26
    1172:	bb 1f       	adc	r27, r27
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	aa 1f       	adc	r26, r26
    117a:	bb 1f       	adc	r27, r27
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	aa 1f       	adc	r26, r26
    1182:	bb 1f       	adc	r27, r27
    1184:	48 1a       	sub	r4, r24
    1186:	59 0a       	sbc	r5, r25
    1188:	6a 0a       	sbc	r6, r26
    118a:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    118c:	19 ef       	ldi	r17, 0xF9	; 249
    118e:	8b cf       	rjmp	.-234    	; 0x10a6 <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	ef 90       	pop	r14
    119c:	df 90       	pop	r13
    119e:	cf 90       	pop	r12
    11a0:	bf 90       	pop	r11
    11a2:	af 90       	pop	r10
    11a4:	9f 90       	pop	r9
    11a6:	8f 90       	pop	r8
    11a8:	7f 90       	pop	r7
    11aa:	6f 90       	pop	r6
    11ac:	5f 90       	pop	r5
    11ae:	4f 90       	pop	r4
    11b0:	08 95       	ret

000011b2 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	ec 01       	movw	r28, r24
    11bc:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <usart_init_rs232+0x12>
    11c2:	bf c0       	rjmp	.+382    	; 0x1342 <usart_init_rs232+0x190>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    11c4:	80 3c       	cpi	r24, 0xC0	; 192
    11c6:	91 05       	cpc	r25, r1
    11c8:	21 f4       	brne	.+8      	; 0x11d2 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    11ca:	60 e1       	ldi	r22, 0x10	; 16
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	b0 d8       	rcall	.-3744   	; 0x330 <sysclk_enable_module>
    11d0:	b8 c0       	rjmp	.+368    	; 0x1342 <usart_init_rs232+0x190>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    11d2:	c1 15       	cp	r28, r1
    11d4:	84 e0       	ldi	r24, 0x04	; 4
    11d6:	d8 07       	cpc	r29, r24
    11d8:	21 f4       	brne	.+8      	; 0x11e2 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    11da:	64 e0       	ldi	r22, 0x04	; 4
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	a8 d8       	rcall	.-3760   	; 0x330 <sysclk_enable_module>
    11e0:	b0 c0       	rjmp	.+352    	; 0x1342 <usart_init_rs232+0x190>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    11e2:	c0 38       	cpi	r28, 0x80	; 128
    11e4:	e1 e0       	ldi	r30, 0x01	; 1
    11e6:	de 07       	cpc	r29, r30
    11e8:	21 f4       	brne	.+8      	; 0x11f2 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    11ea:	62 e0       	ldi	r22, 0x02	; 2
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	a0 d8       	rcall	.-3776   	; 0x330 <sysclk_enable_module>
    11f0:	a8 c0       	rjmp	.+336    	; 0x1342 <usart_init_rs232+0x190>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    11f2:	c1 15       	cp	r28, r1
    11f4:	f1 e0       	ldi	r31, 0x01	; 1
    11f6:	df 07       	cpc	r29, r31
    11f8:	21 f4       	brne	.+8      	; 0x1202 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	98 d8       	rcall	.-3792   	; 0x330 <sysclk_enable_module>
    1200:	a0 c0       	rjmp	.+320    	; 0x1342 <usart_init_rs232+0x190>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1202:	c0 38       	cpi	r28, 0x80	; 128
    1204:	83 e0       	ldi	r24, 0x03	; 3
    1206:	d8 07       	cpc	r29, r24
    1208:	21 f4       	brne	.+8      	; 0x1212 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 d8       	rcall	.-3808   	; 0x330 <sysclk_enable_module>
    1210:	98 c0       	rjmp	.+304    	; 0x1342 <usart_init_rs232+0x190>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1212:	c1 15       	cp	r28, r1
    1214:	e2 e0       	ldi	r30, 0x02	; 2
    1216:	de 07       	cpc	r29, r30
    1218:	21 f4       	brne	.+8      	; 0x1222 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    121a:	62 e0       	ldi	r22, 0x02	; 2
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	88 d8       	rcall	.-3824   	; 0x330 <sysclk_enable_module>
    1220:	90 c0       	rjmp	.+288    	; 0x1342 <usart_init_rs232+0x190>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1222:	c0 32       	cpi	r28, 0x20	; 32
    1224:	f3 e0       	ldi	r31, 0x03	; 3
    1226:	df 07       	cpc	r29, r31
    1228:	21 f4       	brne	.+8      	; 0x1232 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    122a:	64 e0       	ldi	r22, 0x04	; 4
    122c:	82 e0       	ldi	r24, 0x02	; 2
    122e:	80 d8       	rcall	.-3840   	; 0x330 <sysclk_enable_module>
    1230:	88 c0       	rjmp	.+272    	; 0x1342 <usart_init_rs232+0x190>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1232:	c1 15       	cp	r28, r1
    1234:	88 e0       	ldi	r24, 0x08	; 8
    1236:	d8 07       	cpc	r29, r24
    1238:	21 f4       	brne	.+8      	; 0x1242 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	83 e0       	ldi	r24, 0x03	; 3
    123e:	78 d8       	rcall	.-3856   	; 0x330 <sysclk_enable_module>
    1240:	80 c0       	rjmp	.+256    	; 0x1342 <usart_init_rs232+0x190>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1242:	c1 15       	cp	r28, r1
    1244:	e9 e0       	ldi	r30, 0x09	; 9
    1246:	de 07       	cpc	r29, r30
    1248:	21 f4       	brne	.+8      	; 0x1252 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	84 e0       	ldi	r24, 0x04	; 4
    124e:	70 d8       	rcall	.-3872   	; 0x330 <sysclk_enable_module>
    1250:	78 c0       	rjmp	.+240    	; 0x1342 <usart_init_rs232+0x190>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1252:	c1 15       	cp	r28, r1
    1254:	fa e0       	ldi	r31, 0x0A	; 10
    1256:	df 07       	cpc	r29, r31
    1258:	21 f4       	brne	.+8      	; 0x1262 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    125a:	61 e0       	ldi	r22, 0x01	; 1
    125c:	85 e0       	ldi	r24, 0x05	; 5
    125e:	68 d8       	rcall	.-3888   	; 0x330 <sysclk_enable_module>
    1260:	70 c0       	rjmp	.+224    	; 0x1342 <usart_init_rs232+0x190>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1262:	c0 34       	cpi	r28, 0x40	; 64
    1264:	88 e0       	ldi	r24, 0x08	; 8
    1266:	d8 07       	cpc	r29, r24
    1268:	21 f4       	brne	.+8      	; 0x1272 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    126a:	62 e0       	ldi	r22, 0x02	; 2
    126c:	83 e0       	ldi	r24, 0x03	; 3
    126e:	60 d8       	rcall	.-3904   	; 0x330 <sysclk_enable_module>
    1270:	68 c0       	rjmp	.+208    	; 0x1342 <usart_init_rs232+0x190>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1272:	c0 34       	cpi	r28, 0x40	; 64
    1274:	e9 e0       	ldi	r30, 0x09	; 9
    1276:	de 07       	cpc	r29, r30
    1278:	21 f4       	brne	.+8      	; 0x1282 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    127a:	62 e0       	ldi	r22, 0x02	; 2
    127c:	84 e0       	ldi	r24, 0x04	; 4
    127e:	58 d8       	rcall	.-3920   	; 0x330 <sysclk_enable_module>
    1280:	60 c0       	rjmp	.+192    	; 0x1342 <usart_init_rs232+0x190>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1282:	c0 39       	cpi	r28, 0x90	; 144
    1284:	f8 e0       	ldi	r31, 0x08	; 8
    1286:	df 07       	cpc	r29, r31
    1288:	21 f4       	brne	.+8      	; 0x1292 <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    128a:	64 e0       	ldi	r22, 0x04	; 4
    128c:	83 e0       	ldi	r24, 0x03	; 3
    128e:	50 d8       	rcall	.-3936   	; 0x330 <sysclk_enable_module>
    1290:	58 c0       	rjmp	.+176    	; 0x1342 <usart_init_rs232+0x190>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1292:	c0 39       	cpi	r28, 0x90	; 144
    1294:	89 e0       	ldi	r24, 0x09	; 9
    1296:	d8 07       	cpc	r29, r24
    1298:	21 f4       	brne	.+8      	; 0x12a2 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    129a:	64 e0       	ldi	r22, 0x04	; 4
    129c:	84 e0       	ldi	r24, 0x04	; 4
    129e:	48 d8       	rcall	.-3952   	; 0x330 <sysclk_enable_module>
    12a0:	50 c0       	rjmp	.+160    	; 0x1342 <usart_init_rs232+0x190>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    12a2:	c0 39       	cpi	r28, 0x90	; 144
    12a4:	ea e0       	ldi	r30, 0x0A	; 10
    12a6:	de 07       	cpc	r29, r30
    12a8:	21 f4       	brne	.+8      	; 0x12b2 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    12aa:	64 e0       	ldi	r22, 0x04	; 4
    12ac:	85 e0       	ldi	r24, 0x05	; 5
    12ae:	40 d8       	rcall	.-3968   	; 0x330 <sysclk_enable_module>
    12b0:	48 c0       	rjmp	.+144    	; 0x1342 <usart_init_rs232+0x190>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    12b2:	c0 3c       	cpi	r28, 0xC0	; 192
    12b4:	f8 e0       	ldi	r31, 0x08	; 8
    12b6:	df 07       	cpc	r29, r31
    12b8:	21 f4       	brne	.+8      	; 0x12c2 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    12ba:	68 e0       	ldi	r22, 0x08	; 8
    12bc:	83 e0       	ldi	r24, 0x03	; 3
    12be:	38 d8       	rcall	.-3984   	; 0x330 <sysclk_enable_module>
    12c0:	40 c0       	rjmp	.+128    	; 0x1342 <usart_init_rs232+0x190>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    12c2:	c0 3c       	cpi	r28, 0xC0	; 192
    12c4:	89 e0       	ldi	r24, 0x09	; 9
    12c6:	d8 07       	cpc	r29, r24
    12c8:	21 f4       	brne	.+8      	; 0x12d2 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    12ca:	68 e0       	ldi	r22, 0x08	; 8
    12cc:	84 e0       	ldi	r24, 0x04	; 4
    12ce:	30 d8       	rcall	.-4000   	; 0x330 <sysclk_enable_module>
    12d0:	38 c0       	rjmp	.+112    	; 0x1342 <usart_init_rs232+0x190>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    12d2:	c0 3a       	cpi	r28, 0xA0	; 160
    12d4:	e8 e0       	ldi	r30, 0x08	; 8
    12d6:	de 07       	cpc	r29, r30
    12d8:	21 f4       	brne	.+8      	; 0x12e2 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    12da:	60 e1       	ldi	r22, 0x10	; 16
    12dc:	83 e0       	ldi	r24, 0x03	; 3
    12de:	28 d8       	rcall	.-4016   	; 0x330 <sysclk_enable_module>
    12e0:	30 c0       	rjmp	.+96     	; 0x1342 <usart_init_rs232+0x190>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    12e2:	c0 3a       	cpi	r28, 0xA0	; 160
    12e4:	f9 e0       	ldi	r31, 0x09	; 9
    12e6:	df 07       	cpc	r29, r31
    12e8:	21 f4       	brne	.+8      	; 0x12f2 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    12ea:	60 e1       	ldi	r22, 0x10	; 16
    12ec:	84 e0       	ldi	r24, 0x04	; 4
    12ee:	20 d8       	rcall	.-4032   	; 0x330 <sysclk_enable_module>
    12f0:	28 c0       	rjmp	.+80     	; 0x1342 <usart_init_rs232+0x190>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    12f2:	c0 3a       	cpi	r28, 0xA0	; 160
    12f4:	8a e0       	ldi	r24, 0x0A	; 10
    12f6:	d8 07       	cpc	r29, r24
    12f8:	21 f4       	brne	.+8      	; 0x1302 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    12fa:	60 e1       	ldi	r22, 0x10	; 16
    12fc:	85 e0       	ldi	r24, 0x05	; 5
    12fe:	18 d8       	rcall	.-4048   	; 0x330 <sysclk_enable_module>
    1300:	20 c0       	rjmp	.+64     	; 0x1342 <usart_init_rs232+0x190>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1302:	c0 3b       	cpi	r28, 0xB0	; 176
    1304:	e8 e0       	ldi	r30, 0x08	; 8
    1306:	de 07       	cpc	r29, r30
    1308:	21 f4       	brne	.+8      	; 0x1312 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    130a:	60 e2       	ldi	r22, 0x20	; 32
    130c:	83 e0       	ldi	r24, 0x03	; 3
    130e:	10 d8       	rcall	.-4064   	; 0x330 <sysclk_enable_module>
    1310:	18 c0       	rjmp	.+48     	; 0x1342 <usart_init_rs232+0x190>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1312:	c0 3b       	cpi	r28, 0xB0	; 176
    1314:	f9 e0       	ldi	r31, 0x09	; 9
    1316:	df 07       	cpc	r29, r31
    1318:	21 f4       	brne	.+8      	; 0x1322 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    131a:	60 e2       	ldi	r22, 0x20	; 32
    131c:	84 e0       	ldi	r24, 0x04	; 4
    131e:	08 d8       	rcall	.-4080   	; 0x330 <sysclk_enable_module>
    1320:	10 c0       	rjmp	.+32     	; 0x1342 <usart_init_rs232+0x190>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1322:	c0 38       	cpi	r28, 0x80	; 128
    1324:	84 e0       	ldi	r24, 0x04	; 4
    1326:	d8 07       	cpc	r29, r24
    1328:	21 f4       	brne	.+8      	; 0x1332 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    132a:	60 e4       	ldi	r22, 0x40	; 64
    132c:	83 e0       	ldi	r24, 0x03	; 3
    132e:	00 d8       	rcall	.-4096   	; 0x330 <sysclk_enable_module>
    1330:	08 c0       	rjmp	.+16     	; 0x1342 <usart_init_rs232+0x190>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1332:	c0 3a       	cpi	r28, 0xA0	; 160
    1334:	e4 e0       	ldi	r30, 0x04	; 4
    1336:	de 07       	cpc	r29, r30
    1338:	21 f4       	brne	.+8      	; 0x1342 <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    133a:	60 e4       	ldi	r22, 0x40	; 64
    133c:	85 e0       	ldi	r24, 0x05	; 5
    133e:	0e 94 98 01 	call	0x330	; 0x330 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
    1344:	8f 73       	andi	r24, 0x3F	; 63
    1346:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1348:	f8 01       	movw	r30, r16
    134a:	94 81       	ldd	r25, Z+4	; 0x04
    134c:	85 81       	ldd	r24, Z+5	; 0x05
    134e:	89 2b       	or	r24, r25
    1350:	96 81       	ldd	r25, Z+6	; 0x06
    1352:	99 23       	and	r25, r25
    1354:	11 f0       	breq	.+4      	; 0x135a <usart_init_rs232+0x1a8>
    1356:	98 e0       	ldi	r25, 0x08	; 8
    1358:	01 c0       	rjmp	.+2      	; 0x135c <usart_init_rs232+0x1aa>
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	89 2b       	or	r24, r25
    135e:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1360:	f8 01       	movw	r30, r16
    1362:	40 81       	ld	r20, Z
    1364:	51 81       	ldd	r21, Z+1	; 0x01
    1366:	62 81       	ldd	r22, Z+2	; 0x02
    1368:	73 81       	ldd	r23, Z+3	; 0x03
    136a:	00 e0       	ldi	r16, 0x00	; 0
    136c:	1c e6       	ldi	r17, 0x6C	; 108
    136e:	2c ed       	ldi	r18, 0xDC	; 220
    1370:	32 e0       	ldi	r19, 0x02	; 2
    1372:	ce 01       	movw	r24, r28
    1374:	14 de       	rcall	.-984    	; 0xf9e <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	98 60       	ori	r25, 0x08	; 8
    137a:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	90 61       	ori	r25, 0x10	; 16
    1380:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	08 95       	ret

0000138c <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    138c:	81 11       	cpse	r24, r1
    138e:	18 c0       	rjmp	.+48     	; 0x13c0 <udd_sleep_mode+0x34>
    1390:	90 91 f4 22 	lds	r25, 0x22F4
    1394:	99 23       	and	r25, r25
    1396:	89 f0       	breq	.+34     	; 0x13ba <udd_sleep_mode+0x2e>
    1398:	9f b7       	in	r25, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	e6 ef       	ldi	r30, 0xF6	; 246
    139e:	f2 e2       	ldi	r31, 0x22	; 34
    13a0:	20 81       	ld	r18, Z
    13a2:	21 50       	subi	r18, 0x01	; 1
    13a4:	20 83       	st	Z, r18
    13a6:	9f bf       	out	0x3f, r25	; 63
    13a8:	08 c0       	rjmp	.+16     	; 0x13ba <udd_sleep_mode+0x2e>
    13aa:	9f b7       	in	r25, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	e6 ef       	ldi	r30, 0xF6	; 246
    13b0:	f2 e2       	ldi	r31, 0x22	; 34
    13b2:	20 81       	ld	r18, Z
    13b4:	2f 5f       	subi	r18, 0xFF	; 255
    13b6:	20 83       	st	Z, r18
    13b8:	9f bf       	out	0x3f, r25	; 63
    13ba:	80 93 f4 22 	sts	0x22F4, r24
    13be:	08 95       	ret
    13c0:	90 91 f4 22 	lds	r25, 0x22F4
    13c4:	99 23       	and	r25, r25
    13c6:	89 f3       	breq	.-30     	; 0x13aa <udd_sleep_mode+0x1e>
    13c8:	f8 cf       	rjmp	.-16     	; 0x13ba <udd_sleep_mode+0x2e>

000013ca <udd_ctrl_init>:
    13ca:	0f 93       	push	r16
    13cc:	e8 ec       	ldi	r30, 0xC8	; 200
    13ce:	f4 e0       	ldi	r31, 0x04	; 4
    13d0:	80 81       	ld	r24, Z
    13d2:	8f 7d       	andi	r24, 0xDF	; 223
    13d4:	80 83       	st	Z, r24
    13d6:	80 81       	ld	r24, Z
    13d8:	8f 7d       	andi	r24, 0xDF	; 223
    13da:	80 83       	st	Z, r24
    13dc:	e8 ec       	ldi	r30, 0xC8	; 200
    13de:	f2 e2       	ldi	r31, 0x22	; 34
    13e0:	02 e0       	ldi	r16, 0x02	; 2
    13e2:	05 93       	las	Z, r16
    13e4:	10 92 ca 22 	sts	0x22CA, r1
    13e8:	10 92 cb 22 	sts	0x22CB, r1
    13ec:	00 e2       	ldi	r16, 0x20	; 32
    13ee:	06 93       	lac	Z, r16
    13f0:	00 e4       	ldi	r16, 0x40	; 64
    13f2:	06 93       	lac	Z, r16
    13f4:	e0 ec       	ldi	r30, 0xC0	; 192
    13f6:	f2 e2       	ldi	r31, 0x22	; 34
    13f8:	00 e2       	ldi	r16, 0x20	; 32
    13fa:	06 93       	lac	Z, r16
    13fc:	00 e4       	ldi	r16, 0x40	; 64
    13fe:	06 93       	lac	Z, r16
    1400:	10 92 0f 23 	sts	0x230F, r1
    1404:	10 92 10 23 	sts	0x2310, r1
    1408:	10 92 11 23 	sts	0x2311, r1
    140c:	10 92 12 23 	sts	0x2312, r1
    1410:	10 92 0d 23 	sts	0x230D, r1
    1414:	10 92 0e 23 	sts	0x230E, r1
    1418:	10 92 b2 22 	sts	0x22B2, r1
    141c:	0f 91       	pop	r16
    141e:	08 95       	ret

00001420 <udd_ctrl_stall_data>:
    1420:	0f 93       	push	r16
    1422:	85 e0       	ldi	r24, 0x05	; 5
    1424:	80 93 b2 22 	sts	0x22B2, r24
    1428:	e9 ec       	ldi	r30, 0xC9	; 201
    142a:	f2 e2       	ldi	r31, 0x22	; 34
    142c:	04 e0       	ldi	r16, 0x04	; 4
    142e:	05 93       	las	Z, r16
    1430:	e1 ec       	ldi	r30, 0xC1	; 193
    1432:	f2 e2       	ldi	r31, 0x22	; 34
    1434:	04 e0       	ldi	r16, 0x04	; 4
    1436:	05 93       	las	Z, r16
    1438:	0f 91       	pop	r16
    143a:	08 95       	ret

0000143c <udd_ctrl_send_zlp_in>:
    143c:	0f 93       	push	r16
    143e:	83 e0       	ldi	r24, 0x03	; 3
    1440:	80 93 b2 22 	sts	0x22B2, r24
    1444:	10 92 ca 22 	sts	0x22CA, r1
    1448:	10 92 cb 22 	sts	0x22CB, r1
    144c:	e8 ec       	ldi	r30, 0xC8	; 200
    144e:	f2 e2       	ldi	r31, 0x22	; 34
    1450:	02 e0       	ldi	r16, 0x02	; 2
    1452:	06 93       	lac	Z, r16
    1454:	0f 91       	pop	r16
    1456:	08 95       	ret

00001458 <udd_ctrl_endofrequest>:
    1458:	e0 91 0f 23 	lds	r30, 0x230F
    145c:	f0 91 10 23 	lds	r31, 0x2310
    1460:	30 97       	sbiw	r30, 0x00	; 0
    1462:	09 f0       	breq	.+2      	; 0x1466 <udd_ctrl_endofrequest+0xe>
    1464:	09 95       	icall
    1466:	08 95       	ret

00001468 <udd_ctrl_in_sent>:
    1468:	0f 93       	push	r16
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	80 91 b2 22 	lds	r24, 0x22B2
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	19 f4       	brne	.+6      	; 0x147c <udd_ctrl_in_sent+0x14>
    1476:	f0 df       	rcall	.-32     	; 0x1458 <udd_ctrl_endofrequest>
    1478:	a8 df       	rcall	.-176    	; 0x13ca <udd_ctrl_init>
    147a:	60 c0       	rjmp	.+192    	; 0x153c <udd_ctrl_in_sent+0xd4>
    147c:	80 91 ae 22 	lds	r24, 0x22AE
    1480:	90 91 af 22 	lds	r25, 0x22AF
    1484:	c0 91 0d 23 	lds	r28, 0x230D
    1488:	d0 91 0e 23 	lds	r29, 0x230E
    148c:	c8 1b       	sub	r28, r24
    148e:	d9 0b       	sbc	r29, r25
    1490:	71 f5       	brne	.+92     	; 0x14ee <udd_ctrl_in_sent+0x86>
    1492:	20 91 b0 22 	lds	r18, 0x22B0
    1496:	30 91 b1 22 	lds	r19, 0x22B1
    149a:	82 0f       	add	r24, r18
    149c:	93 1f       	adc	r25, r19
    149e:	80 93 b0 22 	sts	0x22B0, r24
    14a2:	90 93 b1 22 	sts	0x22B1, r25
    14a6:	20 91 09 23 	lds	r18, 0x2309
    14aa:	30 91 0a 23 	lds	r19, 0x230A
    14ae:	82 17       	cp	r24, r18
    14b0:	93 07       	cpc	r25, r19
    14b2:	21 f0       	breq	.+8      	; 0x14bc <udd_ctrl_in_sent+0x54>
    14b4:	80 91 c9 21 	lds	r24, 0x21C9
    14b8:	88 23       	and	r24, r24
    14ba:	41 f0       	breq	.+16     	; 0x14cc <udd_ctrl_in_sent+0x64>
    14bc:	84 e0       	ldi	r24, 0x04	; 4
    14be:	80 93 b2 22 	sts	0x22B2, r24
    14c2:	e0 ec       	ldi	r30, 0xC0	; 192
    14c4:	f2 e2       	ldi	r31, 0x22	; 34
    14c6:	02 e0       	ldi	r16, 0x02	; 2
    14c8:	06 93       	lac	Z, r16
    14ca:	38 c0       	rjmp	.+112    	; 0x153c <udd_ctrl_in_sent+0xd4>
    14cc:	e0 91 11 23 	lds	r30, 0x2311
    14d0:	f0 91 12 23 	lds	r31, 0x2312
    14d4:	30 97       	sbiw	r30, 0x00	; 0
    14d6:	99 f0       	breq	.+38     	; 0x14fe <udd_ctrl_in_sent+0x96>
    14d8:	09 95       	icall
    14da:	88 23       	and	r24, r24
    14dc:	81 f0       	breq	.+32     	; 0x14fe <udd_ctrl_in_sent+0x96>
    14de:	10 92 ae 22 	sts	0x22AE, r1
    14e2:	10 92 af 22 	sts	0x22AF, r1
    14e6:	c0 91 0d 23 	lds	r28, 0x230D
    14ea:	d0 91 0e 23 	lds	r29, 0x230E
    14ee:	c0 34       	cpi	r28, 0x40	; 64
    14f0:	d1 05       	cpc	r29, r1
    14f2:	28 f0       	brcs	.+10     	; 0x14fe <udd_ctrl_in_sent+0x96>
    14f4:	10 92 c9 21 	sts	0x21C9, r1
    14f8:	c0 e4       	ldi	r28, 0x40	; 64
    14fa:	d0 e0       	ldi	r29, 0x00	; 0
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <udd_ctrl_in_sent+0x9c>
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	80 93 c9 21 	sts	0x21C9, r24
    1504:	c0 93 ca 22 	sts	0x22CA, r28
    1508:	d0 93 cb 22 	sts	0x22CB, r29
    150c:	80 91 ae 22 	lds	r24, 0x22AE
    1510:	90 91 af 22 	lds	r25, 0x22AF
    1514:	20 91 0b 23 	lds	r18, 0x230B
    1518:	30 91 0c 23 	lds	r19, 0x230C
    151c:	28 0f       	add	r18, r24
    151e:	39 1f       	adc	r19, r25
    1520:	20 93 cc 22 	sts	0x22CC, r18
    1524:	30 93 cd 22 	sts	0x22CD, r19
    1528:	c8 0f       	add	r28, r24
    152a:	d9 1f       	adc	r29, r25
    152c:	c0 93 ae 22 	sts	0x22AE, r28
    1530:	d0 93 af 22 	sts	0x22AF, r29
    1534:	e8 ec       	ldi	r30, 0xC8	; 200
    1536:	f2 e2       	ldi	r31, 0x22	; 34
    1538:	02 e0       	ldi	r16, 0x02	; 2
    153a:	06 93       	lac	Z, r16
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	0f 91       	pop	r16
    1542:	08 95       	ret

00001544 <udd_ep_get_size>:
    1544:	fc 01       	movw	r30, r24
    1546:	81 81       	ldd	r24, Z+1	; 0x01
    1548:	87 70       	andi	r24, 0x07	; 7
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	fc 01       	movw	r30, r24
    154e:	31 97       	sbiw	r30, 0x01	; 1
    1550:	e7 30       	cpi	r30, 0x07	; 7
    1552:	f1 05       	cpc	r31, r1
    1554:	20 f4       	brcc	.+8      	; 0x155e <udd_ep_get_size+0x1a>
    1556:	e2 50       	subi	r30, 0x02	; 2
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__tablejump2__>
    155e:	88 e0       	ldi	r24, 0x08	; 8
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	08 95       	ret
    1564:	80 e2       	ldi	r24, 0x20	; 32
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	08 95       	ret
    156a:	80 e4       	ldi	r24, 0x40	; 64
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	08 95       	ret
    1570:	80 e8       	ldi	r24, 0x80	; 128
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	08 95       	ret
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	08 95       	ret
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	92 e0       	ldi	r25, 0x02	; 2
    1580:	08 95       	ret
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	93 e0       	ldi	r25, 0x03	; 3
    1586:	08 95       	ret
    1588:	80 e1       	ldi	r24, 0x10	; 16
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	08 95       	ret

0000158e <udd_ep_get_job>:
    158e:	28 2f       	mov	r18, r24
    1590:	2f 70       	andi	r18, 0x0F	; 15
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	22 0f       	add	r18, r18
    1596:	33 1f       	adc	r19, r19
    1598:	99 27       	eor	r25, r25
    159a:	87 fd       	sbrc	r24, 7
    159c:	90 95       	com	r25
    159e:	88 27       	eor	r24, r24
    15a0:	99 0f       	add	r25, r25
    15a2:	88 1f       	adc	r24, r24
    15a4:	99 27       	eor	r25, r25
    15a6:	82 0f       	add	r24, r18
    15a8:	93 1f       	adc	r25, r19
    15aa:	02 97       	sbiw	r24, 0x02	; 2
    15ac:	9c 01       	movw	r18, r24
    15ae:	22 0f       	add	r18, r18
    15b0:	33 1f       	adc	r19, r19
    15b2:	22 0f       	add	r18, r18
    15b4:	33 1f       	adc	r19, r19
    15b6:	22 0f       	add	r18, r18
    15b8:	33 1f       	adc	r19, r19
    15ba:	82 0f       	add	r24, r18
    15bc:	93 1f       	adc	r25, r19
    15be:	86 5b       	subi	r24, 0xB6	; 182
    15c0:	9d 4d       	sbci	r25, 0xDD	; 221
    15c2:	08 95       	ret

000015c4 <udd_ctrl_interrupt_tc_setup>:
    15c4:	0f 93       	push	r16
    15c6:	cf 93       	push	r28
    15c8:	80 91 cc 04 	lds	r24, 0x04CC
    15cc:	80 ff       	sbrs	r24, 0
    15ce:	62 c0       	rjmp	.+196    	; 0x1694 <udd_ctrl_interrupt_tc_setup+0xd0>
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	80 93 cc 04 	sts	0x04CC, r24
    15d6:	e0 ec       	ldi	r30, 0xC0	; 192
    15d8:	f2 e2       	ldi	r31, 0x22	; 34
    15da:	00 e8       	ldi	r16, 0x80	; 128
    15dc:	06 93       	lac	Z, r16
    15de:	e8 ec       	ldi	r30, 0xC8	; 200
    15e0:	f2 e2       	ldi	r31, 0x22	; 34
    15e2:	00 e8       	ldi	r16, 0x80	; 128
    15e4:	06 93       	lac	Z, r16
    15e6:	80 93 ca 04 	sts	0x04CA, r24
    15ea:	e0 ec       	ldi	r30, 0xC0	; 192
    15ec:	f2 e2       	ldi	r31, 0x22	; 34
    15ee:	00 e1       	ldi	r16, 0x10	; 16
    15f0:	06 93       	lac	Z, r16
    15f2:	80 91 b2 22 	lds	r24, 0x22B2
    15f6:	88 23       	and	r24, r24
    15f8:	29 f0       	breq	.+10     	; 0x1604 <udd_ctrl_interrupt_tc_setup+0x40>
    15fa:	83 50       	subi	r24, 0x03	; 3
    15fc:	82 30       	cpi	r24, 0x02	; 2
    15fe:	08 f4       	brcc	.+2      	; 0x1602 <udd_ctrl_interrupt_tc_setup+0x3e>
    1600:	2b df       	rcall	.-426    	; 0x1458 <udd_ctrl_endofrequest>
    1602:	e3 de       	rcall	.-570    	; 0x13ca <udd_ctrl_init>
    1604:	80 91 c2 22 	lds	r24, 0x22C2
    1608:	90 91 c3 22 	lds	r25, 0x22C3
    160c:	08 97       	sbiw	r24, 0x08	; 8
    160e:	09 f0       	breq	.+2      	; 0x1612 <udd_ctrl_interrupt_tc_setup+0x4e>
    1610:	43 c0       	rjmp	.+134    	; 0x1698 <udd_ctrl_interrupt_tc_setup+0xd4>
    1612:	88 e0       	ldi	r24, 0x08	; 8
    1614:	ee e6       	ldi	r30, 0x6E	; 110
    1616:	f2 e2       	ldi	r31, 0x22	; 34
    1618:	a3 e0       	ldi	r26, 0x03	; 3
    161a:	b3 e2       	ldi	r27, 0x23	; 35
    161c:	01 90       	ld	r0, Z+
    161e:	0d 92       	st	X+, r0
    1620:	8a 95       	dec	r24
    1622:	e1 f7       	brne	.-8      	; 0x161c <udd_ctrl_interrupt_tc_setup+0x58>
    1624:	e8 ec       	ldi	r30, 0xC8	; 200
    1626:	f4 e0       	ldi	r31, 0x04	; 4
    1628:	80 81       	ld	r24, Z
    162a:	80 62       	ori	r24, 0x20	; 32
    162c:	80 83       	st	Z, r24
    162e:	80 81       	ld	r24, Z
    1630:	80 62       	ori	r24, 0x20	; 32
    1632:	80 83       	st	Z, r24
    1634:	ef d9       	rcall	.-3106   	; 0xa14 <udc_process_setup>
    1636:	c8 2f       	mov	r28, r24
    1638:	81 11       	cpse	r24, r1
    163a:	03 c0       	rjmp	.+6      	; 0x1642 <udd_ctrl_interrupt_tc_setup+0x7e>
    163c:	f1 de       	rcall	.-542    	; 0x1420 <udd_ctrl_stall_data>
    163e:	c1 e0       	ldi	r28, 0x01	; 1
    1640:	2c c0       	rjmp	.+88     	; 0x169a <udd_ctrl_interrupt_tc_setup+0xd6>
    1642:	80 91 03 23 	lds	r24, 0x2303
    1646:	88 23       	and	r24, r24
    1648:	6c f4       	brge	.+26     	; 0x1664 <udd_ctrl_interrupt_tc_setup+0xa0>
    164a:	10 92 b0 22 	sts	0x22B0, r1
    164e:	10 92 b1 22 	sts	0x22B1, r1
    1652:	10 92 ae 22 	sts	0x22AE, r1
    1656:	10 92 af 22 	sts	0x22AF, r1
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	80 93 b2 22 	sts	0x22B2, r24
    1660:	03 df       	rcall	.-506    	; 0x1468 <udd_ctrl_in_sent>
    1662:	1b c0       	rjmp	.+54     	; 0x169a <udd_ctrl_interrupt_tc_setup+0xd6>
    1664:	20 91 09 23 	lds	r18, 0x2309
    1668:	30 91 0a 23 	lds	r19, 0x230A
    166c:	23 2b       	or	r18, r19
    166e:	11 f4       	brne	.+4      	; 0x1674 <udd_ctrl_interrupt_tc_setup+0xb0>
    1670:	e5 de       	rcall	.-566    	; 0x143c <udd_ctrl_send_zlp_in>
    1672:	13 c0       	rjmp	.+38     	; 0x169a <udd_ctrl_interrupt_tc_setup+0xd6>
    1674:	10 92 b0 22 	sts	0x22B0, r1
    1678:	10 92 b1 22 	sts	0x22B1, r1
    167c:	10 92 ae 22 	sts	0x22AE, r1
    1680:	10 92 af 22 	sts	0x22AF, r1
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	80 93 b2 22 	sts	0x22B2, r24
    168a:	e0 ec       	ldi	r30, 0xC0	; 192
    168c:	f2 e2       	ldi	r31, 0x22	; 34
    168e:	02 e0       	ldi	r16, 0x02	; 2
    1690:	06 93       	lac	Z, r16
    1692:	03 c0       	rjmp	.+6      	; 0x169a <udd_ctrl_interrupt_tc_setup+0xd6>
    1694:	c0 e0       	ldi	r28, 0x00	; 0
    1696:	01 c0       	rjmp	.+2      	; 0x169a <udd_ctrl_interrupt_tc_setup+0xd6>
    1698:	c1 e0       	ldi	r28, 0x01	; 1
    169a:	8c 2f       	mov	r24, r28
    169c:	cf 91       	pop	r28
    169e:	0f 91       	pop	r16
    16a0:	08 95       	ret

000016a2 <udd_ep_trans_complet>:
    16a2:	bf 92       	push	r11
    16a4:	cf 92       	push	r12
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	b8 2e       	mov	r11, r24
    16b6:	6b df       	rcall	.-298    	; 0x158e <udd_ep_get_job>
    16b8:	ec 01       	movw	r28, r24
    16ba:	1b 2d       	mov	r17, r11
    16bc:	11 1f       	adc	r17, r17
    16be:	11 27       	eor	r17, r17
    16c0:	11 1f       	adc	r17, r17
    16c2:	8b 2d       	mov	r24, r11
    16c4:	8f 70       	andi	r24, 0x0F	; 15
    16c6:	e8 2e       	mov	r14, r24
    16c8:	f1 2c       	mov	r15, r1
    16ca:	ee 0c       	add	r14, r14
    16cc:	ff 1c       	adc	r15, r15
    16ce:	e1 0e       	add	r14, r17
    16d0:	f1 1c       	adc	r15, r1
    16d2:	c7 01       	movw	r24, r14
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	9c 01       	movw	r18, r24
    16e2:	20 54       	subi	r18, 0x40	; 64
    16e4:	3d 4d       	sbci	r19, 0xDD	; 221
    16e6:	79 01       	movw	r14, r18
    16e8:	c9 01       	movw	r24, r18
    16ea:	2c df       	rcall	.-424    	; 0x1544 <udd_ep_get_size>
    16ec:	6c 01       	movw	r12, r24
    16ee:	11 23       	and	r17, r17
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <udd_ep_trans_complet+0x52>
    16f2:	5b c0       	rjmp	.+182    	; 0x17aa <udd_ep_trans_complet+0x108>
    16f4:	d7 01       	movw	r26, r14
    16f6:	16 96       	adiw	r26, 0x06	; 6
    16f8:	2d 91       	ld	r18, X+
    16fa:	3c 91       	ld	r19, X
    16fc:	17 97       	sbiw	r26, 0x07	; 7
    16fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1700:	9e 81       	ldd	r25, Y+6	; 0x06
    1702:	28 0f       	add	r18, r24
    1704:	39 1f       	adc	r19, r25
    1706:	2d 83       	std	Y+5, r18	; 0x05
    1708:	3e 83       	std	Y+6, r19	; 0x06
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	9c 81       	ldd	r25, Y+4	; 0x04
    170e:	28 17       	cp	r18, r24
    1710:	39 07       	cpc	r19, r25
    1712:	c9 f1       	breq	.+114    	; 0x1786 <udd_ep_trans_complet+0xe4>
    1714:	fc 01       	movw	r30, r24
    1716:	e2 1b       	sub	r30, r18
    1718:	f3 0b       	sbc	r31, r19
    171a:	9f 01       	movw	r18, r30
    171c:	21 15       	cp	r18, r1
    171e:	f4 e0       	ldi	r31, 0x04	; 4
    1720:	3f 07       	cpc	r19, r31
    1722:	40 f0       	brcs	.+16     	; 0x1734 <udd_ep_trans_complet+0x92>
    1724:	2f ef       	ldi	r18, 0xFF	; 255
    1726:	33 e0       	ldi	r19, 0x03	; 3
    1728:	c9 01       	movw	r24, r18
    172a:	b6 01       	movw	r22, r12
    172c:	0e 94 9e 14 	call	0x293c	; 0x293c <__udivmodhi4>
    1730:	28 1b       	sub	r18, r24
    1732:	39 0b       	sbc	r19, r25
    1734:	88 81       	ld	r24, Y
    1736:	81 ff       	sbrs	r24, 1
    1738:	0a c0       	rjmp	.+20     	; 0x174e <udd_ep_trans_complet+0xac>
    173a:	c9 01       	movw	r24, r18
    173c:	b6 01       	movw	r22, r12
    173e:	0e 94 9e 14 	call	0x293c	; 0x293c <__udivmodhi4>
    1742:	41 e0       	ldi	r20, 0x01	; 1
    1744:	89 2b       	or	r24, r25
    1746:	09 f0       	breq	.+2      	; 0x174a <udd_ep_trans_complet+0xa8>
    1748:	40 e0       	ldi	r20, 0x00	; 0
    174a:	94 2f       	mov	r25, r20
    174c:	01 c0       	rjmp	.+2      	; 0x1750 <udd_ep_trans_complet+0xae>
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	88 81       	ld	r24, Y
    1752:	90 fb       	bst	r25, 0
    1754:	81 f9       	bld	r24, 1
    1756:	88 83       	st	Y, r24
    1758:	d7 01       	movw	r26, r14
    175a:	16 96       	adiw	r26, 0x06	; 6
    175c:	1d 92       	st	X+, r1
    175e:	1c 92       	st	X, r1
    1760:	17 97       	sbiw	r26, 0x07	; 7
    1762:	12 96       	adiw	r26, 0x02	; 2
    1764:	2d 93       	st	X+, r18
    1766:	3c 93       	st	X, r19
    1768:	13 97       	sbiw	r26, 0x03	; 3
    176a:	29 81       	ldd	r18, Y+1	; 0x01
    176c:	3a 81       	ldd	r19, Y+2	; 0x02
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	82 0f       	add	r24, r18
    1774:	93 1f       	adc	r25, r19
    1776:	14 96       	adiw	r26, 0x04	; 4
    1778:	8d 93       	st	X+, r24
    177a:	9c 93       	st	X, r25
    177c:	15 97       	sbiw	r26, 0x05	; 5
    177e:	f7 01       	movw	r30, r14
    1780:	02 e0       	ldi	r16, 0x02	; 2
    1782:	06 93       	lac	Z, r16
    1784:	98 c0       	rjmp	.+304    	; 0x18b6 <udd_ep_trans_complet+0x214>
    1786:	88 81       	ld	r24, Y
    1788:	81 ff       	sbrs	r24, 1
    178a:	87 c0       	rjmp	.+270    	; 0x189a <udd_ep_trans_complet+0x1f8>
    178c:	8d 7f       	andi	r24, 0xFD	; 253
    178e:	88 83       	st	Y, r24
    1790:	d7 01       	movw	r26, r14
    1792:	16 96       	adiw	r26, 0x06	; 6
    1794:	1d 92       	st	X+, r1
    1796:	1c 92       	st	X, r1
    1798:	17 97       	sbiw	r26, 0x07	; 7
    179a:	12 96       	adiw	r26, 0x02	; 2
    179c:	1d 92       	st	X+, r1
    179e:	1c 92       	st	X, r1
    17a0:	13 97       	sbiw	r26, 0x03	; 3
    17a2:	f7 01       	movw	r30, r14
    17a4:	02 e0       	ldi	r16, 0x02	; 2
    17a6:	06 93       	lac	Z, r16
    17a8:	86 c0       	rjmp	.+268    	; 0x18b6 <udd_ep_trans_complet+0x214>
    17aa:	d7 01       	movw	r26, r14
    17ac:	12 96       	adiw	r26, 0x02	; 2
    17ae:	0d 91       	ld	r16, X+
    17b0:	1c 91       	ld	r17, X
    17b2:	13 97       	sbiw	r26, 0x03	; 3
    17b4:	88 81       	ld	r24, Y
    17b6:	82 ff       	sbrs	r24, 2
    17b8:	15 c0       	rjmp	.+42     	; 0x17e4 <udd_ep_trans_complet+0x142>
    17ba:	e9 81       	ldd	r30, Y+1	; 0x01
    17bc:	fa 81       	ldd	r31, Y+2	; 0x02
    17be:	2d 81       	ldd	r18, Y+5	; 0x05
    17c0:	3e 81       	ldd	r19, Y+6	; 0x06
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	b6 01       	movw	r22, r12
    17c8:	0e 94 9e 14 	call	0x293c	; 0x293c <__udivmodhi4>
    17cc:	b0 e4       	ldi	r27, 0x40	; 64
    17ce:	bb 9e       	mul	r11, r27
    17d0:	b0 01       	movw	r22, r0
    17d2:	11 24       	eor	r1, r1
    17d4:	66 57       	subi	r22, 0x76	; 118
    17d6:	7e 4d       	sbci	r23, 0xDE	; 222
    17d8:	ac 01       	movw	r20, r24
    17da:	cf 01       	movw	r24, r30
    17dc:	82 0f       	add	r24, r18
    17de:	93 1f       	adc	r25, r19
    17e0:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <memcpy>
    17e4:	2d 81       	ldd	r18, Y+5	; 0x05
    17e6:	3e 81       	ldd	r19, Y+6	; 0x06
    17e8:	20 0f       	add	r18, r16
    17ea:	31 1f       	adc	r19, r17
    17ec:	2d 83       	std	Y+5, r18	; 0x05
    17ee:	3e 83       	std	Y+6, r19	; 0x06
    17f0:	eb 81       	ldd	r30, Y+3	; 0x03
    17f2:	fc 81       	ldd	r31, Y+4	; 0x04
    17f4:	e2 17       	cp	r30, r18
    17f6:	f3 07       	cpc	r31, r19
    17f8:	10 f4       	brcc	.+4      	; 0x17fe <udd_ep_trans_complet+0x15c>
    17fa:	ed 83       	std	Y+5, r30	; 0x05
    17fc:	fe 83       	std	Y+6, r31	; 0x06
    17fe:	d7 01       	movw	r26, r14
    1800:	16 96       	adiw	r26, 0x06	; 6
    1802:	8d 91       	ld	r24, X+
    1804:	9c 91       	ld	r25, X
    1806:	17 97       	sbiw	r26, 0x07	; 7
    1808:	80 17       	cp	r24, r16
    180a:	91 07       	cpc	r25, r17
    180c:	09 f0       	breq	.+2      	; 0x1810 <udd_ep_trans_complet+0x16e>
    180e:	45 c0       	rjmp	.+138    	; 0x189a <udd_ep_trans_complet+0x1f8>
    1810:	8d 81       	ldd	r24, Y+5	; 0x05
    1812:	9e 81       	ldd	r25, Y+6	; 0x06
    1814:	e8 17       	cp	r30, r24
    1816:	f9 07       	cpc	r31, r25
    1818:	09 f4       	brne	.+2      	; 0x181c <udd_ep_trans_complet+0x17a>
    181a:	3f c0       	rjmp	.+126    	; 0x189a <udd_ep_trans_complet+0x1f8>
    181c:	e8 1b       	sub	r30, r24
    181e:	f9 0b       	sbc	r31, r25
    1820:	e1 15       	cp	r30, r1
    1822:	b4 e0       	ldi	r27, 0x04	; 4
    1824:	fb 07       	cpc	r31, r27
    1826:	48 f0       	brcs	.+18     	; 0x183a <udd_ep_trans_complet+0x198>
    1828:	ef ef       	ldi	r30, 0xFF	; 255
    182a:	f3 e0       	ldi	r31, 0x03	; 3
    182c:	cf 01       	movw	r24, r30
    182e:	b6 01       	movw	r22, r12
    1830:	0e 94 9e 14 	call	0x293c	; 0x293c <__udivmodhi4>
    1834:	e8 1b       	sub	r30, r24
    1836:	f9 0b       	sbc	r31, r25
    1838:	06 c0       	rjmp	.+12     	; 0x1846 <udd_ep_trans_complet+0x1a4>
    183a:	cf 01       	movw	r24, r30
    183c:	b6 01       	movw	r22, r12
    183e:	0e 94 9e 14 	call	0x293c	; 0x293c <__udivmodhi4>
    1842:	e8 1b       	sub	r30, r24
    1844:	f9 0b       	sbc	r31, r25
    1846:	d7 01       	movw	r26, r14
    1848:	12 96       	adiw	r26, 0x02	; 2
    184a:	1d 92       	st	X+, r1
    184c:	1c 92       	st	X, r1
    184e:	13 97       	sbiw	r26, 0x03	; 3
    1850:	ec 15       	cp	r30, r12
    1852:	fd 05       	cpc	r31, r13
    1854:	78 f4       	brcc	.+30     	; 0x1874 <udd_ep_trans_complet+0x1d2>
    1856:	88 81       	ld	r24, Y
    1858:	84 60       	ori	r24, 0x04	; 4
    185a:	88 83       	st	Y, r24
    185c:	b0 e4       	ldi	r27, 0x40	; 64
    185e:	bb 9e       	mul	r11, r27
    1860:	c0 01       	movw	r24, r0
    1862:	11 24       	eor	r1, r1
    1864:	86 57       	subi	r24, 0x76	; 118
    1866:	9e 4d       	sbci	r25, 0xDE	; 222
    1868:	f7 01       	movw	r30, r14
    186a:	84 83       	std	Z+4, r24	; 0x04
    186c:	95 83       	std	Z+5, r25	; 0x05
    186e:	c6 82       	std	Z+6, r12	; 0x06
    1870:	d7 82       	std	Z+7, r13	; 0x07
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <udd_ep_trans_complet+0x1f0>
    1874:	29 81       	ldd	r18, Y+1	; 0x01
    1876:	3a 81       	ldd	r19, Y+2	; 0x02
    1878:	8d 81       	ldd	r24, Y+5	; 0x05
    187a:	9e 81       	ldd	r25, Y+6	; 0x06
    187c:	82 0f       	add	r24, r18
    187e:	93 1f       	adc	r25, r19
    1880:	d7 01       	movw	r26, r14
    1882:	14 96       	adiw	r26, 0x04	; 4
    1884:	8d 93       	st	X+, r24
    1886:	9c 93       	st	X, r25
    1888:	15 97       	sbiw	r26, 0x05	; 5
    188a:	16 96       	adiw	r26, 0x06	; 6
    188c:	ed 93       	st	X+, r30
    188e:	fc 93       	st	X, r31
    1890:	17 97       	sbiw	r26, 0x07	; 7
    1892:	f7 01       	movw	r30, r14
    1894:	02 e0       	ldi	r16, 0x02	; 2
    1896:	06 93       	lac	Z, r16
    1898:	0e c0       	rjmp	.+28     	; 0x18b6 <udd_ep_trans_complet+0x214>
    189a:	88 81       	ld	r24, Y
    189c:	80 ff       	sbrs	r24, 0
    189e:	0b c0       	rjmp	.+22     	; 0x18b6 <udd_ep_trans_complet+0x214>
    18a0:	8e 7f       	andi	r24, 0xFE	; 254
    18a2:	88 83       	st	Y, r24
    18a4:	ef 81       	ldd	r30, Y+7	; 0x07
    18a6:	f8 85       	ldd	r31, Y+8	; 0x08
    18a8:	30 97       	sbiw	r30, 0x00	; 0
    18aa:	29 f0       	breq	.+10     	; 0x18b6 <udd_ep_trans_complet+0x214>
    18ac:	6d 81       	ldd	r22, Y+5	; 0x05
    18ae:	7e 81       	ldd	r23, Y+6	; 0x06
    18b0:	4b 2d       	mov	r20, r11
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	09 95       	icall
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	ff 90       	pop	r15
    18c0:	ef 90       	pop	r14
    18c2:	df 90       	pop	r13
    18c4:	cf 90       	pop	r12
    18c6:	bf 90       	pop	r11
    18c8:	08 95       	ret

000018ca <udd_is_high_speed>:
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	08 95       	ret

000018ce <udd_set_address>:
    18ce:	80 93 c3 04 	sts	0x04C3, r24
    18d2:	08 95       	ret

000018d4 <udd_getaddress>:
    18d4:	80 91 c3 04 	lds	r24, 0x04C3
    18d8:	08 95       	ret

000018da <udd_get_frame_number>:
    18da:	80 91 f0 22 	lds	r24, 0x22F0
    18de:	90 91 f1 22 	lds	r25, 0x22F1
    18e2:	08 95       	ret

000018e4 <udd_get_micro_frame_number>:
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	08 95       	ret

000018ea <udd_set_setup_payload>:
    18ea:	80 93 0b 23 	sts	0x230B, r24
    18ee:	90 93 0c 23 	sts	0x230C, r25
    18f2:	60 93 0d 23 	sts	0x230D, r22
    18f6:	70 93 0e 23 	sts	0x230E, r23
    18fa:	08 95       	ret

000018fc <udd_ep_alloc>:
    18fc:	e8 2f       	mov	r30, r24
    18fe:	ef 70       	andi	r30, 0x0F	; 15
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	ee 0f       	add	r30, r30
    1904:	ff 1f       	adc	r31, r31
    1906:	99 27       	eor	r25, r25
    1908:	87 fd       	sbrc	r24, 7
    190a:	90 95       	com	r25
    190c:	88 27       	eor	r24, r24
    190e:	99 0f       	add	r25, r25
    1910:	88 1f       	adc	r24, r24
    1912:	99 27       	eor	r25, r25
    1914:	e8 0f       	add	r30, r24
    1916:	f9 1f       	adc	r31, r25
    1918:	ee 0f       	add	r30, r30
    191a:	ff 1f       	adc	r31, r31
    191c:	ee 0f       	add	r30, r30
    191e:	ff 1f       	adc	r31, r31
    1920:	ee 0f       	add	r30, r30
    1922:	ff 1f       	adc	r31, r31
    1924:	e0 54       	subi	r30, 0x40	; 64
    1926:	fd 4d       	sbci	r31, 0xDD	; 221
    1928:	81 81       	ldd	r24, Z+1	; 0x01
    192a:	80 7c       	andi	r24, 0xC0	; 192
    192c:	09 f0       	breq	.+2      	; 0x1930 <udd_ep_alloc+0x34>
    192e:	43 c0       	rjmp	.+134    	; 0x19b6 <udd_ep_alloc+0xba>
    1930:	63 70       	andi	r22, 0x03	; 3
    1932:	61 30       	cpi	r22, 0x01	; 1
    1934:	29 f0       	breq	.+10     	; 0x1940 <udd_ep_alloc+0x44>
    1936:	10 f4       	brcc	.+4      	; 0x193c <udd_ep_alloc+0x40>
    1938:	80 e4       	ldi	r24, 0x40	; 64
    193a:	03 c0       	rjmp	.+6      	; 0x1942 <udd_ep_alloc+0x46>
    193c:	80 e8       	ldi	r24, 0x80	; 128
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <udd_ep_alloc+0x46>
    1940:	80 ec       	ldi	r24, 0xC0	; 192
    1942:	40 38       	cpi	r20, 0x80	; 128
    1944:	51 05       	cpc	r21, r1
    1946:	e1 f0       	breq	.+56     	; 0x1980 <udd_ep_alloc+0x84>
    1948:	50 f4       	brcc	.+20     	; 0x195e <udd_ep_alloc+0x62>
    194a:	40 32       	cpi	r20, 0x20	; 32
    194c:	51 05       	cpc	r21, r1
    194e:	a1 f0       	breq	.+40     	; 0x1978 <udd_ep_alloc+0x7c>
    1950:	40 34       	cpi	r20, 0x40	; 64
    1952:	51 05       	cpc	r21, r1
    1954:	99 f0       	breq	.+38     	; 0x197c <udd_ep_alloc+0x80>
    1956:	40 31       	cpi	r20, 0x10	; 16
    1958:	51 05       	cpc	r21, r1
    195a:	61 f4       	brne	.+24     	; 0x1974 <udd_ep_alloc+0x78>
    195c:	19 c0       	rjmp	.+50     	; 0x1990 <udd_ep_alloc+0x94>
    195e:	41 15       	cp	r20, r1
    1960:	92 e0       	ldi	r25, 0x02	; 2
    1962:	59 07       	cpc	r21, r25
    1964:	89 f0       	breq	.+34     	; 0x1988 <udd_ep_alloc+0x8c>
    1966:	4f 3f       	cpi	r20, 0xFF	; 255
    1968:	93 e0       	ldi	r25, 0x03	; 3
    196a:	59 07       	cpc	r21, r25
    196c:	79 f0       	breq	.+30     	; 0x198c <udd_ep_alloc+0x90>
    196e:	41 15       	cp	r20, r1
    1970:	51 40       	sbci	r21, 0x01	; 1
    1972:	41 f0       	breq	.+16     	; 0x1984 <udd_ep_alloc+0x88>
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	0d c0       	rjmp	.+26     	; 0x1992 <udd_ep_alloc+0x96>
    1978:	22 e0       	ldi	r18, 0x02	; 2
    197a:	0b c0       	rjmp	.+22     	; 0x1992 <udd_ep_alloc+0x96>
    197c:	23 e0       	ldi	r18, 0x03	; 3
    197e:	09 c0       	rjmp	.+18     	; 0x1992 <udd_ep_alloc+0x96>
    1980:	24 e0       	ldi	r18, 0x04	; 4
    1982:	07 c0       	rjmp	.+14     	; 0x1992 <udd_ep_alloc+0x96>
    1984:	25 e0       	ldi	r18, 0x05	; 5
    1986:	05 c0       	rjmp	.+10     	; 0x1992 <udd_ep_alloc+0x96>
    1988:	26 e0       	ldi	r18, 0x06	; 6
    198a:	03 c0       	rjmp	.+6      	; 0x1992 <udd_ep_alloc+0x96>
    198c:	27 e0       	ldi	r18, 0x07	; 7
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <udd_ep_alloc+0x96>
    1990:	21 e0       	ldi	r18, 0x01	; 1
    1992:	11 82       	std	Z+1, r1	; 0x01
    1994:	96 e0       	ldi	r25, 0x06	; 6
    1996:	90 83       	st	Z, r25
    1998:	82 2b       	or	r24, r18
    199a:	81 83       	std	Z+1, r24	; 0x01
    199c:	81 81       	ldd	r24, Z+1	; 0x01
    199e:	80 7c       	andi	r24, 0xC0	; 192
    19a0:	80 3c       	cpi	r24, 0xC0	; 192
    19a2:	21 f4       	brne	.+8      	; 0x19ac <udd_ep_alloc+0xb0>
    19a4:	81 81       	ldd	r24, Z+1	; 0x01
    19a6:	87 70       	andi	r24, 0x07	; 7
    19a8:	87 30       	cpi	r24, 0x07	; 7
    19aa:	39 f0       	breq	.+14     	; 0x19ba <udd_ep_alloc+0xbe>
    19ac:	81 81       	ldd	r24, Z+1	; 0x01
    19ae:	80 62       	ori	r24, 0x20	; 32
    19b0:	81 83       	std	Z+1, r24	; 0x01
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	08 95       	ret
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	08 95       	ret
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	08 95       	ret

000019be <udd_ep_is_halted>:
    19be:	e8 2f       	mov	r30, r24
    19c0:	ef 70       	andi	r30, 0x0F	; 15
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	ee 0f       	add	r30, r30
    19c6:	ff 1f       	adc	r31, r31
    19c8:	99 27       	eor	r25, r25
    19ca:	87 fd       	sbrc	r24, 7
    19cc:	90 95       	com	r25
    19ce:	88 27       	eor	r24, r24
    19d0:	99 0f       	add	r25, r25
    19d2:	88 1f       	adc	r24, r24
    19d4:	99 27       	eor	r25, r25
    19d6:	e8 0f       	add	r30, r24
    19d8:	f9 1f       	adc	r31, r25
    19da:	ee 0f       	add	r30, r30
    19dc:	ff 1f       	adc	r31, r31
    19de:	ee 0f       	add	r30, r30
    19e0:	ff 1f       	adc	r31, r31
    19e2:	ee 0f       	add	r30, r30
    19e4:	ff 1f       	adc	r31, r31
    19e6:	e0 54       	subi	r30, 0x40	; 64
    19e8:	fd 4d       	sbci	r31, 0xDD	; 221
    19ea:	81 81       	ldd	r24, Z+1	; 0x01
    19ec:	82 fb       	bst	r24, 2
    19ee:	88 27       	eor	r24, r24
    19f0:	80 f9       	bld	r24, 0
    19f2:	08 95       	ret

000019f4 <udd_ep_clear_halt>:
    19f4:	e8 2f       	mov	r30, r24
    19f6:	ef 70       	andi	r30, 0x0F	; 15
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	ee 0f       	add	r30, r30
    19fc:	ff 1f       	adc	r31, r31
    19fe:	28 2f       	mov	r18, r24
    1a00:	33 27       	eor	r19, r19
    1a02:	27 fd       	sbrc	r18, 7
    1a04:	30 95       	com	r19
    1a06:	22 27       	eor	r18, r18
    1a08:	33 0f       	add	r19, r19
    1a0a:	22 1f       	adc	r18, r18
    1a0c:	33 27       	eor	r19, r19
    1a0e:	e2 0f       	add	r30, r18
    1a10:	f3 1f       	adc	r31, r19
    1a12:	ee 0f       	add	r30, r30
    1a14:	ff 1f       	adc	r31, r31
    1a16:	ee 0f       	add	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	ee 0f       	add	r30, r30
    1a1c:	ff 1f       	adc	r31, r31
    1a1e:	e0 54       	subi	r30, 0x40	; 64
    1a20:	fd 4d       	sbci	r31, 0xDD	; 221
    1a22:	91 81       	ldd	r25, Z+1	; 0x01
    1a24:	92 ff       	sbrs	r25, 2
    1a26:	0e c0       	rjmp	.+28     	; 0x1a44 <udd_ep_clear_halt+0x50>
    1a28:	91 81       	ldd	r25, Z+1	; 0x01
    1a2a:	9b 7f       	andi	r25, 0xFB	; 251
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	af dd       	rcall	.-1186   	; 0x158e <udd_ep_get_job>
    1a30:	fc 01       	movw	r30, r24
    1a32:	80 81       	ld	r24, Z
    1a34:	80 ff       	sbrs	r24, 0
    1a36:	06 c0       	rjmp	.+12     	; 0x1a44 <udd_ep_clear_halt+0x50>
    1a38:	8e 7f       	andi	r24, 0xFE	; 254
    1a3a:	80 83       	st	Z, r24
    1a3c:	07 80       	ldd	r0, Z+7	; 0x07
    1a3e:	f0 85       	ldd	r31, Z+8	; 0x08
    1a40:	e0 2d       	mov	r30, r0
    1a42:	09 95       	icall
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	08 95       	ret

00001a48 <udd_ep_run>:
    1a48:	7f 92       	push	r7
    1a4a:	8f 92       	push	r8
    1a4c:	9f 92       	push	r9
    1a4e:	af 92       	push	r10
    1a50:	bf 92       	push	r11
    1a52:	cf 92       	push	r12
    1a54:	df 92       	push	r13
    1a56:	ef 92       	push	r14
    1a58:	ff 92       	push	r15
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	98 2e       	mov	r9, r24
    1a64:	86 2e       	mov	r8, r22
    1a66:	5a 01       	movw	r10, r20
    1a68:	69 01       	movw	r12, r18
    1a6a:	91 dd       	rcall	.-1246   	; 0x158e <udd_ep_get_job>
    1a6c:	7c 01       	movw	r14, r24
    1a6e:	79 2c       	mov	r7, r9
    1a70:	77 1c       	adc	r7, r7
    1a72:	77 24       	eor	r7, r7
    1a74:	77 1c       	adc	r7, r7
    1a76:	c9 2d       	mov	r28, r9
    1a78:	cf 70       	andi	r28, 0x0F	; 15
    1a7a:	d0 e0       	ldi	r29, 0x00	; 0
    1a7c:	cc 0f       	add	r28, r28
    1a7e:	dd 1f       	adc	r29, r29
    1a80:	c7 0d       	add	r28, r7
    1a82:	d1 1d       	adc	r29, r1
    1a84:	cc 0f       	add	r28, r28
    1a86:	dd 1f       	adc	r29, r29
    1a88:	cc 0f       	add	r28, r28
    1a8a:	dd 1f       	adc	r29, r29
    1a8c:	cc 0f       	add	r28, r28
    1a8e:	dd 1f       	adc	r29, r29
    1a90:	c0 54       	subi	r28, 0x40	; 64
    1a92:	dd 4d       	sbci	r29, 0xDD	; 221
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	80 7c       	andi	r24, 0xC0	; 192
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <udd_ep_run+0x54>
    1a9a:	4b c0       	rjmp	.+150    	; 0x1b32 <udd_ep_run+0xea>
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	80 7c       	andi	r24, 0xC0	; 192
    1aa0:	80 3c       	cpi	r24, 0xC0	; 192
    1aa2:	19 f0       	breq	.+6      	; 0x1aaa <udd_ep_run+0x62>
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	82 fd       	sbrc	r24, 2
    1aa8:	46 c0       	rjmp	.+140    	; 0x1b36 <udd_ep_run+0xee>
    1aaa:	8f b7       	in	r24, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	f7 01       	movw	r30, r14
    1ab0:	90 81       	ld	r25, Z
    1ab2:	90 ff       	sbrs	r25, 0
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <udd_ep_run+0x74>
    1ab6:	8f bf       	out	0x3f, r24	; 63
    1ab8:	71 2c       	mov	r7, r1
    1aba:	3e c0       	rjmp	.+124    	; 0x1b38 <udd_ep_run+0xf0>
    1abc:	f7 01       	movw	r30, r14
    1abe:	90 81       	ld	r25, Z
    1ac0:	91 60       	ori	r25, 0x01	; 1
    1ac2:	90 83       	st	Z, r25
    1ac4:	8f bf       	out	0x3f, r24	; 63
    1ac6:	f7 01       	movw	r30, r14
    1ac8:	a1 82       	std	Z+1, r10	; 0x01
    1aca:	b2 82       	std	Z+2, r11	; 0x02
    1acc:	c3 82       	std	Z+3, r12	; 0x03
    1ace:	d4 82       	std	Z+4, r13	; 0x04
    1ad0:	15 82       	std	Z+5, r1	; 0x05
    1ad2:	16 82       	std	Z+6, r1	; 0x06
    1ad4:	07 83       	std	Z+7, r16	; 0x07
    1ad6:	10 87       	std	Z+8, r17	; 0x08
    1ad8:	81 10       	cpse	r8, r1
    1ada:	06 c0       	rjmp	.+12     	; 0x1ae8 <udd_ep_run+0xa0>
    1adc:	91 e0       	ldi	r25, 0x01	; 1
    1ade:	c1 14       	cp	r12, r1
    1ae0:	d1 04       	cpc	r13, r1
    1ae2:	19 f0       	breq	.+6      	; 0x1aea <udd_ep_run+0xa2>
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	01 c0       	rjmp	.+2      	; 0x1aea <udd_ep_run+0xa2>
    1ae8:	91 e0       	ldi	r25, 0x01	; 1
    1aea:	f7 01       	movw	r30, r14
    1aec:	80 81       	ld	r24, Z
    1aee:	90 fb       	bst	r25, 0
    1af0:	81 f9       	bld	r24, 1
    1af2:	8b 7f       	andi	r24, 0xFB	; 251
    1af4:	80 83       	st	Z, r24
    1af6:	77 20       	and	r7, r7
    1af8:	19 f0       	breq	.+6      	; 0x1b00 <udd_ep_run+0xb8>
    1afa:	1e 82       	std	Y+6, r1	; 0x06
    1afc:	1f 82       	std	Y+7, r1	; 0x07
    1afe:	14 c0       	rjmp	.+40     	; 0x1b28 <udd_ep_run+0xe0>
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	80 7c       	andi	r24, 0xC0	; 192
    1b04:	80 3c       	cpi	r24, 0xC0	; 192
    1b06:	61 f4       	brne	.+24     	; 0x1b20 <udd_ep_run+0xd8>
    1b08:	ce 01       	movw	r24, r28
    1b0a:	1c dd       	rcall	.-1480   	; 0x1544 <udd_ep_get_size>
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	c6 01       	movw	r24, r12
    1b10:	15 d7       	rcall	.+3626   	; 0x293c <__udivmodhi4>
    1b12:	89 2b       	or	r24, r25
    1b14:	29 f0       	breq	.+10     	; 0x1b20 <udd_ep_run+0xd8>
    1b16:	f7 01       	movw	r30, r14
    1b18:	80 81       	ld	r24, Z
    1b1a:	8e 7f       	andi	r24, 0xFE	; 254
    1b1c:	80 83       	st	Z, r24
    1b1e:	0c c0       	rjmp	.+24     	; 0x1b38 <udd_ep_run+0xf0>
    1b20:	1a 82       	std	Y+2, r1	; 0x02
    1b22:	1b 82       	std	Y+3, r1	; 0x03
    1b24:	1e 82       	std	Y+6, r1	; 0x06
    1b26:	1f 82       	std	Y+7, r1	; 0x07
    1b28:	89 2d       	mov	r24, r9
    1b2a:	bb dd       	rcall	.-1162   	; 0x16a2 <udd_ep_trans_complet>
    1b2c:	77 24       	eor	r7, r7
    1b2e:	73 94       	inc	r7
    1b30:	03 c0       	rjmp	.+6      	; 0x1b38 <udd_ep_run+0xf0>
    1b32:	71 2c       	mov	r7, r1
    1b34:	01 c0       	rjmp	.+2      	; 0x1b38 <udd_ep_run+0xf0>
    1b36:	71 2c       	mov	r7, r1
    1b38:	87 2d       	mov	r24, r7
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	ff 90       	pop	r15
    1b44:	ef 90       	pop	r14
    1b46:	df 90       	pop	r13
    1b48:	cf 90       	pop	r12
    1b4a:	bf 90       	pop	r11
    1b4c:	af 90       	pop	r10
    1b4e:	9f 90       	pop	r9
    1b50:	8f 90       	pop	r8
    1b52:	7f 90       	pop	r7
    1b54:	08 95       	ret

00001b56 <udd_ep_abort>:
    1b56:	ff 92       	push	r15
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	18 2f       	mov	r17, r24
    1b62:	f8 2e       	mov	r15, r24
    1b64:	ff 1c       	adc	r15, r15
    1b66:	ff 24       	eor	r15, r15
    1b68:	ff 1c       	adc	r15, r15
    1b6a:	c8 2f       	mov	r28, r24
    1b6c:	cf 70       	andi	r28, 0x0F	; 15
    1b6e:	d0 e0       	ldi	r29, 0x00	; 0
    1b70:	cc 0f       	add	r28, r28
    1b72:	dd 1f       	adc	r29, r29
    1b74:	cf 0d       	add	r28, r15
    1b76:	d1 1d       	adc	r29, r1
    1b78:	cc 0f       	add	r28, r28
    1b7a:	dd 1f       	adc	r29, r29
    1b7c:	cc 0f       	add	r28, r28
    1b7e:	dd 1f       	adc	r29, r29
    1b80:	cc 0f       	add	r28, r28
    1b82:	dd 1f       	adc	r29, r29
    1b84:	c0 54       	subi	r28, 0x40	; 64
    1b86:	dd 4d       	sbci	r29, 0xDD	; 221
    1b88:	02 dd       	rcall	.-1532   	; 0x158e <udd_ep_get_job>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	02 e0       	ldi	r16, 0x02	; 2
    1b90:	05 93       	las	Z, r16
    1b92:	8c 91       	ld	r24, X
    1b94:	80 ff       	sbrs	r24, 0
    1b96:	12 c0       	rjmp	.+36     	; 0x1bbc <udd_ep_abort+0x66>
    1b98:	8e 7f       	andi	r24, 0xFE	; 254
    1b9a:	8c 93       	st	X, r24
    1b9c:	17 96       	adiw	r26, 0x07	; 7
    1b9e:	ed 91       	ld	r30, X+
    1ba0:	fc 91       	ld	r31, X
    1ba2:	18 97       	sbiw	r26, 0x08	; 8
    1ba4:	30 97       	sbiw	r30, 0x00	; 0
    1ba6:	51 f0       	breq	.+20     	; 0x1bbc <udd_ep_abort+0x66>
    1ba8:	ff 20       	and	r15, r15
    1baa:	19 f0       	breq	.+6      	; 0x1bb2 <udd_ep_abort+0x5c>
    1bac:	6e 81       	ldd	r22, Y+6	; 0x06
    1bae:	7f 81       	ldd	r23, Y+7	; 0x07
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <udd_ep_abort+0x60>
    1bb2:	6a 81       	ldd	r22, Y+2	; 0x02
    1bb4:	7b 81       	ldd	r23, Y+3	; 0x03
    1bb6:	41 2f       	mov	r20, r17
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	09 95       	icall
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	ff 90       	pop	r15
    1bc6:	08 95       	ret

00001bc8 <udd_ep_free>:
    1bc8:	cf 93       	push	r28
    1bca:	c8 2f       	mov	r28, r24
    1bcc:	c4 df       	rcall	.-120    	; 0x1b56 <udd_ep_abort>
    1bce:	ec 2f       	mov	r30, r28
    1bd0:	ef 70       	andi	r30, 0x0F	; 15
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	ee 0f       	add	r30, r30
    1bd6:	ff 1f       	adc	r31, r31
    1bd8:	8c 2f       	mov	r24, r28
    1bda:	99 27       	eor	r25, r25
    1bdc:	87 fd       	sbrc	r24, 7
    1bde:	90 95       	com	r25
    1be0:	88 27       	eor	r24, r24
    1be2:	99 0f       	add	r25, r25
    1be4:	88 1f       	adc	r24, r24
    1be6:	99 27       	eor	r25, r25
    1be8:	e8 0f       	add	r30, r24
    1bea:	f9 1f       	adc	r31, r25
    1bec:	ee 0f       	add	r30, r30
    1bee:	ff 1f       	adc	r31, r31
    1bf0:	ee 0f       	add	r30, r30
    1bf2:	ff 1f       	adc	r31, r31
    1bf4:	ee 0f       	add	r30, r30
    1bf6:	ff 1f       	adc	r31, r31
    1bf8:	e0 54       	subi	r30, 0x40	; 64
    1bfa:	fd 4d       	sbci	r31, 0xDD	; 221
    1bfc:	11 82       	std	Z+1, r1	; 0x01
    1bfe:	cf 91       	pop	r28
    1c00:	08 95       	ret

00001c02 <udd_ep_set_halt>:
    1c02:	0f 93       	push	r16
    1c04:	e8 2f       	mov	r30, r24
    1c06:	ef 70       	andi	r30, 0x0F	; 15
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	ee 0f       	add	r30, r30
    1c0c:	ff 1f       	adc	r31, r31
    1c0e:	28 2f       	mov	r18, r24
    1c10:	33 27       	eor	r19, r19
    1c12:	27 fd       	sbrc	r18, 7
    1c14:	30 95       	com	r19
    1c16:	22 27       	eor	r18, r18
    1c18:	33 0f       	add	r19, r19
    1c1a:	22 1f       	adc	r18, r18
    1c1c:	33 27       	eor	r19, r19
    1c1e:	e2 0f       	add	r30, r18
    1c20:	f3 1f       	adc	r31, r19
    1c22:	ee 0f       	add	r30, r30
    1c24:	ff 1f       	adc	r31, r31
    1c26:	ee 0f       	add	r30, r30
    1c28:	ff 1f       	adc	r31, r31
    1c2a:	ee 0f       	add	r30, r30
    1c2c:	ff 1f       	adc	r31, r31
    1c2e:	e0 54       	subi	r30, 0x40	; 64
    1c30:	fd 4d       	sbci	r31, 0xDD	; 221
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
    1c34:	94 60       	ori	r25, 0x04	; 4
    1c36:	91 83       	std	Z+1, r25	; 0x01
    1c38:	01 e0       	ldi	r16, 0x01	; 1
    1c3a:	06 93       	lac	Z, r16
    1c3c:	8c df       	rcall	.-232    	; 0x1b56 <udd_ep_abort>
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	0f 91       	pop	r16
    1c42:	08 95       	ret

00001c44 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1c44:	1f 92       	push	r1
    1c46:	0f 92       	push	r0
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	0f 92       	push	r0
    1c4c:	11 24       	eor	r1, r1
    1c4e:	0f 93       	push	r16
    1c50:	2f 93       	push	r18
    1c52:	3f 93       	push	r19
    1c54:	4f 93       	push	r20
    1c56:	5f 93       	push	r21
    1c58:	6f 93       	push	r22
    1c5a:	7f 93       	push	r23
    1c5c:	8f 93       	push	r24
    1c5e:	9f 93       	push	r25
    1c60:	af 93       	push	r26
    1c62:	bf 93       	push	r27
    1c64:	ef 93       	push	r30
    1c66:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1c68:	80 91 cb 04 	lds	r24, 0x04CB
    1c6c:	88 23       	and	r24, r24
    1c6e:	34 f4       	brge	.+12     	; 0x1c7c <__vector_125+0x38>
		udd_ack_start_of_frame_event();
    1c70:	80 e8       	ldi	r24, 0x80	; 128
    1c72:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    1c76:	0e 94 db 04 	call	0x9b6	; 0x9b6 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1c7a:	88 c0       	rjmp	.+272    	; 0x1d8c <__vector_125+0x148>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1c7c:	80 91 cb 04 	lds	r24, 0x04CB
    1c80:	82 ff       	sbrs	r24, 2
    1c82:	20 c0       	rjmp	.+64     	; 0x1cc4 <__vector_125+0x80>
		udd_ack_underflow_event();
    1c84:	84 e0       	ldi	r24, 0x04	; 4
    1c86:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    1c8a:	80 91 c8 22 	lds	r24, 0x22C8
    1c8e:	86 ff       	sbrs	r24, 6
    1c90:	7d c0       	rjmp	.+250    	; 0x1d8c <__vector_125+0x148>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1c92:	80 91 cc 04 	lds	r24, 0x04CC
    1c96:	81 fd       	sbrc	r24, 1
    1c98:	79 c0       	rjmp	.+242    	; 0x1d8c <__vector_125+0x148>
    1c9a:	94 dc       	rcall	.-1752   	; 0x15c4 <udd_ctrl_interrupt_tc_setup>
    1c9c:	81 11       	cpse	r24, r1
    1c9e:	76 c0       	rjmp	.+236    	; 0x1d8c <__vector_125+0x148>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1ca0:	80 91 b2 22 	lds	r24, 0x22B2
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	11 f4       	brne	.+4      	; 0x1cac <__vector_125+0x68>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1ca8:	c9 db       	rcall	.-2158   	; 0x143c <udd_ctrl_send_zlp_in>
    1caa:	70 c0       	rjmp	.+224    	; 0x1d8c <__vector_125+0x148>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1cac:	84 30       	cpi	r24, 0x04	; 4
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <__vector_125+0x6e>
    1cb0:	6d c0       	rjmp	.+218    	; 0x1d8c <__vector_125+0x148>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    1cb2:	e9 ec       	ldi	r30, 0xC9	; 201
    1cb4:	f2 e2       	ldi	r31, 0x22	; 34
    1cb6:	04 e0       	ldi	r16, 0x04	; 4
    1cb8:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1cba:	e1 ec       	ldi	r30, 0xC1	; 193
    1cbc:	f2 e2       	ldi	r31, 0x22	; 34
    1cbe:	04 e0       	ldi	r16, 0x04	; 4
    1cc0:	05 93       	las	Z, r16
    1cc2:	64 c0       	rjmp	.+200    	; 0x1d8c <__vector_125+0x148>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1cc4:	80 91 cb 04 	lds	r24, 0x04CB
    1cc8:	81 ff       	sbrs	r24, 1
    1cca:	5b c0       	rjmp	.+182    	; 0x1d82 <__vector_125+0x13e>
		udd_ack_overflow_event();
    1ccc:	82 e0       	ldi	r24, 0x02	; 2
    1cce:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    1cd2:	80 91 c0 22 	lds	r24, 0x22C0
    1cd6:	86 ff       	sbrs	r24, 6
    1cd8:	59 c0       	rjmp	.+178    	; 0x1d8c <__vector_125+0x148>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1cda:	80 91 cc 04 	lds	r24, 0x04CC
    1cde:	81 fd       	sbrc	r24, 1
    1ce0:	55 c0       	rjmp	.+170    	; 0x1d8c <__vector_125+0x148>
    1ce2:	70 dc       	rcall	.-1824   	; 0x15c4 <udd_ctrl_interrupt_tc_setup>
    1ce4:	81 11       	cpse	r24, r1
    1ce6:	52 c0       	rjmp	.+164    	; 0x1d8c <__vector_125+0x148>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1ce8:	80 91 b2 22 	lds	r24, 0x22B2
    1cec:	82 30       	cpi	r24, 0x02	; 2
    1cee:	41 f4       	brne	.+16     	; 0x1d00 <__vector_125+0xbc>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1cf0:	84 e0       	ldi	r24, 0x04	; 4
    1cf2:	80 93 b2 22 	sts	0x22B2, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    1cf6:	e0 ec       	ldi	r30, 0xC0	; 192
    1cf8:	f2 e2       	ldi	r31, 0x22	; 34
    1cfa:	02 e0       	ldi	r16, 0x02	; 2
    1cfc:	06 93       	lac	Z, r16
    1cfe:	46 c0       	rjmp	.+140    	; 0x1d8c <__vector_125+0x148>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1d00:	83 30       	cpi	r24, 0x03	; 3
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <__vector_125+0xc2>
    1d04:	43 c0       	rjmp	.+134    	; 0x1d8c <__vector_125+0x148>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1d06:	e9 ec       	ldi	r30, 0xC9	; 201
    1d08:	f2 e2       	ldi	r31, 0x22	; 34
    1d0a:	04 e0       	ldi	r16, 0x04	; 4
    1d0c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1d0e:	e1 ec       	ldi	r30, 0xC1	; 193
    1d10:	f2 e2       	ldi	r31, 0x22	; 34
    1d12:	04 e0       	ldi	r16, 0x04	; 4
    1d14:	05 93       	las	Z, r16
    1d16:	3a c0       	rjmp	.+116    	; 0x1d8c <__vector_125+0x148>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1d18:	80 e1       	ldi	r24, 0x10	; 16
    1d1a:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	1a df       	rcall	.-460    	; 0x1b56 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1d22:	81 e8       	ldi	r24, 0x81	; 129
    1d24:	18 df       	rcall	.-464    	; 0x1b56 <udd_ep_abort>
		}
#endif
		udc_reset();
    1d26:	0e 94 b4 04 	call	0x968	; 0x968 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1d2a:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1d2e:	e1 ec       	ldi	r30, 0xC1	; 193
    1d30:	f2 e2       	ldi	r31, 0x22	; 34
    1d32:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1d34:	96 e0       	ldi	r25, 0x06	; 6
    1d36:	90 93 c0 22 	sts	0x22C0, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1d3a:	83 e4       	ldi	r24, 0x43	; 67
    1d3c:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1d3e:	e9 ec       	ldi	r30, 0xC9	; 201
    1d40:	f2 e2       	ldi	r31, 0x22	; 34
    1d42:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1d44:	90 93 c8 22 	sts	0x22C8, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1d48:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    1d4a:	8e e6       	ldi	r24, 0x6E	; 110
    1d4c:	92 e2       	ldi	r25, 0x22	; 34
    1d4e:	80 93 c4 22 	sts	0x22C4, r24
    1d52:	90 93 c5 22 	sts	0x22C5, r25
		// Reset endpoint control management
		udd_ctrl_init();
    1d56:	39 db       	rcall	.-2446   	; 0x13ca <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    1d58:	19 c0       	rjmp	.+50     	; 0x1d8c <__vector_125+0x148>
	}

	if (udd_is_suspend_event()) {
    1d5a:	80 91 cb 04 	lds	r24, 0x04CB
    1d5e:	86 ff       	sbrs	r24, 6
    1d60:	06 c0       	rjmp	.+12     	; 0x1d6e <__vector_125+0x12a>
		udd_ack_suspend_event();
    1d62:	80 e4       	ldi	r24, 0x40	; 64
    1d64:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	10 db       	rcall	.-2528   	; 0x138c <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <__vector_125+0x148>
	}

	if (udd_is_resume_event()) {
    1d6e:	80 91 cb 04 	lds	r24, 0x04CB
    1d72:	85 ff       	sbrs	r24, 5
    1d74:	0b c0       	rjmp	.+22     	; 0x1d8c <__vector_125+0x148>
		udd_ack_resume_event();
    1d76:	80 e2       	ldi	r24, 0x20	; 32
    1d78:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	06 db       	rcall	.-2548   	; 0x138c <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1d80:	05 c0       	rjmp	.+10     	; 0x1d8c <__vector_125+0x148>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    1d82:	80 91 cb 04 	lds	r24, 0x04CB
    1d86:	84 ff       	sbrs	r24, 4
    1d88:	e8 cf       	rjmp	.-48     	; 0x1d5a <__vector_125+0x116>
    1d8a:	c6 cf       	rjmp	.-116    	; 0x1d18 <__vector_125+0xd4>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    1d8c:	ff 91       	pop	r31
    1d8e:	ef 91       	pop	r30
    1d90:	bf 91       	pop	r27
    1d92:	af 91       	pop	r26
    1d94:	9f 91       	pop	r25
    1d96:	8f 91       	pop	r24
    1d98:	7f 91       	pop	r23
    1d9a:	6f 91       	pop	r22
    1d9c:	5f 91       	pop	r21
    1d9e:	4f 91       	pop	r20
    1da0:	3f 91       	pop	r19
    1da2:	2f 91       	pop	r18
    1da4:	0f 91       	pop	r16
    1da6:	0f 90       	pop	r0
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	0f 90       	pop	r0
    1dac:	1f 90       	pop	r1
    1dae:	18 95       	reti

00001db0 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1db0:	1f 92       	push	r1
    1db2:	0f 92       	push	r0
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	0f 92       	push	r0
    1db8:	11 24       	eor	r1, r1
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	2f 93       	push	r18
    1dc0:	3f 93       	push	r19
    1dc2:	4f 93       	push	r20
    1dc4:	5f 93       	push	r21
    1dc6:	6f 93       	push	r22
    1dc8:	7f 93       	push	r23
    1dca:	8f 93       	push	r24
    1dcc:	9f 93       	push	r25
    1dce:	af 93       	push	r26
    1dd0:	bf 93       	push	r27
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	ef 93       	push	r30
    1dd8:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1dda:	80 91 cc 04 	lds	r24, 0x04CC
    1dde:	81 fd       	sbrc	r24, 1
    1de0:	03 c0       	rjmp	.+6      	; 0x1de8 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    1de2:	f0 db       	rcall	.-2080   	; 0x15c4 <udd_ctrl_interrupt_tc_setup>
    1de4:	81 11       	cpse	r24, r1
    1de6:	b8 c0       	rjmp	.+368    	; 0x1f58 <__vector_126+0x1a8>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1dee:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    1df2:	81 95       	neg	r24
    1df4:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    1df6:	e0 ec       	ldi	r30, 0xC0	; 192
    1df8:	f2 e2       	ldi	r31, 0x22	; 34
    1dfa:	e8 1b       	sub	r30, r24
    1dfc:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1dfe:	20 81       	ld	r18, Z
    1e00:	31 81       	ldd	r19, Z+1	; 0x01
    1e02:	20 5c       	subi	r18, 0xC0	; 192
    1e04:	32 42       	sbci	r19, 0x22	; 34
    1e06:	36 95       	lsr	r19
    1e08:	27 95       	ror	r18
    1e0a:	36 95       	lsr	r19
    1e0c:	27 95       	ror	r18
    1e0e:	36 95       	lsr	r19
    1e10:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    1e12:	82 2f       	mov	r24, r18
    1e14:	86 95       	lsr	r24
    1e16:	20 ff       	sbrs	r18, 0
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <__vector_126+0x6e>
    1e1a:	90 e8       	ldi	r25, 0x80	; 128
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <__vector_126+0x70>
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1e22:	e8 2f       	mov	r30, r24
    1e24:	ef 70       	andi	r30, 0x0F	; 15
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	ee 0f       	add	r30, r30
    1e2a:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	33 27       	eor	r19, r19
    1e30:	27 fd       	sbrc	r18, 7
    1e32:	30 95       	com	r19
    1e34:	22 27       	eor	r18, r18
    1e36:	33 0f       	add	r19, r19
    1e38:	22 1f       	adc	r18, r18
    1e3a:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1e3c:	e2 0f       	add	r30, r18
    1e3e:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    1e40:	ee 0f       	add	r30, r30
    1e42:	ff 1f       	adc	r31, r31
    1e44:	ee 0f       	add	r30, r30
    1e46:	ff 1f       	adc	r31, r31
    1e48:	ee 0f       	add	r30, r30
    1e4a:	ff 1f       	adc	r31, r31
    1e4c:	e0 54       	subi	r30, 0x40	; 64
    1e4e:	fd 4d       	sbci	r31, 0xDD	; 221
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1e50:	90 81       	ld	r25, Z
    1e52:	95 ff       	sbrs	r25, 5
    1e54:	81 c0       	rjmp	.+258    	; 0x1f58 <__vector_126+0x1a8>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1e56:	00 e2       	ldi	r16, 0x20	; 32
    1e58:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    1e5a:	81 11       	cpse	r24, r1
    1e5c:	78 c0       	rjmp	.+240    	; 0x1f4e <__vector_126+0x19e>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1e5e:	80 91 b2 22 	lds	r24, 0x22B2
    1e62:	84 30       	cpi	r24, 0x04	; 4
    1e64:	19 f4       	brne	.+6      	; 0x1e6c <__vector_126+0xbc>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    1e66:	f8 da       	rcall	.-2576   	; 0x1458 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1e68:	b0 da       	rcall	.-2720   	; 0x13ca <udd_ctrl_init>
    1e6a:	76 c0       	rjmp	.+236    	; 0x1f58 <__vector_126+0x1a8>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1e6c:	c0 91 c2 22 	lds	r28, 0x22C2
    1e70:	d0 91 c3 22 	lds	r29, 0x22C3

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1e74:	80 91 0d 23 	lds	r24, 0x230D
    1e78:	90 91 0e 23 	lds	r25, 0x230E
    1e7c:	00 91 ae 22 	lds	r16, 0x22AE
    1e80:	10 91 af 22 	lds	r17, 0x22AF
    1e84:	98 01       	movw	r18, r16
    1e86:	2c 0f       	add	r18, r28
    1e88:	3d 1f       	adc	r19, r29
    1e8a:	82 17       	cp	r24, r18
    1e8c:	93 07       	cpc	r25, r19
    1e8e:	18 f4       	brcc	.+6      	; 0x1e96 <__vector_126+0xe6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1e90:	ec 01       	movw	r28, r24
    1e92:	c0 1b       	sub	r28, r16
    1e94:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    1e96:	80 91 0b 23 	lds	r24, 0x230B
    1e9a:	90 91 0c 23 	lds	r25, 0x230C
    1e9e:	ae 01       	movw	r20, r28
    1ea0:	6e e6       	ldi	r22, 0x6E	; 110
    1ea2:	72 e2       	ldi	r23, 0x22	; 34
    1ea4:	80 0f       	add	r24, r16
    1ea6:	91 1f       	adc	r25, r17
    1ea8:	e5 d5       	rcall	.+3018   	; 0x2a74 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1eaa:	0c 0f       	add	r16, r28
    1eac:	1d 1f       	adc	r17, r29
    1eae:	00 93 ae 22 	sts	0x22AE, r16
    1eb2:	10 93 af 22 	sts	0x22AF, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1eb6:	c0 34       	cpi	r28, 0x40	; 64
    1eb8:	d1 05       	cpc	r29, r1
    1eba:	69 f4       	brne	.+26     	; 0x1ed6 <__vector_126+0x126>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1ebc:	80 91 b0 22 	lds	r24, 0x22B0
    1ec0:	90 91 b1 22 	lds	r25, 0x22B1
    1ec4:	80 0f       	add	r24, r16
    1ec6:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1ec8:	20 91 09 23 	lds	r18, 0x2309
    1ecc:	30 91 0a 23 	lds	r19, 0x230A
    1ed0:	82 17       	cp	r24, r18
    1ed2:	93 07       	cpc	r25, r19
    1ed4:	88 f0       	brcs	.+34     	; 0x1ef8 <__vector_126+0x148>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1ed6:	00 93 0d 23 	sts	0x230D, r16
    1eda:	10 93 0e 23 	sts	0x230E, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1ede:	e0 91 11 23 	lds	r30, 0x2311
    1ee2:	f0 91 12 23 	lds	r31, 0x2312
    1ee6:	30 97       	sbiw	r30, 0x00	; 0
    1ee8:	29 f0       	breq	.+10     	; 0x1ef4 <__vector_126+0x144>
			if (!udd_g_ctrlreq.over_under_run()) {
    1eea:	09 95       	icall
    1eec:	81 11       	cpse	r24, r1
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <__vector_126+0x144>
				// Stall ZLP
				udd_ctrl_stall_data();
    1ef0:	97 da       	rcall	.-2770   	; 0x1420 <udd_ctrl_stall_data>
    1ef2:	32 c0       	rjmp	.+100    	; 0x1f58 <__vector_126+0x1a8>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    1ef4:	a3 da       	rcall	.-2746   	; 0x143c <udd_ctrl_send_zlp_in>
    1ef6:	30 c0       	rjmp	.+96     	; 0x1f58 <__vector_126+0x1a8>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1ef8:	80 91 0d 23 	lds	r24, 0x230D
    1efc:	90 91 0e 23 	lds	r25, 0x230E
    1f00:	08 17       	cp	r16, r24
    1f02:	19 07       	cpc	r17, r25
    1f04:	f9 f4       	brne	.+62     	; 0x1f44 <__vector_126+0x194>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1f06:	e0 91 11 23 	lds	r30, 0x2311
    1f0a:	f0 91 12 23 	lds	r31, 0x2312
    1f0e:	30 97       	sbiw	r30, 0x00	; 0
    1f10:	11 f4       	brne	.+4      	; 0x1f16 <__vector_126+0x166>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    1f12:	86 da       	rcall	.-2804   	; 0x1420 <udd_ctrl_stall_data>
    1f14:	21 c0       	rjmp	.+66     	; 0x1f58 <__vector_126+0x1a8>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1f16:	09 95       	icall
    1f18:	81 11       	cpse	r24, r1
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <__vector_126+0x170>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1f1c:	81 da       	rcall	.-2814   	; 0x1420 <udd_ctrl_stall_data>
    1f1e:	1c c0       	rjmp	.+56     	; 0x1f58 <__vector_126+0x1a8>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1f20:	20 91 b0 22 	lds	r18, 0x22B0
    1f24:	30 91 b1 22 	lds	r19, 0x22B1
    1f28:	80 91 ae 22 	lds	r24, 0x22AE
    1f2c:	90 91 af 22 	lds	r25, 0x22AF
    1f30:	82 0f       	add	r24, r18
    1f32:	93 1f       	adc	r25, r19
    1f34:	80 93 b0 22 	sts	0x22B0, r24
    1f38:	90 93 b1 22 	sts	0x22B1, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1f3c:	10 92 ae 22 	sts	0x22AE, r1
    1f40:	10 92 af 22 	sts	0x22AF, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1f44:	e0 ec       	ldi	r30, 0xC0	; 192
    1f46:	f2 e2       	ldi	r31, 0x22	; 34
    1f48:	02 e0       	ldi	r16, 0x02	; 2
    1f4a:	06 93       	lac	Z, r16
    1f4c:	05 c0       	rjmp	.+10     	; 0x1f58 <__vector_126+0x1a8>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1f4e:	80 38       	cpi	r24, 0x80	; 128
    1f50:	11 f4       	brne	.+4      	; 0x1f56 <__vector_126+0x1a6>
		udd_ctrl_in_sent();
    1f52:	8a da       	rcall	.-2796   	; 0x1468 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1f54:	01 c0       	rjmp	.+2      	; 0x1f58 <__vector_126+0x1a8>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1f56:	a5 db       	rcall	.-2230   	; 0x16a2 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    1f58:	ff 91       	pop	r31
    1f5a:	ef 91       	pop	r30
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	bf 91       	pop	r27
    1f62:	af 91       	pop	r26
    1f64:	9f 91       	pop	r25
    1f66:	8f 91       	pop	r24
    1f68:	7f 91       	pop	r23
    1f6a:	6f 91       	pop	r22
    1f6c:	5f 91       	pop	r21
    1f6e:	4f 91       	pop	r20
    1f70:	3f 91       	pop	r19
    1f72:	2f 91       	pop	r18
    1f74:	1f 91       	pop	r17
    1f76:	0f 91       	pop	r16
    1f78:	0f 90       	pop	r0
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	0f 90       	pop	r0
    1f7e:	1f 90       	pop	r1
    1f80:	18 95       	reti

00001f82 <bluetooth_init>:
void bluetooth_init_interrupt(void)
{
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
	USARTD0.CTRLA = USART_RXCINTLVL_HI_gc;
	cpu_irq_enable();
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	27 97       	sbiw	r28, 0x07	; 7
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	88 e0       	ldi	r24, 0x08	; 8
    1f92:	e0 e6       	ldi	r30, 0x60	; 96
    1f94:	f6 e0       	ldi	r31, 0x06	; 6
    1f96:	81 83       	std	Z+1, r24	; 0x01
    1f98:	80 91 80 20 	lds	r24, 0x2080
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
    1f9e:	80 91 81 20 	lds	r24, 0x2081
    1fa2:	8e 83       	std	Y+6, r24	; 0x06
    1fa4:	80 91 82 20 	lds	r24, 0x2082
    1fa8:	8f 83       	std	Y+7, r24	; 0x07
    1faa:	80 91 7c 20 	lds	r24, 0x207C
    1fae:	90 91 7d 20 	lds	r25, 0x207D
    1fb2:	a0 91 7e 20 	lds	r26, 0x207E
    1fb6:	b0 91 7f 20 	lds	r27, 0x207F
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	9a 83       	std	Y+2, r25	; 0x02
    1fbe:	ab 83       	std	Y+3, r26	; 0x03
    1fc0:	bc 83       	std	Y+4, r27	; 0x04
    1fc2:	60 e1       	ldi	r22, 0x10	; 16
    1fc4:	84 e0       	ldi	r24, 0x04	; 4
    1fc6:	0e 94 98 01 	call	0x330	; 0x330 <sysclk_enable_module>
    1fca:	be 01       	movw	r22, r28
    1fcc:	6f 5f       	subi	r22, 0xFF	; 255
    1fce:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd0:	80 ea       	ldi	r24, 0xA0	; 160
    1fd2:	99 e0       	ldi	r25, 0x09	; 9
    1fd4:	ee d8       	rcall	.-3620   	; 0x11b2 <usart_init_rs232>
    1fd6:	83 e8       	ldi	r24, 0x83	; 131
    1fd8:	90 e2       	ldi	r25, 0x20	; 32
    1fda:	80 93 15 23 	sts	0x2315, r24
    1fde:	90 93 16 23 	sts	0x2316, r25
    1fe2:	80 93 13 23 	sts	0x2313, r24
    1fe6:	90 93 14 23 	sts	0x2314, r25
    1fea:	27 96       	adiw	r28, 0x07	; 7
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	df 91       	pop	r29
    1ff2:	cf 91       	pop	r28
    1ff4:	08 95       	ret

00001ff6 <bluetooth_putchar>:
}

void bluetooth_putchar(char a)
{
	usart_putchar(BLUETOOTH,a);
    1ff6:	68 2f       	mov	r22, r24
    1ff8:	80 ea       	ldi	r24, 0xA0	; 160
    1ffa:	99 e0       	ldi	r25, 0x09	; 9
    1ffc:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <usart_putchar>
    2000:	08 95       	ret

00002002 <bluetooth_putchar_printf>:
}


#ifdef PRINTF_BLUETOOTH

int bluetooth_putchar_printf(char var, FILE *stream) {
    2002:	cf 93       	push	r28
    2004:	c8 2f       	mov	r28, r24
	// translate \n to \r for br@y++ terminal
	if (var == '\n') bluetooth_putchar('\r');
    2006:	8a 30       	cpi	r24, 0x0A	; 10
    2008:	11 f4       	brne	.+4      	; 0x200e <bluetooth_putchar_printf+0xc>
    200a:	8d e0       	ldi	r24, 0x0D	; 13
    200c:	f4 df       	rcall	.-24     	; 0x1ff6 <bluetooth_putchar>
	bluetooth_putchar(var);
    200e:	8c 2f       	mov	r24, r28
    2010:	f2 df       	rcall	.-28     	; 0x1ff6 <bluetooth_putchar>
	return 0;
}
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	cf 91       	pop	r28
    2018:	08 95       	ret

0000201a <bluetooth_getchar>:
	usart_putchar(BLUETOOTH,a);
}

char bluetooth_getchar(void)
{
	return usart_getchar(BLUETOOTH);
    201a:	80 ea       	ldi	r24, 0xA0	; 160
    201c:	99 e0       	ldi	r25, 0x09	; 9
    201e:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <usart_getchar>
}
    2022:	08 95       	ret

00002024 <bluetooth_getchar_scanf>:
	bluetooth_putchar(var);
	return 0;
}

int bluetooth_getchar_scanf(FILE *stream)
{
    2024:	1f 93       	push	r17
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	ec 01       	movw	r28, r24
	uint8_t u8Data;
	// Wait for byte to be received
	u8Data=bluetooth_getchar();
    202c:	f6 df       	rcall	.-20     	; 0x201a <bluetooth_getchar>
    202e:	18 2f       	mov	r17, r24
	//echo input data
	bluetooth_putchar_printf(u8Data,stream);
    2030:	be 01       	movw	r22, r28
    2032:	e7 df       	rcall	.-50     	; 0x2002 <bluetooth_putchar_printf>
	// Return received data
	return u8Data;
}
    2034:	81 2f       	mov	r24, r17
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	1f 91       	pop	r17
    203e:	08 95       	ret

00002040 <init_DomOctopus>:

#include "../DomOctopus.h"

void init_DomOctopus(void)
{
	sysclk_init();
    2040:	0e 94 23 01 	call	0x246	; 0x246 <sysclk_init>
	ioport_init();
	leds_init();
    2044:	15 d0       	rcall	.+42     	; 0x2070 <leds_init>
	switch_init();
    2046:	8e d2       	rcall	.+1308   	; 0x2564 <switch_init>
	
	#ifdef ENABLE_BLUETOOTH
		bluetooth_init();
    2048:	9c df       	rcall	.-200    	; 0x1f82 <bluetooth_init>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    204a:	e0 e4       	ldi	r30, 0x40	; 64
    204c:	f6 e0       	ldi	r31, 0x06	; 6
    204e:	90 e1       	ldi	r25, 0x10	; 16
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	80 e2       	ldi	r24, 0x20	; 32
    2054:	81 83       	std	Z+1, r24	; 0x01
    2056:	20 e4       	ldi	r18, 0x40	; 64
    2058:	21 83       	std	Z+1, r18	; 0x01
    205a:	20 e8       	ldi	r18, 0x80	; 128
    205c:	21 83       	std	Z+1, r18	; 0x01
    205e:	e0 e6       	ldi	r30, 0x60	; 96
    2060:	f6 e0       	ldi	r31, 0x06	; 6
    2062:	21 e0       	ldi	r18, 0x01	; 1
    2064:	21 83       	std	Z+1, r18	; 0x01
    2066:	22 e0       	ldi	r18, 0x02	; 2
    2068:	21 83       	std	Z+1, r18	; 0x01
    206a:	91 83       	std	Z+1, r25	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    206c:	82 83       	std	Z+2, r24	; 0x02
    206e:	08 95       	ret

00002070 <leds_init>:
	led1( ( leds & (1<<0) ) && (1<<0)  );
	led2( ( leds & (1<<1) ) && (1<<1)  );
	led3( ( leds & (1<<2) ) && (1<<2)  );
	led4( ( leds & (1<<3) ) && (1<<3)  );

}
    2070:	e0 e0       	ldi	r30, 0x00	; 0
    2072:	f6 e0       	ldi	r31, 0x06	; 6
    2074:	88 e0       	ldi	r24, 0x08	; 8
    2076:	81 83       	std	Z+1, r24	; 0x01
    2078:	80 e1       	ldi	r24, 0x10	; 16
    207a:	81 83       	std	Z+1, r24	; 0x01
    207c:	80 e2       	ldi	r24, 0x20	; 32
    207e:	81 83       	std	Z+1, r24	; 0x01
    2080:	80 e4       	ldi	r24, 0x40	; 64
    2082:	81 83       	std	Z+1, r24	; 0x01
    2084:	08 95       	ret

00002086 <led1>:
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	91 05       	cpc	r25, r1
    208a:	31 f0       	breq	.+12     	; 0x2098 <led1+0x12>
    208c:	82 30       	cpi	r24, 0x02	; 2
    208e:	91 05       	cpc	r25, r1
    2090:	69 f0       	breq	.+26     	; 0x20ac <led1+0x26>
    2092:	89 2b       	or	r24, r25
    2094:	79 f4       	brne	.+30     	; 0x20b4 <led1+0x2e>
    2096:	05 c0       	rjmp	.+10     	; 0x20a2 <led1+0x1c>
    2098:	88 e0       	ldi	r24, 0x08	; 8
    209a:	e0 e0       	ldi	r30, 0x00	; 0
    209c:	f6 e0       	ldi	r31, 0x06	; 6
    209e:	85 83       	std	Z+5, r24	; 0x05
    20a0:	08 95       	ret
    20a2:	88 e0       	ldi	r24, 0x08	; 8
    20a4:	e0 e0       	ldi	r30, 0x00	; 0
    20a6:	f6 e0       	ldi	r31, 0x06	; 6
    20a8:	86 83       	std	Z+6, r24	; 0x06
    20aa:	08 95       	ret
    20ac:	88 e0       	ldi	r24, 0x08	; 8
    20ae:	e0 e0       	ldi	r30, 0x00	; 0
    20b0:	f6 e0       	ldi	r31, 0x06	; 6
    20b2:	87 83       	std	Z+7, r24	; 0x07
    20b4:	08 95       	ret

000020b6 <led2>:
    20b6:	81 30       	cpi	r24, 0x01	; 1
    20b8:	91 05       	cpc	r25, r1
    20ba:	31 f0       	breq	.+12     	; 0x20c8 <led2+0x12>
    20bc:	82 30       	cpi	r24, 0x02	; 2
    20be:	91 05       	cpc	r25, r1
    20c0:	69 f0       	breq	.+26     	; 0x20dc <led2+0x26>
    20c2:	89 2b       	or	r24, r25
    20c4:	79 f4       	brne	.+30     	; 0x20e4 <led2+0x2e>
    20c6:	05 c0       	rjmp	.+10     	; 0x20d2 <led2+0x1c>
    20c8:	80 e1       	ldi	r24, 0x10	; 16
    20ca:	e0 e0       	ldi	r30, 0x00	; 0
    20cc:	f6 e0       	ldi	r31, 0x06	; 6
    20ce:	85 83       	std	Z+5, r24	; 0x05
    20d0:	08 95       	ret
    20d2:	80 e1       	ldi	r24, 0x10	; 16
    20d4:	e0 e0       	ldi	r30, 0x00	; 0
    20d6:	f6 e0       	ldi	r31, 0x06	; 6
    20d8:	86 83       	std	Z+6, r24	; 0x06
    20da:	08 95       	ret
    20dc:	80 e1       	ldi	r24, 0x10	; 16
    20de:	e0 e0       	ldi	r30, 0x00	; 0
    20e0:	f6 e0       	ldi	r31, 0x06	; 6
    20e2:	87 83       	std	Z+7, r24	; 0x07
    20e4:	08 95       	ret

000020e6 <led3>:
    20e6:	81 30       	cpi	r24, 0x01	; 1
    20e8:	91 05       	cpc	r25, r1
    20ea:	31 f0       	breq	.+12     	; 0x20f8 <led3+0x12>
    20ec:	82 30       	cpi	r24, 0x02	; 2
    20ee:	91 05       	cpc	r25, r1
    20f0:	69 f0       	breq	.+26     	; 0x210c <led3+0x26>
    20f2:	89 2b       	or	r24, r25
    20f4:	79 f4       	brne	.+30     	; 0x2114 <led3+0x2e>
    20f6:	05 c0       	rjmp	.+10     	; 0x2102 <led3+0x1c>
    20f8:	80 e2       	ldi	r24, 0x20	; 32
    20fa:	e0 e0       	ldi	r30, 0x00	; 0
    20fc:	f6 e0       	ldi	r31, 0x06	; 6
    20fe:	85 83       	std	Z+5, r24	; 0x05
    2100:	08 95       	ret
    2102:	80 e2       	ldi	r24, 0x20	; 32
    2104:	e0 e0       	ldi	r30, 0x00	; 0
    2106:	f6 e0       	ldi	r31, 0x06	; 6
    2108:	86 83       	std	Z+6, r24	; 0x06
    210a:	08 95       	ret
    210c:	80 e2       	ldi	r24, 0x20	; 32
    210e:	e0 e0       	ldi	r30, 0x00	; 0
    2110:	f6 e0       	ldi	r31, 0x06	; 6
    2112:	87 83       	std	Z+7, r24	; 0x07
    2114:	08 95       	ret

00002116 <led4>:
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	91 05       	cpc	r25, r1
    211a:	31 f0       	breq	.+12     	; 0x2128 <led4+0x12>
    211c:	82 30       	cpi	r24, 0x02	; 2
    211e:	91 05       	cpc	r25, r1
    2120:	69 f0       	breq	.+26     	; 0x213c <led4+0x26>
    2122:	89 2b       	or	r24, r25
    2124:	79 f4       	brne	.+30     	; 0x2144 <led4+0x2e>
    2126:	05 c0       	rjmp	.+10     	; 0x2132 <led4+0x1c>
    2128:	80 e4       	ldi	r24, 0x40	; 64
    212a:	e0 e0       	ldi	r30, 0x00	; 0
    212c:	f6 e0       	ldi	r31, 0x06	; 6
    212e:	85 83       	std	Z+5, r24	; 0x05
    2130:	08 95       	ret
    2132:	80 e4       	ldi	r24, 0x40	; 64
    2134:	e0 e0       	ldi	r30, 0x00	; 0
    2136:	f6 e0       	ldi	r31, 0x06	; 6
    2138:	86 83       	std	Z+6, r24	; 0x06
    213a:	08 95       	ret
    213c:	80 e4       	ldi	r24, 0x40	; 64
    213e:	e0 e0       	ldi	r30, 0x00	; 0
    2140:	f6 e0       	ldi	r31, 0x06	; 6
    2142:	87 83       	std	Z+7, r24	; 0x07
    2144:	08 95       	ret

00002146 <animation>:
	}
}


void animation(void)
{
    2146:	af 92       	push	r10
    2148:	bf 92       	push	r11
    214a:	cf 92       	push	r12
    214c:	df 92       	push	r13
    214e:	ef 92       	push	r14
    2150:	ff 92       	push	r15
    2152:	0f 93       	push	r16
    2154:	1f 93       	push	r17
    2156:	cf 93       	push	r28
    2158:	df 93       	push	r29
    215a:	00 d0       	rcall	.+0      	; 0x215c <animation+0x16>
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
	volatile int i;
	for(i = 50;i<ANIMATION_MAX;i+=15)
    2160:	82 e3       	ldi	r24, 0x32	; 50
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	9a 81       	ldd	r25, Y+2	; 0x02
    216c:	84 36       	cpi	r24, 0x64	; 100
    216e:	91 05       	cpc	r25, r1
    2170:	0c f0       	brlt	.+2      	; 0x2174 <animation+0x2e>
    2172:	eb c1       	rjmp	.+982    	; 0x254a <animation+0x404>
	{
		led1(ON);
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	86 df       	rcall	.-244    	; 0x2086 <led1>
		delay_ms(i);
    217a:	e9 81       	ldd	r30, Y+1	; 0x01
    217c:	fa 81       	ldd	r31, Y+2	; 0x02
    217e:	9f 2f       	mov	r25, r31
    2180:	99 0f       	add	r25, r25
    2182:	99 0b       	sbc	r25, r25
    2184:	a1 2c       	mov	r10, r1
    2186:	0f 2e       	mov	r0, r31
    2188:	fc e6       	ldi	r31, 0x6C	; 108
    218a:	bf 2e       	mov	r11, r31
    218c:	f0 2d       	mov	r31, r0
    218e:	0f 2e       	mov	r0, r31
    2190:	fc ed       	ldi	r31, 0xDC	; 220
    2192:	cf 2e       	mov	r12, r31
    2194:	f0 2d       	mov	r31, r0
    2196:	68 94       	set
    2198:	dd 24       	eor	r13, r13
    219a:	d1 f8       	bld	r13, 1
    219c:	e1 2c       	mov	r14, r1
    219e:	f1 2c       	mov	r15, r1
    21a0:	00 e0       	ldi	r16, 0x00	; 0
    21a2:	10 e0       	ldi	r17, 0x00	; 0
    21a4:	2e 2f       	mov	r18, r30
    21a6:	3f 2f       	mov	r19, r31
    21a8:	49 2f       	mov	r20, r25
    21aa:	59 2f       	mov	r21, r25
    21ac:	69 2f       	mov	r22, r25
    21ae:	79 2f       	mov	r23, r25
    21b0:	89 2f       	mov	r24, r25
    21b2:	00 d4       	rcall	.+2048   	; 0x29b4 <__muldi3>
    21b4:	29 51       	subi	r18, 0x19	; 25
    21b6:	3c 4f       	sbci	r19, 0xFC	; 252
    21b8:	4f 4f       	sbci	r20, 0xFF	; 255
    21ba:	5f 4f       	sbci	r21, 0xFF	; 255
    21bc:	6f 4f       	sbci	r22, 0xFF	; 255
    21be:	7f 4f       	sbci	r23, 0xFF	; 255
    21c0:	8f 4f       	sbci	r24, 0xFF	; 255
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	1c d3       	rcall	.+1592   	; 0x27fe <__floatundisf>
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e8       	ldi	r19, 0x80	; 128
    21ca:	4b eb       	ldi	r20, 0xBB	; 187
    21cc:	55 e4       	ldi	r21, 0x45	; 69
    21ce:	75 d2       	rcall	.+1258   	; 0x26ba <__divsf3>
    21d0:	e1 d2       	rcall	.+1474   	; 0x2794 <__fixunssfdi>
    21d2:	f2 2f       	mov	r31, r18
    21d4:	e3 2f       	mov	r30, r19
    21d6:	8f 2f       	mov	r24, r31
    21d8:	9e 2f       	mov	r25, r30
    21da:	a4 2f       	mov	r26, r20
    21dc:	b5 2f       	mov	r27, r21
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	a1 09       	sbc	r26, r1
    21e2:	b1 09       	sbc	r27, r1
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	a1 05       	cpc	r26, r1
    21e8:	b1 05       	cpc	r27, r1
    21ea:	c9 f7       	brne	.-14     	; 0x21de <animation+0x98>
		led2(ON);
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	62 df       	rcall	.-316    	; 0x20b6 <led2>
		delay_ms(i);
    21f2:	e9 81       	ldd	r30, Y+1	; 0x01
    21f4:	fa 81       	ldd	r31, Y+2	; 0x02
    21f6:	9f 2f       	mov	r25, r31
    21f8:	99 0f       	add	r25, r25
    21fa:	99 0b       	sbc	r25, r25
    21fc:	a1 2c       	mov	r10, r1
    21fe:	0f 2e       	mov	r0, r31
    2200:	fc e6       	ldi	r31, 0x6C	; 108
    2202:	bf 2e       	mov	r11, r31
    2204:	f0 2d       	mov	r31, r0
    2206:	0f 2e       	mov	r0, r31
    2208:	fc ed       	ldi	r31, 0xDC	; 220
    220a:	cf 2e       	mov	r12, r31
    220c:	f0 2d       	mov	r31, r0
    220e:	68 94       	set
    2210:	dd 24       	eor	r13, r13
    2212:	d1 f8       	bld	r13, 1
    2214:	e1 2c       	mov	r14, r1
    2216:	f1 2c       	mov	r15, r1
    2218:	00 e0       	ldi	r16, 0x00	; 0
    221a:	10 e0       	ldi	r17, 0x00	; 0
    221c:	2e 2f       	mov	r18, r30
    221e:	3f 2f       	mov	r19, r31
    2220:	49 2f       	mov	r20, r25
    2222:	59 2f       	mov	r21, r25
    2224:	69 2f       	mov	r22, r25
    2226:	79 2f       	mov	r23, r25
    2228:	89 2f       	mov	r24, r25
    222a:	c4 d3       	rcall	.+1928   	; 0x29b4 <__muldi3>
    222c:	29 51       	subi	r18, 0x19	; 25
    222e:	3c 4f       	sbci	r19, 0xFC	; 252
    2230:	4f 4f       	sbci	r20, 0xFF	; 255
    2232:	5f 4f       	sbci	r21, 0xFF	; 255
    2234:	6f 4f       	sbci	r22, 0xFF	; 255
    2236:	7f 4f       	sbci	r23, 0xFF	; 255
    2238:	8f 4f       	sbci	r24, 0xFF	; 255
    223a:	9f 4f       	sbci	r25, 0xFF	; 255
    223c:	e0 d2       	rcall	.+1472   	; 0x27fe <__floatundisf>
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e8       	ldi	r19, 0x80	; 128
    2242:	4b eb       	ldi	r20, 0xBB	; 187
    2244:	55 e4       	ldi	r21, 0x45	; 69
    2246:	39 d2       	rcall	.+1138   	; 0x26ba <__divsf3>
    2248:	a5 d2       	rcall	.+1354   	; 0x2794 <__fixunssfdi>
    224a:	f2 2f       	mov	r31, r18
    224c:	e3 2f       	mov	r30, r19
    224e:	8f 2f       	mov	r24, r31
    2250:	9e 2f       	mov	r25, r30
    2252:	a4 2f       	mov	r26, r20
    2254:	b5 2f       	mov	r27, r21
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	a1 09       	sbc	r26, r1
    225a:	b1 09       	sbc	r27, r1
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	a1 05       	cpc	r26, r1
    2260:	b1 05       	cpc	r27, r1
    2262:	c9 f7       	brne	.-14     	; 0x2256 <animation+0x110>
		led3(ON);
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	3e df       	rcall	.-388    	; 0x20e6 <led3>
		delay_ms(i);
    226a:	e9 81       	ldd	r30, Y+1	; 0x01
    226c:	fa 81       	ldd	r31, Y+2	; 0x02
    226e:	9f 2f       	mov	r25, r31
    2270:	99 0f       	add	r25, r25
    2272:	99 0b       	sbc	r25, r25
    2274:	a1 2c       	mov	r10, r1
    2276:	0f 2e       	mov	r0, r31
    2278:	fc e6       	ldi	r31, 0x6C	; 108
    227a:	bf 2e       	mov	r11, r31
    227c:	f0 2d       	mov	r31, r0
    227e:	0f 2e       	mov	r0, r31
    2280:	fc ed       	ldi	r31, 0xDC	; 220
    2282:	cf 2e       	mov	r12, r31
    2284:	f0 2d       	mov	r31, r0
    2286:	68 94       	set
    2288:	dd 24       	eor	r13, r13
    228a:	d1 f8       	bld	r13, 1
    228c:	e1 2c       	mov	r14, r1
    228e:	f1 2c       	mov	r15, r1
    2290:	00 e0       	ldi	r16, 0x00	; 0
    2292:	10 e0       	ldi	r17, 0x00	; 0
    2294:	2e 2f       	mov	r18, r30
    2296:	3f 2f       	mov	r19, r31
    2298:	49 2f       	mov	r20, r25
    229a:	59 2f       	mov	r21, r25
    229c:	69 2f       	mov	r22, r25
    229e:	79 2f       	mov	r23, r25
    22a0:	89 2f       	mov	r24, r25
    22a2:	88 d3       	rcall	.+1808   	; 0x29b4 <__muldi3>
    22a4:	29 51       	subi	r18, 0x19	; 25
    22a6:	3c 4f       	sbci	r19, 0xFC	; 252
    22a8:	4f 4f       	sbci	r20, 0xFF	; 255
    22aa:	5f 4f       	sbci	r21, 0xFF	; 255
    22ac:	6f 4f       	sbci	r22, 0xFF	; 255
    22ae:	7f 4f       	sbci	r23, 0xFF	; 255
    22b0:	8f 4f       	sbci	r24, 0xFF	; 255
    22b2:	9f 4f       	sbci	r25, 0xFF	; 255
    22b4:	a4 d2       	rcall	.+1352   	; 0x27fe <__floatundisf>
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e8       	ldi	r19, 0x80	; 128
    22ba:	4b eb       	ldi	r20, 0xBB	; 187
    22bc:	55 e4       	ldi	r21, 0x45	; 69
    22be:	fd d1       	rcall	.+1018   	; 0x26ba <__divsf3>
    22c0:	69 d2       	rcall	.+1234   	; 0x2794 <__fixunssfdi>
    22c2:	f2 2f       	mov	r31, r18
    22c4:	e3 2f       	mov	r30, r19
    22c6:	8f 2f       	mov	r24, r31
    22c8:	9e 2f       	mov	r25, r30
    22ca:	a4 2f       	mov	r26, r20
    22cc:	b5 2f       	mov	r27, r21
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	a1 09       	sbc	r26, r1
    22d2:	b1 09       	sbc	r27, r1
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	a1 05       	cpc	r26, r1
    22d8:	b1 05       	cpc	r27, r1
    22da:	c9 f7       	brne	.-14     	; 0x22ce <animation+0x188>
		led4(ON);
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	1a df       	rcall	.-460    	; 0x2116 <led4>
		delay_ms(i);
    22e2:	e9 81       	ldd	r30, Y+1	; 0x01
    22e4:	fa 81       	ldd	r31, Y+2	; 0x02
    22e6:	9f 2f       	mov	r25, r31
    22e8:	99 0f       	add	r25, r25
    22ea:	99 0b       	sbc	r25, r25
    22ec:	a1 2c       	mov	r10, r1
    22ee:	0f 2e       	mov	r0, r31
    22f0:	fc e6       	ldi	r31, 0x6C	; 108
    22f2:	bf 2e       	mov	r11, r31
    22f4:	f0 2d       	mov	r31, r0
    22f6:	0f 2e       	mov	r0, r31
    22f8:	fc ed       	ldi	r31, 0xDC	; 220
    22fa:	cf 2e       	mov	r12, r31
    22fc:	f0 2d       	mov	r31, r0
    22fe:	68 94       	set
    2300:	dd 24       	eor	r13, r13
    2302:	d1 f8       	bld	r13, 1
    2304:	e1 2c       	mov	r14, r1
    2306:	f1 2c       	mov	r15, r1
    2308:	00 e0       	ldi	r16, 0x00	; 0
    230a:	10 e0       	ldi	r17, 0x00	; 0
    230c:	2e 2f       	mov	r18, r30
    230e:	3f 2f       	mov	r19, r31
    2310:	49 2f       	mov	r20, r25
    2312:	59 2f       	mov	r21, r25
    2314:	69 2f       	mov	r22, r25
    2316:	79 2f       	mov	r23, r25
    2318:	89 2f       	mov	r24, r25
    231a:	4c d3       	rcall	.+1688   	; 0x29b4 <__muldi3>
    231c:	29 51       	subi	r18, 0x19	; 25
    231e:	3c 4f       	sbci	r19, 0xFC	; 252
    2320:	4f 4f       	sbci	r20, 0xFF	; 255
    2322:	5f 4f       	sbci	r21, 0xFF	; 255
    2324:	6f 4f       	sbci	r22, 0xFF	; 255
    2326:	7f 4f       	sbci	r23, 0xFF	; 255
    2328:	8f 4f       	sbci	r24, 0xFF	; 255
    232a:	9f 4f       	sbci	r25, 0xFF	; 255
    232c:	68 d2       	rcall	.+1232   	; 0x27fe <__floatundisf>
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e8       	ldi	r19, 0x80	; 128
    2332:	4b eb       	ldi	r20, 0xBB	; 187
    2334:	55 e4       	ldi	r21, 0x45	; 69
    2336:	c1 d1       	rcall	.+898    	; 0x26ba <__divsf3>
    2338:	2d d2       	rcall	.+1114   	; 0x2794 <__fixunssfdi>
    233a:	f2 2f       	mov	r31, r18
    233c:	e3 2f       	mov	r30, r19
    233e:	8f 2f       	mov	r24, r31
    2340:	9e 2f       	mov	r25, r30
    2342:	a4 2f       	mov	r26, r20
    2344:	b5 2f       	mov	r27, r21
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	a1 09       	sbc	r26, r1
    234a:	b1 09       	sbc	r27, r1
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	a1 05       	cpc	r26, r1
    2350:	b1 05       	cpc	r27, r1
    2352:	c9 f7       	brne	.-14     	; 0x2346 <animation+0x200>
		
		led1(OFF);
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	96 de       	rcall	.-724    	; 0x2086 <led1>
		delay_ms(i);
    235a:	e9 81       	ldd	r30, Y+1	; 0x01
    235c:	fa 81       	ldd	r31, Y+2	; 0x02
    235e:	9f 2f       	mov	r25, r31
    2360:	99 0f       	add	r25, r25
    2362:	99 0b       	sbc	r25, r25
    2364:	a1 2c       	mov	r10, r1
    2366:	0f 2e       	mov	r0, r31
    2368:	fc e6       	ldi	r31, 0x6C	; 108
    236a:	bf 2e       	mov	r11, r31
    236c:	f0 2d       	mov	r31, r0
    236e:	0f 2e       	mov	r0, r31
    2370:	fc ed       	ldi	r31, 0xDC	; 220
    2372:	cf 2e       	mov	r12, r31
    2374:	f0 2d       	mov	r31, r0
    2376:	68 94       	set
    2378:	dd 24       	eor	r13, r13
    237a:	d1 f8       	bld	r13, 1
    237c:	e1 2c       	mov	r14, r1
    237e:	f1 2c       	mov	r15, r1
    2380:	00 e0       	ldi	r16, 0x00	; 0
    2382:	10 e0       	ldi	r17, 0x00	; 0
    2384:	2e 2f       	mov	r18, r30
    2386:	3f 2f       	mov	r19, r31
    2388:	49 2f       	mov	r20, r25
    238a:	59 2f       	mov	r21, r25
    238c:	69 2f       	mov	r22, r25
    238e:	79 2f       	mov	r23, r25
    2390:	89 2f       	mov	r24, r25
    2392:	10 d3       	rcall	.+1568   	; 0x29b4 <__muldi3>
    2394:	29 51       	subi	r18, 0x19	; 25
    2396:	3c 4f       	sbci	r19, 0xFC	; 252
    2398:	4f 4f       	sbci	r20, 0xFF	; 255
    239a:	5f 4f       	sbci	r21, 0xFF	; 255
    239c:	6f 4f       	sbci	r22, 0xFF	; 255
    239e:	7f 4f       	sbci	r23, 0xFF	; 255
    23a0:	8f 4f       	sbci	r24, 0xFF	; 255
    23a2:	9f 4f       	sbci	r25, 0xFF	; 255
    23a4:	2c d2       	rcall	.+1112   	; 0x27fe <__floatundisf>
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e8       	ldi	r19, 0x80	; 128
    23aa:	4b eb       	ldi	r20, 0xBB	; 187
    23ac:	55 e4       	ldi	r21, 0x45	; 69
    23ae:	85 d1       	rcall	.+778    	; 0x26ba <__divsf3>
    23b0:	f1 d1       	rcall	.+994    	; 0x2794 <__fixunssfdi>
    23b2:	f2 2f       	mov	r31, r18
    23b4:	e3 2f       	mov	r30, r19
    23b6:	8f 2f       	mov	r24, r31
    23b8:	9e 2f       	mov	r25, r30
    23ba:	a4 2f       	mov	r26, r20
    23bc:	b5 2f       	mov	r27, r21
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	a1 09       	sbc	r26, r1
    23c2:	b1 09       	sbc	r27, r1
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	a1 05       	cpc	r26, r1
    23c8:	b1 05       	cpc	r27, r1
    23ca:	c9 f7       	brne	.-14     	; 0x23be <animation+0x278>
		led2(OFF);
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	72 de       	rcall	.-796    	; 0x20b6 <led2>
		delay_ms(i);
    23d2:	e9 81       	ldd	r30, Y+1	; 0x01
    23d4:	fa 81       	ldd	r31, Y+2	; 0x02
    23d6:	9f 2f       	mov	r25, r31
    23d8:	99 0f       	add	r25, r25
    23da:	99 0b       	sbc	r25, r25
    23dc:	a1 2c       	mov	r10, r1
    23de:	0f 2e       	mov	r0, r31
    23e0:	fc e6       	ldi	r31, 0x6C	; 108
    23e2:	bf 2e       	mov	r11, r31
    23e4:	f0 2d       	mov	r31, r0
    23e6:	0f 2e       	mov	r0, r31
    23e8:	fc ed       	ldi	r31, 0xDC	; 220
    23ea:	cf 2e       	mov	r12, r31
    23ec:	f0 2d       	mov	r31, r0
    23ee:	68 94       	set
    23f0:	dd 24       	eor	r13, r13
    23f2:	d1 f8       	bld	r13, 1
    23f4:	e1 2c       	mov	r14, r1
    23f6:	f1 2c       	mov	r15, r1
    23f8:	00 e0       	ldi	r16, 0x00	; 0
    23fa:	10 e0       	ldi	r17, 0x00	; 0
    23fc:	2e 2f       	mov	r18, r30
    23fe:	3f 2f       	mov	r19, r31
    2400:	49 2f       	mov	r20, r25
    2402:	59 2f       	mov	r21, r25
    2404:	69 2f       	mov	r22, r25
    2406:	79 2f       	mov	r23, r25
    2408:	89 2f       	mov	r24, r25
    240a:	d4 d2       	rcall	.+1448   	; 0x29b4 <__muldi3>
    240c:	29 51       	subi	r18, 0x19	; 25
    240e:	3c 4f       	sbci	r19, 0xFC	; 252
    2410:	4f 4f       	sbci	r20, 0xFF	; 255
    2412:	5f 4f       	sbci	r21, 0xFF	; 255
    2414:	6f 4f       	sbci	r22, 0xFF	; 255
    2416:	7f 4f       	sbci	r23, 0xFF	; 255
    2418:	8f 4f       	sbci	r24, 0xFF	; 255
    241a:	9f 4f       	sbci	r25, 0xFF	; 255
    241c:	f0 d1       	rcall	.+992    	; 0x27fe <__floatundisf>
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e8       	ldi	r19, 0x80	; 128
    2422:	4b eb       	ldi	r20, 0xBB	; 187
    2424:	55 e4       	ldi	r21, 0x45	; 69
    2426:	49 d1       	rcall	.+658    	; 0x26ba <__divsf3>
    2428:	b5 d1       	rcall	.+874    	; 0x2794 <__fixunssfdi>
    242a:	f2 2f       	mov	r31, r18
    242c:	e3 2f       	mov	r30, r19
    242e:	8f 2f       	mov	r24, r31
    2430:	9e 2f       	mov	r25, r30
    2432:	a4 2f       	mov	r26, r20
    2434:	b5 2f       	mov	r27, r21
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	a1 09       	sbc	r26, r1
    243a:	b1 09       	sbc	r27, r1
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	a1 05       	cpc	r26, r1
    2440:	b1 05       	cpc	r27, r1
    2442:	c9 f7       	brne	.-14     	; 0x2436 <animation+0x2f0>
		led3(OFF);
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	4e de       	rcall	.-868    	; 0x20e6 <led3>
		delay_ms(i);
    244a:	e9 81       	ldd	r30, Y+1	; 0x01
    244c:	fa 81       	ldd	r31, Y+2	; 0x02
    244e:	9f 2f       	mov	r25, r31
    2450:	99 0f       	add	r25, r25
    2452:	99 0b       	sbc	r25, r25
    2454:	a1 2c       	mov	r10, r1
    2456:	0f 2e       	mov	r0, r31
    2458:	fc e6       	ldi	r31, 0x6C	; 108
    245a:	bf 2e       	mov	r11, r31
    245c:	f0 2d       	mov	r31, r0
    245e:	0f 2e       	mov	r0, r31
    2460:	fc ed       	ldi	r31, 0xDC	; 220
    2462:	cf 2e       	mov	r12, r31
    2464:	f0 2d       	mov	r31, r0
    2466:	68 94       	set
    2468:	dd 24       	eor	r13, r13
    246a:	d1 f8       	bld	r13, 1
    246c:	e1 2c       	mov	r14, r1
    246e:	f1 2c       	mov	r15, r1
    2470:	00 e0       	ldi	r16, 0x00	; 0
    2472:	10 e0       	ldi	r17, 0x00	; 0
    2474:	2e 2f       	mov	r18, r30
    2476:	3f 2f       	mov	r19, r31
    2478:	49 2f       	mov	r20, r25
    247a:	59 2f       	mov	r21, r25
    247c:	69 2f       	mov	r22, r25
    247e:	79 2f       	mov	r23, r25
    2480:	89 2f       	mov	r24, r25
    2482:	98 d2       	rcall	.+1328   	; 0x29b4 <__muldi3>
    2484:	29 51       	subi	r18, 0x19	; 25
    2486:	3c 4f       	sbci	r19, 0xFC	; 252
    2488:	4f 4f       	sbci	r20, 0xFF	; 255
    248a:	5f 4f       	sbci	r21, 0xFF	; 255
    248c:	6f 4f       	sbci	r22, 0xFF	; 255
    248e:	7f 4f       	sbci	r23, 0xFF	; 255
    2490:	8f 4f       	sbci	r24, 0xFF	; 255
    2492:	9f 4f       	sbci	r25, 0xFF	; 255
    2494:	b4 d1       	rcall	.+872    	; 0x27fe <__floatundisf>
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e8       	ldi	r19, 0x80	; 128
    249a:	4b eb       	ldi	r20, 0xBB	; 187
    249c:	55 e4       	ldi	r21, 0x45	; 69
    249e:	0d d1       	rcall	.+538    	; 0x26ba <__divsf3>
    24a0:	79 d1       	rcall	.+754    	; 0x2794 <__fixunssfdi>
    24a2:	f2 2f       	mov	r31, r18
    24a4:	e3 2f       	mov	r30, r19
    24a6:	8f 2f       	mov	r24, r31
    24a8:	9e 2f       	mov	r25, r30
    24aa:	a4 2f       	mov	r26, r20
    24ac:	b5 2f       	mov	r27, r21
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	a1 09       	sbc	r26, r1
    24b2:	b1 09       	sbc	r27, r1
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	a1 05       	cpc	r26, r1
    24b8:	b1 05       	cpc	r27, r1
    24ba:	c9 f7       	brne	.-14     	; 0x24ae <animation+0x368>
		led4(OFF);
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	2a de       	rcall	.-940    	; 0x2116 <led4>
		delay_ms(i);
    24c2:	e9 81       	ldd	r30, Y+1	; 0x01
    24c4:	fa 81       	ldd	r31, Y+2	; 0x02
    24c6:	9f 2f       	mov	r25, r31
    24c8:	99 0f       	add	r25, r25
    24ca:	99 0b       	sbc	r25, r25
    24cc:	a1 2c       	mov	r10, r1
    24ce:	0f 2e       	mov	r0, r31
    24d0:	fc e6       	ldi	r31, 0x6C	; 108
    24d2:	bf 2e       	mov	r11, r31
    24d4:	f0 2d       	mov	r31, r0
    24d6:	0f 2e       	mov	r0, r31
    24d8:	fc ed       	ldi	r31, 0xDC	; 220
    24da:	cf 2e       	mov	r12, r31
    24dc:	f0 2d       	mov	r31, r0
    24de:	68 94       	set
    24e0:	dd 24       	eor	r13, r13
    24e2:	d1 f8       	bld	r13, 1
    24e4:	e1 2c       	mov	r14, r1
    24e6:	f1 2c       	mov	r15, r1
    24e8:	00 e0       	ldi	r16, 0x00	; 0
    24ea:	10 e0       	ldi	r17, 0x00	; 0
    24ec:	2e 2f       	mov	r18, r30
    24ee:	3f 2f       	mov	r19, r31
    24f0:	49 2f       	mov	r20, r25
    24f2:	59 2f       	mov	r21, r25
    24f4:	69 2f       	mov	r22, r25
    24f6:	79 2f       	mov	r23, r25
    24f8:	89 2f       	mov	r24, r25
    24fa:	5c d2       	rcall	.+1208   	; 0x29b4 <__muldi3>
    24fc:	29 51       	subi	r18, 0x19	; 25
    24fe:	3c 4f       	sbci	r19, 0xFC	; 252
    2500:	4f 4f       	sbci	r20, 0xFF	; 255
    2502:	5f 4f       	sbci	r21, 0xFF	; 255
    2504:	6f 4f       	sbci	r22, 0xFF	; 255
    2506:	7f 4f       	sbci	r23, 0xFF	; 255
    2508:	8f 4f       	sbci	r24, 0xFF	; 255
    250a:	9f 4f       	sbci	r25, 0xFF	; 255
    250c:	78 d1       	rcall	.+752    	; 0x27fe <__floatundisf>
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e8       	ldi	r19, 0x80	; 128
    2512:	4b eb       	ldi	r20, 0xBB	; 187
    2514:	55 e4       	ldi	r21, 0x45	; 69
    2516:	d1 d0       	rcall	.+418    	; 0x26ba <__divsf3>
    2518:	3d d1       	rcall	.+634    	; 0x2794 <__fixunssfdi>
    251a:	f2 2f       	mov	r31, r18
    251c:	e3 2f       	mov	r30, r19
    251e:	8f 2f       	mov	r24, r31
    2520:	9e 2f       	mov	r25, r30
    2522:	a4 2f       	mov	r26, r20
    2524:	b5 2f       	mov	r27, r21
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	a1 09       	sbc	r26, r1
    252a:	b1 09       	sbc	r27, r1
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	a1 05       	cpc	r26, r1
    2530:	b1 05       	cpc	r27, r1
    2532:	c9 f7       	brne	.-14     	; 0x2526 <animation+0x3e0>


void animation(void)
{
	volatile int i;
	for(i = 50;i<ANIMATION_MAX;i+=15)
    2534:	89 81       	ldd	r24, Y+1	; 0x01
    2536:	9a 81       	ldd	r25, Y+2	; 0x02
    2538:	0f 96       	adiw	r24, 0x0f	; 15
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	9a 83       	std	Y+2, r25	; 0x02
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	9a 81       	ldd	r25, Y+2	; 0x02
    2542:	84 36       	cpi	r24, 0x64	; 100
    2544:	91 05       	cpc	r25, r1
    2546:	0c f4       	brge	.+2      	; 0x254a <animation+0x404>
    2548:	15 ce       	rjmp	.-982    	; 0x2174 <animation+0x2e>
		led3(OFF);
		delay_ms(i);
		led4(OFF);
		delay_ms(i);
	}
}
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	1f 91       	pop	r17
    2554:	0f 91       	pop	r16
    2556:	ff 90       	pop	r15
    2558:	ef 90       	pop	r14
    255a:	df 90       	pop	r13
    255c:	cf 90       	pop	r12
    255e:	bf 90       	pop	r11
    2560:	af 90       	pop	r10
    2562:	08 95       	ret

00002564 <switch_init>:
    2564:	88 e0       	ldi	r24, 0x08	; 8
    2566:	e0 e4       	ldi	r30, 0x40	; 64
    2568:	f6 e0       	ldi	r31, 0x06	; 6
    256a:	82 83       	std	Z+2, r24	; 0x02
    256c:	08 95       	ret

0000256e <__vector_64>:
#define DIMMER_TRIGGER IO_7
 
int dimmer=0;
int i=0;
ISR(PORTD_INT0_vect) // ZCD
{
    256e:	1f 92       	push	r1
    2570:	0f 92       	push	r0
    2572:	0f b6       	in	r0, 0x3f	; 63
    2574:	0f 92       	push	r0
    2576:	11 24       	eor	r1, r1
    2578:	2f 93       	push	r18
    257a:	3f 93       	push	r19
    257c:	4f 93       	push	r20
    257e:	5f 93       	push	r21
    2580:	6f 93       	push	r22
    2582:	7f 93       	push	r23
    2584:	8f 93       	push	r24
    2586:	9f 93       	push	r25
    2588:	af 93       	push	r26
    258a:	bf 93       	push	r27
    258c:	ef 93       	push	r30
    258e:	ff 93       	push	r31
	//while( (RTC.STATUS&0x01) && 0x01 );
	RTC.CNT = 0;
    2590:	e0 e0       	ldi	r30, 0x00	; 0
    2592:	f4 e0       	ldi	r31, 0x04	; 4
    2594:	10 86       	std	Z+8, r1	; 0x08
    2596:	11 86       	std	Z+9, r1	; 0x09
	led4(TOGGLE);
    2598:	82 e0       	ldi	r24, 0x02	; 2
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	bc dd       	rcall	.-1160   	; 0x2116 <led4>
}
    259e:	ff 91       	pop	r31
    25a0:	ef 91       	pop	r30
    25a2:	bf 91       	pop	r27
    25a4:	af 91       	pop	r26
    25a6:	9f 91       	pop	r25
    25a8:	8f 91       	pop	r24
    25aa:	7f 91       	pop	r23
    25ac:	6f 91       	pop	r22
    25ae:	5f 91       	pop	r21
    25b0:	4f 91       	pop	r20
    25b2:	3f 91       	pop	r19
    25b4:	2f 91       	pop	r18
    25b6:	0f 90       	pop	r0
    25b8:	0f be       	out	0x3f, r0	; 63
    25ba:	0f 90       	pop	r0
    25bc:	1f 90       	pop	r1
    25be:	18 95       	reti

000025c0 <__vector_2>:

ISR(PORTC_INT0_vect) // BOTON
{
    25c0:	1f 92       	push	r1
    25c2:	0f 92       	push	r0
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	0f 92       	push	r0
    25c8:	11 24       	eor	r1, r1
    25ca:	8f 93       	push	r24
    25cc:	ef 93       	push	r30
    25ce:	ff 93       	push	r31

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    25d0:	80 e1       	ldi	r24, 0x10	; 16
    25d2:	e0 e4       	ldi	r30, 0x40	; 64
    25d4:	f6 e0       	ldi	r31, 0x06	; 6
    25d6:	87 83       	std	Z+7, r24	; 0x07
	ioport_toggle_pin_level(CONTACTOR);
}
    25d8:	ff 91       	pop	r31
    25da:	ef 91       	pop	r30
    25dc:	8f 91       	pop	r24
    25de:	0f 90       	pop	r0
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	0f 90       	pop	r0
    25e4:	1f 90       	pop	r1
    25e6:	18 95       	reti

000025e8 <__vector_11>:

ISR(RTC_COMP_vect)
{
    25e8:	1f 92       	push	r1
    25ea:	0f 92       	push	r0
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	0f 92       	push	r0
    25f0:	11 24       	eor	r1, r1
    25f2:	2f 93       	push	r18
    25f4:	3f 93       	push	r19
    25f6:	4f 93       	push	r20
    25f8:	5f 93       	push	r21
    25fa:	6f 93       	push	r22
    25fc:	7f 93       	push	r23
    25fe:	8f 93       	push	r24
    2600:	9f 93       	push	r25
    2602:	af 93       	push	r26
    2604:	bf 93       	push	r27
    2606:	ef 93       	push	r30
    2608:	ff 93       	push	r31
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    260a:	80 e1       	ldi	r24, 0x10	; 16
    260c:	e0 e6       	ldi	r30, 0x60	; 96
    260e:	f6 e0       	ldi	r31, 0x06	; 6
    2610:	85 83       	std	Z+5, r24	; 0x05
	ioport_set_pin_level(DIMMER_TRIGGER, ON);
	led3(TOGGLE);
    2612:	82 e0       	ldi	r24, 0x02	; 2
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	67 dd       	rcall	.-1330   	; 0x20e6 <led3>
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	80 34       	cpi	r24, 0x40	; 64
    2620:	26 e0       	ldi	r18, 0x06	; 6
    2622:	92 07       	cpc	r25, r18
    2624:	d9 f7       	brne	.-10     	; 0x261c <__vector_11+0x34>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2626:	80 e1       	ldi	r24, 0x10	; 16
    2628:	e0 e6       	ldi	r30, 0x60	; 96
    262a:	f6 e0       	ldi	r31, 0x06	; 6
    262c:	86 83       	std	Z+6, r24	; 0x06
	delay_us(200);
	ioport_set_pin_level(DIMMER_TRIGGER, OFF);
}
    262e:	ff 91       	pop	r31
    2630:	ef 91       	pop	r30
    2632:	bf 91       	pop	r27
    2634:	af 91       	pop	r26
    2636:	9f 91       	pop	r25
    2638:	8f 91       	pop	r24
    263a:	7f 91       	pop	r23
    263c:	6f 91       	pop	r22
    263e:	5f 91       	pop	r21
    2640:	4f 91       	pop	r20
    2642:	3f 91       	pop	r19
    2644:	2f 91       	pop	r18
    2646:	0f 90       	pop	r0
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	0f 90       	pop	r0
    264c:	1f 90       	pop	r1
    264e:	18 95       	reti

00002650 <main>:

int main (void)
{
	init_DomOctopus();
    2650:	f7 dc       	rcall	.-1554   	; 0x2040 <init_DomOctopus>
	animation();
    2652:	79 dd       	rcall	.-1294   	; 0x2146 <animation>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2654:	e0 ea       	ldi	r30, 0xA0	; 160
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	87 e0       	ldi	r24, 0x07	; 7
    265a:	82 83       	std	Z+2, r24	; 0x02
		PMIC.CTRL &= ~PMIC_RREN_bm;
		PMIC.INTPRI = 0;
		break;

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    265c:	82 81       	ldd	r24, Z+2	; 0x02
    265e:	80 68       	ori	r24, 0x80	; 128
    2660:	82 83       	std	Z+2, r24	; 0x02
	
	//Activate button interrupt
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
	PORTC.INTCTRL = 0x01;
    2662:	e0 e4       	ldi	r30, 0x40	; 64
    2664:	f6 e0       	ldi	r31, 0x06	; 6
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	81 87       	std	Z+9, r24	; 0x09
	PORTC.INT0MASK = (1<<3);
    266a:	88 e0       	ldi	r24, 0x08	; 8
    266c:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.PIN3CTRL |= (1<<1);
    266e:	83 89       	ldd	r24, Z+19	; 0x13
    2670:	82 60       	ori	r24, 0x02	; 2
    2672:	83 8b       	std	Z+19, r24	; 0x13
	cpu_irq_enable();
    2674:	78 94       	sei
		
	//Activate ZCD signal interruption
	cpu_irq_disable();
    2676:	f8 94       	cli
	PORTD.INTCTRL = 0x03;
    2678:	e0 e6       	ldi	r30, 0x60	; 96
    267a:	f6 e0       	ldi	r31, 0x06	; 6
    267c:	83 e0       	ldi	r24, 0x03	; 3
    267e:	81 87       	std	Z+9, r24	; 0x09
	PORTD.INT0MASK = (1<<5);
    2680:	80 e2       	ldi	r24, 0x20	; 32
    2682:	82 87       	std	Z+10, r24	; 0x0a
	PORTD.PIN5CTRL |= 0x02;
    2684:	85 89       	ldd	r24, Z+21	; 0x15
    2686:	82 60       	ori	r24, 0x02	; 2
    2688:	85 8b       	std	Z+21, r24	; 0x15
	cpu_irq_enable();
    268a:	78 94       	sei
	
	//Activate RTC and interruption
	cpu_irq_disable();
    268c:	f8 94       	cli
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    268e:	64 e0       	ldi	r22, 0x04	; 4
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	0e 94 98 01 	call	0x330	; 0x330 <sysclk_enable_module>
	RTC.PER = 0xffff;
    2696:	e0 e0       	ldi	r30, 0x00	; 0
    2698:	f4 e0       	ldi	r31, 0x04	; 4
    269a:	8f ef       	ldi	r24, 0xFF	; 255
    269c:	9f ef       	ldi	r25, 0xFF	; 255
    269e:	82 87       	std	Z+10, r24	; 0x0a
    26a0:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
    26a2:	10 86       	std	Z+8, r1	; 0x08
    26a4:	11 86       	std	Z+9, r1	; 0x09
	RTC.COMP=32768;
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e8       	ldi	r25, 0x80	; 128
    26aa:	84 87       	std	Z+12, r24	; 0x0c
    26ac:	95 87       	std	Z+13, r25	; 0x0d
	RTC.INTCTRL = 0x0C;
    26ae:	8c e0       	ldi	r24, 0x0C	; 12
    26b0:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	80 83       	st	Z, r24
	cpu_irq_enable();
    26b6:	78 94       	sei
    26b8:	ff cf       	rjmp	.-2      	; 0x26b8 <main+0x68>

000026ba <__divsf3>:
    26ba:	0c d0       	rcall	.+24     	; 0x26d4 <__divsf3x>
    26bc:	05 c1       	rjmp	.+522    	; 0x28c8 <__fp_round>
    26be:	fd d0       	rcall	.+506    	; 0x28ba <__fp_pscB>
    26c0:	40 f0       	brcs	.+16     	; 0x26d2 <__divsf3+0x18>
    26c2:	f4 d0       	rcall	.+488    	; 0x28ac <__fp_pscA>
    26c4:	30 f0       	brcs	.+12     	; 0x26d2 <__divsf3+0x18>
    26c6:	21 f4       	brne	.+8      	; 0x26d0 <__divsf3+0x16>
    26c8:	5f 3f       	cpi	r21, 0xFF	; 255
    26ca:	19 f0       	breq	.+6      	; 0x26d2 <__divsf3+0x18>
    26cc:	d6 c0       	rjmp	.+428    	; 0x287a <__fp_inf>
    26ce:	51 11       	cpse	r21, r1
    26d0:	2f c1       	rjmp	.+606    	; 0x2930 <__fp_szero>
    26d2:	d9 c0       	rjmp	.+434    	; 0x2886 <__fp_nan>

000026d4 <__divsf3x>:
    26d4:	0a d1       	rcall	.+532    	; 0x28ea <__fp_split3>
    26d6:	98 f3       	brcs	.-26     	; 0x26be <__divsf3+0x4>

000026d8 <__divsf3_pse>:
    26d8:	99 23       	and	r25, r25
    26da:	c9 f3       	breq	.-14     	; 0x26ce <__divsf3+0x14>
    26dc:	55 23       	and	r21, r21
    26de:	b1 f3       	breq	.-20     	; 0x26cc <__divsf3+0x12>
    26e0:	95 1b       	sub	r25, r21
    26e2:	55 0b       	sbc	r21, r21
    26e4:	bb 27       	eor	r27, r27
    26e6:	aa 27       	eor	r26, r26
    26e8:	62 17       	cp	r22, r18
    26ea:	73 07       	cpc	r23, r19
    26ec:	84 07       	cpc	r24, r20
    26ee:	38 f0       	brcs	.+14     	; 0x26fe <__divsf3_pse+0x26>
    26f0:	9f 5f       	subi	r25, 0xFF	; 255
    26f2:	5f 4f       	sbci	r21, 0xFF	; 255
    26f4:	22 0f       	add	r18, r18
    26f6:	33 1f       	adc	r19, r19
    26f8:	44 1f       	adc	r20, r20
    26fa:	aa 1f       	adc	r26, r26
    26fc:	a9 f3       	breq	.-22     	; 0x26e8 <__divsf3_pse+0x10>
    26fe:	33 d0       	rcall	.+102    	; 0x2766 <__divsf3_pse+0x8e>
    2700:	0e 2e       	mov	r0, r30
    2702:	3a f0       	brmi	.+14     	; 0x2712 <__divsf3_pse+0x3a>
    2704:	e0 e8       	ldi	r30, 0x80	; 128
    2706:	30 d0       	rcall	.+96     	; 0x2768 <__divsf3_pse+0x90>
    2708:	91 50       	subi	r25, 0x01	; 1
    270a:	50 40       	sbci	r21, 0x00	; 0
    270c:	e6 95       	lsr	r30
    270e:	00 1c       	adc	r0, r0
    2710:	ca f7       	brpl	.-14     	; 0x2704 <__divsf3_pse+0x2c>
    2712:	29 d0       	rcall	.+82     	; 0x2766 <__divsf3_pse+0x8e>
    2714:	fe 2f       	mov	r31, r30
    2716:	27 d0       	rcall	.+78     	; 0x2766 <__divsf3_pse+0x8e>
    2718:	66 0f       	add	r22, r22
    271a:	77 1f       	adc	r23, r23
    271c:	88 1f       	adc	r24, r24
    271e:	bb 1f       	adc	r27, r27
    2720:	26 17       	cp	r18, r22
    2722:	37 07       	cpc	r19, r23
    2724:	48 07       	cpc	r20, r24
    2726:	ab 07       	cpc	r26, r27
    2728:	b0 e8       	ldi	r27, 0x80	; 128
    272a:	09 f0       	breq	.+2      	; 0x272e <__divsf3_pse+0x56>
    272c:	bb 0b       	sbc	r27, r27
    272e:	80 2d       	mov	r24, r0
    2730:	bf 01       	movw	r22, r30
    2732:	ff 27       	eor	r31, r31
    2734:	93 58       	subi	r25, 0x83	; 131
    2736:	5f 4f       	sbci	r21, 0xFF	; 255
    2738:	2a f0       	brmi	.+10     	; 0x2744 <__divsf3_pse+0x6c>
    273a:	9e 3f       	cpi	r25, 0xFE	; 254
    273c:	51 05       	cpc	r21, r1
    273e:	68 f0       	brcs	.+26     	; 0x275a <__divsf3_pse+0x82>
    2740:	9c c0       	rjmp	.+312    	; 0x287a <__fp_inf>
    2742:	f6 c0       	rjmp	.+492    	; 0x2930 <__fp_szero>
    2744:	5f 3f       	cpi	r21, 0xFF	; 255
    2746:	ec f3       	brlt	.-6      	; 0x2742 <__divsf3_pse+0x6a>
    2748:	98 3e       	cpi	r25, 0xE8	; 232
    274a:	dc f3       	brlt	.-10     	; 0x2742 <__divsf3_pse+0x6a>
    274c:	86 95       	lsr	r24
    274e:	77 95       	ror	r23
    2750:	67 95       	ror	r22
    2752:	b7 95       	ror	r27
    2754:	f7 95       	ror	r31
    2756:	9f 5f       	subi	r25, 0xFF	; 255
    2758:	c9 f7       	brne	.-14     	; 0x274c <__divsf3_pse+0x74>
    275a:	88 0f       	add	r24, r24
    275c:	91 1d       	adc	r25, r1
    275e:	96 95       	lsr	r25
    2760:	87 95       	ror	r24
    2762:	97 f9       	bld	r25, 7
    2764:	08 95       	ret
    2766:	e1 e0       	ldi	r30, 0x01	; 1
    2768:	66 0f       	add	r22, r22
    276a:	77 1f       	adc	r23, r23
    276c:	88 1f       	adc	r24, r24
    276e:	bb 1f       	adc	r27, r27
    2770:	62 17       	cp	r22, r18
    2772:	73 07       	cpc	r23, r19
    2774:	84 07       	cpc	r24, r20
    2776:	ba 07       	cpc	r27, r26
    2778:	20 f0       	brcs	.+8      	; 0x2782 <__divsf3_pse+0xaa>
    277a:	62 1b       	sub	r22, r18
    277c:	73 0b       	sbc	r23, r19
    277e:	84 0b       	sbc	r24, r20
    2780:	ba 0b       	sbc	r27, r26
    2782:	ee 1f       	adc	r30, r30
    2784:	88 f7       	brcc	.-30     	; 0x2768 <__divsf3_pse+0x90>
    2786:	e0 95       	com	r30
    2788:	08 95       	ret

0000278a <__fixsfdi>:
    278a:	be e3       	ldi	r27, 0x3E	; 62
    278c:	04 d0       	rcall	.+8      	; 0x2796 <__fixunssfdi+0x2>
    278e:	08 f4       	brcc	.+2      	; 0x2792 <__fixsfdi+0x8>
    2790:	90 e8       	ldi	r25, 0x80	; 128
    2792:	08 95       	ret

00002794 <__fixunssfdi>:
    2794:	bf e3       	ldi	r27, 0x3F	; 63
    2796:	22 27       	eor	r18, r18
    2798:	33 27       	eor	r19, r19
    279a:	a9 01       	movw	r20, r18
    279c:	ae d0       	rcall	.+348    	; 0x28fa <__fp_splitA>
    279e:	58 f1       	brcs	.+86     	; 0x27f6 <__fixunssfdi+0x62>
    27a0:	9f 57       	subi	r25, 0x7F	; 127
    27a2:	40 f1       	brcs	.+80     	; 0x27f4 <__fixunssfdi+0x60>
    27a4:	b9 17       	cp	r27, r25
    27a6:	38 f1       	brcs	.+78     	; 0x27f6 <__fixunssfdi+0x62>
    27a8:	bf e3       	ldi	r27, 0x3F	; 63
    27aa:	b9 1b       	sub	r27, r25
    27ac:	99 27       	eor	r25, r25
    27ae:	b8 50       	subi	r27, 0x08	; 8
    27b0:	3a f4       	brpl	.+14     	; 0x27c0 <__fixunssfdi+0x2c>
    27b2:	66 0f       	add	r22, r22
    27b4:	77 1f       	adc	r23, r23
    27b6:	88 1f       	adc	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	b3 95       	inc	r27
    27bc:	d2 f3       	brmi	.-12     	; 0x27b2 <__fixunssfdi+0x1e>
    27be:	16 c0       	rjmp	.+44     	; 0x27ec <__fixunssfdi+0x58>
    27c0:	b8 50       	subi	r27, 0x08	; 8
    27c2:	4a f0       	brmi	.+18     	; 0x27d6 <__fixunssfdi+0x42>
    27c4:	23 2f       	mov	r18, r19
    27c6:	34 2f       	mov	r19, r20
    27c8:	45 2f       	mov	r20, r21
    27ca:	56 2f       	mov	r21, r22
    27cc:	67 2f       	mov	r22, r23
    27ce:	78 2f       	mov	r23, r24
    27d0:	88 27       	eor	r24, r24
    27d2:	b8 50       	subi	r27, 0x08	; 8
    27d4:	ba f7       	brpl	.-18     	; 0x27c4 <__fixunssfdi+0x30>
    27d6:	b8 5f       	subi	r27, 0xF8	; 248
    27d8:	49 f0       	breq	.+18     	; 0x27ec <__fixunssfdi+0x58>
    27da:	86 95       	lsr	r24
    27dc:	77 95       	ror	r23
    27de:	67 95       	ror	r22
    27e0:	57 95       	ror	r21
    27e2:	47 95       	ror	r20
    27e4:	37 95       	ror	r19
    27e6:	27 95       	ror	r18
    27e8:	ba 95       	dec	r27
    27ea:	b9 f7       	brne	.-18     	; 0x27da <__fixunssfdi+0x46>
    27ec:	0e f4       	brtc	.+2      	; 0x27f0 <__fixunssfdi+0x5c>
    27ee:	4e d0       	rcall	.+156    	; 0x288c <__fp_negdi>
    27f0:	88 94       	clc
    27f2:	08 95       	ret
    27f4:	88 94       	clc
    27f6:	60 e0       	ldi	r22, 0x00	; 0
    27f8:	70 e0       	ldi	r23, 0x00	; 0
    27fa:	cb 01       	movw	r24, r22
    27fc:	08 95       	ret

000027fe <__floatundisf>:
    27fe:	e8 94       	clt

00002800 <__fp_di2sf>:
    2800:	f9 2f       	mov	r31, r25
    2802:	96 eb       	ldi	r25, 0xB6	; 182
    2804:	ff 23       	and	r31, r31
    2806:	81 f0       	breq	.+32     	; 0x2828 <__fp_di2sf+0x28>
    2808:	12 16       	cp	r1, r18
    280a:	13 06       	cpc	r1, r19
    280c:	14 06       	cpc	r1, r20
    280e:	44 0b       	sbc	r20, r20
    2810:	93 95       	inc	r25
    2812:	f6 95       	lsr	r31
    2814:	87 95       	ror	r24
    2816:	77 95       	ror	r23
    2818:	67 95       	ror	r22
    281a:	57 95       	ror	r21
    281c:	40 40       	sbci	r20, 0x00	; 0
    281e:	ff 23       	and	r31, r31
    2820:	b9 f7       	brne	.-18     	; 0x2810 <__fp_di2sf+0x10>
    2822:	1b c0       	rjmp	.+54     	; 0x285a <__fp_di2sf+0x5a>
    2824:	99 27       	eor	r25, r25
    2826:	08 95       	ret
    2828:	88 23       	and	r24, r24
    282a:	51 f4       	brne	.+20     	; 0x2840 <__fp_di2sf+0x40>
    282c:	98 50       	subi	r25, 0x08	; 8
    282e:	d2 f7       	brpl	.-12     	; 0x2824 <__fp_di2sf+0x24>
    2830:	87 2b       	or	r24, r23
    2832:	76 2f       	mov	r23, r22
    2834:	65 2f       	mov	r22, r21
    2836:	54 2f       	mov	r21, r20
    2838:	43 2f       	mov	r20, r19
    283a:	32 2f       	mov	r19, r18
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	b1 f3       	breq	.-20     	; 0x282c <__fp_di2sf+0x2c>
    2840:	12 16       	cp	r1, r18
    2842:	13 06       	cpc	r1, r19
    2844:	14 06       	cpc	r1, r20
    2846:	44 0b       	sbc	r20, r20
    2848:	88 23       	and	r24, r24
    284a:	3a f0       	brmi	.+14     	; 0x285a <__fp_di2sf+0x5a>
    284c:	9a 95       	dec	r25
    284e:	44 0f       	add	r20, r20
    2850:	55 1f       	adc	r21, r21
    2852:	66 1f       	adc	r22, r22
    2854:	77 1f       	adc	r23, r23
    2856:	88 1f       	adc	r24, r24
    2858:	ca f7       	brpl	.-14     	; 0x284c <__fp_di2sf+0x4c>
    285a:	55 23       	and	r21, r21
    285c:	4a f4       	brpl	.+18     	; 0x2870 <__fp_di2sf+0x70>
    285e:	44 0f       	add	r20, r20
    2860:	55 1f       	adc	r21, r21
    2862:	11 f4       	brne	.+4      	; 0x2868 <__fp_di2sf+0x68>
    2864:	60 ff       	sbrs	r22, 0
    2866:	04 c0       	rjmp	.+8      	; 0x2870 <__fp_di2sf+0x70>
    2868:	6f 5f       	subi	r22, 0xFF	; 255
    286a:	7f 4f       	sbci	r23, 0xFF	; 255
    286c:	8f 4f       	sbci	r24, 0xFF	; 255
    286e:	9f 4f       	sbci	r25, 0xFF	; 255
    2870:	88 0f       	add	r24, r24
    2872:	96 95       	lsr	r25
    2874:	87 95       	ror	r24
    2876:	97 f9       	bld	r25, 7
    2878:	08 95       	ret

0000287a <__fp_inf>:
    287a:	97 f9       	bld	r25, 7
    287c:	9f 67       	ori	r25, 0x7F	; 127
    287e:	80 e8       	ldi	r24, 0x80	; 128
    2880:	70 e0       	ldi	r23, 0x00	; 0
    2882:	60 e0       	ldi	r22, 0x00	; 0
    2884:	08 95       	ret

00002886 <__fp_nan>:
    2886:	9f ef       	ldi	r25, 0xFF	; 255
    2888:	80 ec       	ldi	r24, 0xC0	; 192
    288a:	08 95       	ret

0000288c <__fp_negdi>:
    288c:	90 95       	com	r25
    288e:	80 95       	com	r24
    2890:	70 95       	com	r23
    2892:	60 95       	com	r22
    2894:	50 95       	com	r21
    2896:	40 95       	com	r20
    2898:	30 95       	com	r19
    289a:	21 95       	neg	r18
    289c:	3f 4f       	sbci	r19, 0xFF	; 255
    289e:	4f 4f       	sbci	r20, 0xFF	; 255
    28a0:	5f 4f       	sbci	r21, 0xFF	; 255
    28a2:	6f 4f       	sbci	r22, 0xFF	; 255
    28a4:	7f 4f       	sbci	r23, 0xFF	; 255
    28a6:	8f 4f       	sbci	r24, 0xFF	; 255
    28a8:	9f 4f       	sbci	r25, 0xFF	; 255
    28aa:	08 95       	ret

000028ac <__fp_pscA>:
    28ac:	00 24       	eor	r0, r0
    28ae:	0a 94       	dec	r0
    28b0:	16 16       	cp	r1, r22
    28b2:	17 06       	cpc	r1, r23
    28b4:	18 06       	cpc	r1, r24
    28b6:	09 06       	cpc	r0, r25
    28b8:	08 95       	ret

000028ba <__fp_pscB>:
    28ba:	00 24       	eor	r0, r0
    28bc:	0a 94       	dec	r0
    28be:	12 16       	cp	r1, r18
    28c0:	13 06       	cpc	r1, r19
    28c2:	14 06       	cpc	r1, r20
    28c4:	05 06       	cpc	r0, r21
    28c6:	08 95       	ret

000028c8 <__fp_round>:
    28c8:	09 2e       	mov	r0, r25
    28ca:	03 94       	inc	r0
    28cc:	00 0c       	add	r0, r0
    28ce:	11 f4       	brne	.+4      	; 0x28d4 <__fp_round+0xc>
    28d0:	88 23       	and	r24, r24
    28d2:	52 f0       	brmi	.+20     	; 0x28e8 <__fp_round+0x20>
    28d4:	bb 0f       	add	r27, r27
    28d6:	40 f4       	brcc	.+16     	; 0x28e8 <__fp_round+0x20>
    28d8:	bf 2b       	or	r27, r31
    28da:	11 f4       	brne	.+4      	; 0x28e0 <__fp_round+0x18>
    28dc:	60 ff       	sbrs	r22, 0
    28de:	04 c0       	rjmp	.+8      	; 0x28e8 <__fp_round+0x20>
    28e0:	6f 5f       	subi	r22, 0xFF	; 255
    28e2:	7f 4f       	sbci	r23, 0xFF	; 255
    28e4:	8f 4f       	sbci	r24, 0xFF	; 255
    28e6:	9f 4f       	sbci	r25, 0xFF	; 255
    28e8:	08 95       	ret

000028ea <__fp_split3>:
    28ea:	57 fd       	sbrc	r21, 7
    28ec:	90 58       	subi	r25, 0x80	; 128
    28ee:	44 0f       	add	r20, r20
    28f0:	55 1f       	adc	r21, r21
    28f2:	59 f0       	breq	.+22     	; 0x290a <__fp_splitA+0x10>
    28f4:	5f 3f       	cpi	r21, 0xFF	; 255
    28f6:	71 f0       	breq	.+28     	; 0x2914 <__fp_splitA+0x1a>
    28f8:	47 95       	ror	r20

000028fa <__fp_splitA>:
    28fa:	88 0f       	add	r24, r24
    28fc:	97 fb       	bst	r25, 7
    28fe:	99 1f       	adc	r25, r25
    2900:	61 f0       	breq	.+24     	; 0x291a <__fp_splitA+0x20>
    2902:	9f 3f       	cpi	r25, 0xFF	; 255
    2904:	79 f0       	breq	.+30     	; 0x2924 <__fp_splitA+0x2a>
    2906:	87 95       	ror	r24
    2908:	08 95       	ret
    290a:	12 16       	cp	r1, r18
    290c:	13 06       	cpc	r1, r19
    290e:	14 06       	cpc	r1, r20
    2910:	55 1f       	adc	r21, r21
    2912:	f2 cf       	rjmp	.-28     	; 0x28f8 <__fp_split3+0xe>
    2914:	46 95       	lsr	r20
    2916:	f1 df       	rcall	.-30     	; 0x28fa <__fp_splitA>
    2918:	08 c0       	rjmp	.+16     	; 0x292a <__fp_splitA+0x30>
    291a:	16 16       	cp	r1, r22
    291c:	17 06       	cpc	r1, r23
    291e:	18 06       	cpc	r1, r24
    2920:	99 1f       	adc	r25, r25
    2922:	f1 cf       	rjmp	.-30     	; 0x2906 <__fp_splitA+0xc>
    2924:	86 95       	lsr	r24
    2926:	71 05       	cpc	r23, r1
    2928:	61 05       	cpc	r22, r1
    292a:	08 94       	sec
    292c:	08 95       	ret

0000292e <__fp_zero>:
    292e:	e8 94       	clt

00002930 <__fp_szero>:
    2930:	bb 27       	eor	r27, r27
    2932:	66 27       	eor	r22, r22
    2934:	77 27       	eor	r23, r23
    2936:	cb 01       	movw	r24, r22
    2938:	97 f9       	bld	r25, 7
    293a:	08 95       	ret

0000293c <__udivmodhi4>:
    293c:	aa 1b       	sub	r26, r26
    293e:	bb 1b       	sub	r27, r27
    2940:	51 e1       	ldi	r21, 0x11	; 17
    2942:	07 c0       	rjmp	.+14     	; 0x2952 <__udivmodhi4_ep>

00002944 <__udivmodhi4_loop>:
    2944:	aa 1f       	adc	r26, r26
    2946:	bb 1f       	adc	r27, r27
    2948:	a6 17       	cp	r26, r22
    294a:	b7 07       	cpc	r27, r23
    294c:	10 f0       	brcs	.+4      	; 0x2952 <__udivmodhi4_ep>
    294e:	a6 1b       	sub	r26, r22
    2950:	b7 0b       	sbc	r27, r23

00002952 <__udivmodhi4_ep>:
    2952:	88 1f       	adc	r24, r24
    2954:	99 1f       	adc	r25, r25
    2956:	5a 95       	dec	r21
    2958:	a9 f7       	brne	.-22     	; 0x2944 <__udivmodhi4_loop>
    295a:	80 95       	com	r24
    295c:	90 95       	com	r25
    295e:	bc 01       	movw	r22, r24
    2960:	cd 01       	movw	r24, r26
    2962:	08 95       	ret

00002964 <__udivmodsi4>:
    2964:	a1 e2       	ldi	r26, 0x21	; 33
    2966:	1a 2e       	mov	r1, r26
    2968:	aa 1b       	sub	r26, r26
    296a:	bb 1b       	sub	r27, r27
    296c:	fd 01       	movw	r30, r26
    296e:	0d c0       	rjmp	.+26     	; 0x298a <__udivmodsi4_ep>

00002970 <__udivmodsi4_loop>:
    2970:	aa 1f       	adc	r26, r26
    2972:	bb 1f       	adc	r27, r27
    2974:	ee 1f       	adc	r30, r30
    2976:	ff 1f       	adc	r31, r31
    2978:	a2 17       	cp	r26, r18
    297a:	b3 07       	cpc	r27, r19
    297c:	e4 07       	cpc	r30, r20
    297e:	f5 07       	cpc	r31, r21
    2980:	20 f0       	brcs	.+8      	; 0x298a <__udivmodsi4_ep>
    2982:	a2 1b       	sub	r26, r18
    2984:	b3 0b       	sbc	r27, r19
    2986:	e4 0b       	sbc	r30, r20
    2988:	f5 0b       	sbc	r31, r21

0000298a <__udivmodsi4_ep>:
    298a:	66 1f       	adc	r22, r22
    298c:	77 1f       	adc	r23, r23
    298e:	88 1f       	adc	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	1a 94       	dec	r1
    2994:	69 f7       	brne	.-38     	; 0x2970 <__udivmodsi4_loop>
    2996:	60 95       	com	r22
    2998:	70 95       	com	r23
    299a:	80 95       	com	r24
    299c:	90 95       	com	r25
    299e:	9b 01       	movw	r18, r22
    29a0:	ac 01       	movw	r20, r24
    29a2:	bd 01       	movw	r22, r26
    29a4:	cf 01       	movw	r24, r30
    29a6:	08 95       	ret

000029a8 <__tablejump2__>:
    29a8:	ee 0f       	add	r30, r30
    29aa:	ff 1f       	adc	r31, r31

000029ac <__tablejump__>:
    29ac:	05 90       	lpm	r0, Z+
    29ae:	f4 91       	lpm	r31, Z
    29b0:	e0 2d       	mov	r30, r0
    29b2:	09 94       	ijmp

000029b4 <__muldi3>:
    29b4:	df 93       	push	r29
    29b6:	cf 93       	push	r28
    29b8:	1f 93       	push	r17
    29ba:	0f 93       	push	r16
    29bc:	9a 9d       	mul	r25, r10
    29be:	f0 2d       	mov	r31, r0
    29c0:	21 9f       	mul	r18, r17
    29c2:	f0 0d       	add	r31, r0
    29c4:	8b 9d       	mul	r24, r11
    29c6:	f0 0d       	add	r31, r0
    29c8:	8a 9d       	mul	r24, r10
    29ca:	e0 2d       	mov	r30, r0
    29cc:	f1 0d       	add	r31, r1
    29ce:	03 9f       	mul	r16, r19
    29d0:	f0 0d       	add	r31, r0
    29d2:	02 9f       	mul	r16, r18
    29d4:	e0 0d       	add	r30, r0
    29d6:	f1 1d       	adc	r31, r1
    29d8:	4e 9d       	mul	r20, r14
    29da:	e0 0d       	add	r30, r0
    29dc:	f1 1d       	adc	r31, r1
    29de:	5e 9d       	mul	r21, r14
    29e0:	f0 0d       	add	r31, r0
    29e2:	4f 9d       	mul	r20, r15
    29e4:	f0 0d       	add	r31, r0
    29e6:	7f 93       	push	r23
    29e8:	6f 93       	push	r22
    29ea:	bf 92       	push	r11
    29ec:	af 92       	push	r10
    29ee:	5f 93       	push	r21
    29f0:	4f 93       	push	r20
    29f2:	d5 01       	movw	r26, r10
    29f4:	30 d0       	rcall	.+96     	; 0x2a56 <__umulhisi3>
    29f6:	8b 01       	movw	r16, r22
    29f8:	ac 01       	movw	r20, r24
    29fa:	d7 01       	movw	r26, r14
    29fc:	2c d0       	rcall	.+88     	; 0x2a56 <__umulhisi3>
    29fe:	eb 01       	movw	r28, r22
    2a00:	e8 0f       	add	r30, r24
    2a02:	f9 1f       	adc	r31, r25
    2a04:	d6 01       	movw	r26, r12
    2a06:	1f d0       	rcall	.+62     	; 0x2a46 <__muldi3_6>
    2a08:	2f 91       	pop	r18
    2a0a:	3f 91       	pop	r19
    2a0c:	d6 01       	movw	r26, r12
    2a0e:	23 d0       	rcall	.+70     	; 0x2a56 <__umulhisi3>
    2a10:	c6 0f       	add	r28, r22
    2a12:	d7 1f       	adc	r29, r23
    2a14:	e8 1f       	adc	r30, r24
    2a16:	f9 1f       	adc	r31, r25
    2a18:	af 91       	pop	r26
    2a1a:	bf 91       	pop	r27
    2a1c:	14 d0       	rcall	.+40     	; 0x2a46 <__muldi3_6>
    2a1e:	2f 91       	pop	r18
    2a20:	3f 91       	pop	r19
    2a22:	19 d0       	rcall	.+50     	; 0x2a56 <__umulhisi3>
    2a24:	c6 0f       	add	r28, r22
    2a26:	d7 1f       	adc	r29, r23
    2a28:	e8 1f       	adc	r30, r24
    2a2a:	f9 1f       	adc	r31, r25
    2a2c:	d6 01       	movw	r26, r12
    2a2e:	13 d0       	rcall	.+38     	; 0x2a56 <__umulhisi3>
    2a30:	e6 0f       	add	r30, r22
    2a32:	f7 1f       	adc	r31, r23
    2a34:	98 01       	movw	r18, r16
    2a36:	be 01       	movw	r22, r28
    2a38:	cf 01       	movw	r24, r30
    2a3a:	11 24       	eor	r1, r1
    2a3c:	0f 91       	pop	r16
    2a3e:	1f 91       	pop	r17
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <__muldi3_6>:
    2a46:	07 d0       	rcall	.+14     	; 0x2a56 <__umulhisi3>
    2a48:	46 0f       	add	r20, r22
    2a4a:	57 1f       	adc	r21, r23
    2a4c:	c8 1f       	adc	r28, r24
    2a4e:	d9 1f       	adc	r29, r25
    2a50:	08 f4       	brcc	.+2      	; 0x2a54 <__muldi3_6+0xe>
    2a52:	31 96       	adiw	r30, 0x01	; 1
    2a54:	08 95       	ret

00002a56 <__umulhisi3>:
    2a56:	a2 9f       	mul	r26, r18
    2a58:	b0 01       	movw	r22, r0
    2a5a:	b3 9f       	mul	r27, r19
    2a5c:	c0 01       	movw	r24, r0
    2a5e:	a3 9f       	mul	r26, r19
    2a60:	70 0d       	add	r23, r0
    2a62:	81 1d       	adc	r24, r1
    2a64:	11 24       	eor	r1, r1
    2a66:	91 1d       	adc	r25, r1
    2a68:	b2 9f       	mul	r27, r18
    2a6a:	70 0d       	add	r23, r0
    2a6c:	81 1d       	adc	r24, r1
    2a6e:	11 24       	eor	r1, r1
    2a70:	91 1d       	adc	r25, r1
    2a72:	08 95       	ret

00002a74 <memcpy>:
    2a74:	fb 01       	movw	r30, r22
    2a76:	dc 01       	movw	r26, r24
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <memcpy+0xa>
    2a7a:	01 90       	ld	r0, Z+
    2a7c:	0d 92       	st	X+, r0
    2a7e:	41 50       	subi	r20, 0x01	; 1
    2a80:	50 40       	sbci	r21, 0x00	; 0
    2a82:	d8 f7       	brcc	.-10     	; 0x2a7a <memcpy+0x6>
    2a84:	08 95       	ret

00002a86 <_exit>:
    2a86:	f8 94       	cli

00002a88 <__stop_program>:
    2a88:	ff cf       	rjmp	.-2      	; 0x2a88 <__stop_program>
