
Jord_Octopus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000051f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00802000  000051f8  0000528c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000300  008020ac  008020ac  00005338  2**2
                  ALLOC
  3 .stab         00000ea0  00000000  00000000  00005338  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000038b  00000000  00000000  000061d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00006563  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000c10  00000000  00000000  00006598  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001880e  00000000  00000000  000071a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005793  00000000  00000000  0001f9b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00010444  00000000  00000000  00025149  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002590  00000000  00000000  00035590  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0002ebc4  00000000  00000000  00037b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000bc73  00000000  00000000  000666e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c00  00000000  00000000  00072358  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000c804  00000000  00000000  00072f58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	03 c1       	rjmp	.+518    	; 0x208 <__ctors_end>
       2:	00 00       	nop
       4:	1e c1       	rjmp	.+572    	; 0x242 <__bad_interrupt>
       6:	00 00       	nop
       8:	1c c1       	rjmp	.+568    	; 0x242 <__bad_interrupt>
       a:	00 00       	nop
       c:	1a c1       	rjmp	.+564    	; 0x242 <__bad_interrupt>
       e:	00 00       	nop
      10:	18 c1       	rjmp	.+560    	; 0x242 <__bad_interrupt>
      12:	00 00       	nop
      14:	16 c1       	rjmp	.+556    	; 0x242 <__bad_interrupt>
      16:	00 00       	nop
      18:	14 c1       	rjmp	.+552    	; 0x242 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	12 c1       	rjmp	.+548    	; 0x242 <__bad_interrupt>
      1e:	00 00       	nop
      20:	10 c1       	rjmp	.+544    	; 0x242 <__bad_interrupt>
      22:	00 00       	nop
      24:	0e c1       	rjmp	.+540    	; 0x242 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c c1       	rjmp	.+536    	; 0x242 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0a c1       	rjmp	.+532    	; 0x242 <__bad_interrupt>
      2e:	00 00       	nop
      30:	08 c1       	rjmp	.+528    	; 0x242 <__bad_interrupt>
      32:	00 00       	nop
      34:	06 c1       	rjmp	.+524    	; 0x242 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__vector_14>
      3c:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__vector_15>
      40:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__vector_16>
      44:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__vector_17>
      48:	0c 94 cd 12 	jmp	0x259a	; 0x259a <__vector_18>
      4c:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__vector_19>
      50:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__vector_20>
      54:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__vector_21>
      58:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__vector_22>
      5c:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <__vector_23>
      60:	f0 c0       	rjmp	.+480    	; 0x242 <__bad_interrupt>
      62:	00 00       	nop
      64:	ee c0       	rjmp	.+476    	; 0x242 <__bad_interrupt>
      66:	00 00       	nop
      68:	ec c0       	rjmp	.+472    	; 0x242 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ea c0       	rjmp	.+468    	; 0x242 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e8 c0       	rjmp	.+464    	; 0x242 <__bad_interrupt>
      72:	00 00       	nop
      74:	e6 c0       	rjmp	.+460    	; 0x242 <__bad_interrupt>
      76:	00 00       	nop
      78:	e4 c0       	rjmp	.+456    	; 0x242 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e2 c0       	rjmp	.+452    	; 0x242 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e0 c0       	rjmp	.+448    	; 0x242 <__bad_interrupt>
      82:	00 00       	nop
      84:	de c0       	rjmp	.+444    	; 0x242 <__bad_interrupt>
      86:	00 00       	nop
      88:	dc c0       	rjmp	.+440    	; 0x242 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	da c0       	rjmp	.+436    	; 0x242 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d8 c0       	rjmp	.+432    	; 0x242 <__bad_interrupt>
      92:	00 00       	nop
      94:	d6 c0       	rjmp	.+428    	; 0x242 <__bad_interrupt>
      96:	00 00       	nop
      98:	d4 c0       	rjmp	.+424    	; 0x242 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d2 c0       	rjmp	.+420    	; 0x242 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d0 c0       	rjmp	.+416    	; 0x242 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ce c0       	rjmp	.+412    	; 0x242 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cc c0       	rjmp	.+408    	; 0x242 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ca c0       	rjmp	.+404    	; 0x242 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c8 c0       	rjmp	.+400    	; 0x242 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c6 c0       	rjmp	.+396    	; 0x242 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c4 c0       	rjmp	.+392    	; 0x242 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <__vector_47>
      c0:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__vector_48>
      c4:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <__vector_49>
      c8:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <__vector_50>
      cc:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__vector_51>
      d0:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__vector_52>
      d4:	b6 c0       	rjmp	.+364    	; 0x242 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b4 c0       	rjmp	.+360    	; 0x242 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b2 c0       	rjmp	.+356    	; 0x242 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b0 c0       	rjmp	.+352    	; 0x242 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ae c0       	rjmp	.+348    	; 0x242 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ac c0       	rjmp	.+344    	; 0x242 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	aa c0       	rjmp	.+340    	; 0x242 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a8 c0       	rjmp	.+336    	; 0x242 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a6 c0       	rjmp	.+332    	; 0x242 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a4 c0       	rjmp	.+328    	; 0x242 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a2 c0       	rjmp	.+324    	; 0x242 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a0 c0       	rjmp	.+320    	; 0x242 <__bad_interrupt>
     102:	00 00       	nop
     104:	9e c0       	rjmp	.+316    	; 0x242 <__bad_interrupt>
     106:	00 00       	nop
     108:	9c c0       	rjmp	.+312    	; 0x242 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9a c0       	rjmp	.+308    	; 0x242 <__bad_interrupt>
     10e:	00 00       	nop
     110:	98 c0       	rjmp	.+304    	; 0x242 <__bad_interrupt>
     112:	00 00       	nop
     114:	96 c0       	rjmp	.+300    	; 0x242 <__bad_interrupt>
     116:	00 00       	nop
     118:	94 c0       	rjmp	.+296    	; 0x242 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	92 c0       	rjmp	.+292    	; 0x242 <__bad_interrupt>
     11e:	00 00       	nop
     120:	90 c0       	rjmp	.+288    	; 0x242 <__bad_interrupt>
     122:	00 00       	nop
     124:	8e c0       	rjmp	.+284    	; 0x242 <__bad_interrupt>
     126:	00 00       	nop
     128:	8c c0       	rjmp	.+280    	; 0x242 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8a c0       	rjmp	.+276    	; 0x242 <__bad_interrupt>
     12e:	00 00       	nop
     130:	88 c0       	rjmp	.+272    	; 0x242 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__vector_77>
     138:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__vector_78>
     13c:	0c 94 15 14 	jmp	0x282a	; 0x282a <__vector_79>
     140:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__vector_80>
     144:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__vector_81>
     148:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__vector_82>
     14c:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__vector_83>
     150:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__vector_84>
     154:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__vector_85>
     158:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__vector_86>
     15c:	72 c0       	rjmp	.+228    	; 0x242 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <__vector_88>
     164:	6e c0       	rjmp	.+220    	; 0x242 <__bad_interrupt>
     166:	00 00       	nop
     168:	6c c0       	rjmp	.+216    	; 0x242 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6a c0       	rjmp	.+212    	; 0x242 <__bad_interrupt>
     16e:	00 00       	nop
     170:	68 c0       	rjmp	.+208    	; 0x242 <__bad_interrupt>
     172:	00 00       	nop
     174:	66 c0       	rjmp	.+204    	; 0x242 <__bad_interrupt>
     176:	00 00       	nop
     178:	64 c0       	rjmp	.+200    	; 0x242 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	62 c0       	rjmp	.+196    	; 0x242 <__bad_interrupt>
     17e:	00 00       	nop
     180:	60 c0       	rjmp	.+192    	; 0x242 <__bad_interrupt>
     182:	00 00       	nop
     184:	5e c0       	rjmp	.+188    	; 0x242 <__bad_interrupt>
     186:	00 00       	nop
     188:	5c c0       	rjmp	.+184    	; 0x242 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5a c0       	rjmp	.+180    	; 0x242 <__bad_interrupt>
     18e:	00 00       	nop
     190:	58 c0       	rjmp	.+176    	; 0x242 <__bad_interrupt>
     192:	00 00       	nop
     194:	56 c0       	rjmp	.+172    	; 0x242 <__bad_interrupt>
     196:	00 00       	nop
     198:	54 c0       	rjmp	.+168    	; 0x242 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	52 c0       	rjmp	.+164    	; 0x242 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	50 c0       	rjmp	.+160    	; 0x242 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4e c0       	rjmp	.+156    	; 0x242 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4c c0       	rjmp	.+152    	; 0x242 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4a c0       	rjmp	.+148    	; 0x242 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	48 c0       	rjmp	.+144    	; 0x242 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	46 c0       	rjmp	.+140    	; 0x242 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	44 c0       	rjmp	.+136    	; 0x242 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	42 c0       	rjmp	.+132    	; 0x242 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	40 c0       	rjmp	.+128    	; 0x242 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3e c0       	rjmp	.+124    	; 0x242 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3c c0       	rjmp	.+120    	; 0x242 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3a c0       	rjmp	.+116    	; 0x242 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	38 c0       	rjmp	.+112    	; 0x242 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	36 c0       	rjmp	.+108    	; 0x242 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	34 c0       	rjmp	.+104    	; 0x242 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	32 c0       	rjmp	.+100    	; 0x242 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	30 c0       	rjmp	.+96     	; 0x242 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2e c0       	rjmp	.+92     	; 0x242 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2c c0       	rjmp	.+88     	; 0x242 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2a c0       	rjmp	.+84     	; 0x242 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	28 c0       	rjmp	.+80     	; 0x242 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <__vector_125>
     1f8:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__vector_126>

000001fc <__c.2144>:
     1fc:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000208 <__ctors_end>:
     208:	11 24       	eor	r1, r1
     20a:	1f be       	out	0x3f, r1	; 63
     20c:	cf ef       	ldi	r28, 0xFF	; 255
     20e:	df e2       	ldi	r29, 0x2F	; 47
     210:	de bf       	out	0x3e, r29	; 62
     212:	cd bf       	out	0x3d, r28	; 61

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e8 ef       	ldi	r30, 0xF8	; 248
     21c:	f1 e5       	ldi	r31, 0x51	; 81
     21e:	02 c0       	rjmp	.+4      	; 0x224 <__do_copy_data+0x10>
     220:	05 90       	lpm	r0, Z+
     222:	0d 92       	st	X+, r0
     224:	ac 3a       	cpi	r26, 0xAC	; 172
     226:	b1 07       	cpc	r27, r17
     228:	d9 f7       	brne	.-10     	; 0x220 <__do_copy_data+0xc>

0000022a <__do_clear_bss>:
     22a:	23 e2       	ldi	r18, 0x23	; 35
     22c:	ac ea       	ldi	r26, 0xAC	; 172
     22e:	b0 e2       	ldi	r27, 0x20	; 32
     230:	01 c0       	rjmp	.+2      	; 0x234 <.do_clear_bss_start>

00000232 <.do_clear_bss_loop>:
     232:	1d 92       	st	X+, r1

00000234 <.do_clear_bss_start>:
     234:	ac 3a       	cpi	r26, 0xAC	; 172
     236:	b2 07       	cpc	r27, r18
     238:	e1 f7       	brne	.-8      	; 0x232 <.do_clear_bss_loop>
     23a:	0e 94 ab 23 	call	0x4756	; 0x4756 <main>
     23e:	0c 94 fa 28 	jmp	0x51f4	; 0x51f4 <_exit>

00000242 <__bad_interrupt>:
     242:	de ce       	rjmp	.-580    	; 0x0 <__vectors>

00000244 <__fixunssfsi>:
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	6b 01       	movw	r12, r22
     252:	7c 01       	movw	r14, r24
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	5f e4       	ldi	r21, 0x4F	; 79
     25c:	98 d4       	rcall	.+2352   	; 0xb8e <__gesf2>
     25e:	87 fd       	sbrc	r24, 7
     260:	0c c0       	rjmp	.+24     	; 0x27a <__fixunssfsi+0x36>
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	5f e4       	ldi	r21, 0x4F	; 79
     26a:	c7 01       	movw	r24, r14
     26c:	b6 01       	movw	r22, r12
     26e:	e1 d2       	rcall	.+1474   	; 0x832 <__subsf3>
     270:	41 d5       	rcall	.+2690   	; 0xcf4 <__fixsfsi>
     272:	8b 01       	movw	r16, r22
     274:	9c 01       	movw	r18, r24
     276:	30 58       	subi	r19, 0x80	; 128
     278:	05 c0       	rjmp	.+10     	; 0x284 <__fixunssfsi+0x40>
     27a:	c7 01       	movw	r24, r14
     27c:	b6 01       	movw	r22, r12
     27e:	3a d5       	rcall	.+2676   	; 0xcf4 <__fixsfsi>
     280:	8b 01       	movw	r16, r22
     282:	9c 01       	movw	r18, r24
     284:	b8 01       	movw	r22, r16
     286:	c9 01       	movw	r24, r18
     288:	1f 91       	pop	r17
     28a:	0f 91       	pop	r16
     28c:	ff 90       	pop	r15
     28e:	ef 90       	pop	r14
     290:	df 90       	pop	r13
     292:	cf 90       	pop	r12
     294:	08 95       	ret

00000296 <__fixunssfdi>:
     296:	a0 e0       	ldi	r26, 0x00	; 0
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	e1 e5       	ldi	r30, 0x51	; 81
     29c:	f1 e0       	ldi	r31, 0x01	; 1
     29e:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__prologue_saves__>
     2a2:	6b 01       	movw	r12, r22
     2a4:	7c 01       	movw	r14, r24
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	40 e8       	ldi	r20, 0x80	; 128
     2ac:	5f e3       	ldi	r21, 0x3F	; 63
     2ae:	9b d4       	rcall	.+2358   	; 0xbe6 <__ltsf2>
     2b0:	87 fd       	sbrc	r24, 7
     2b2:	80 c0       	rjmp	.+256    	; 0x3b4 <__fixunssfdi+0x11e>
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	40 e8       	ldi	r20, 0x80	; 128
     2ba:	5f e4       	ldi	r21, 0x4F	; 79
     2bc:	c7 01       	movw	r24, r14
     2be:	b6 01       	movw	r22, r12
     2c0:	92 d4       	rcall	.+2340   	; 0xbe6 <__ltsf2>
     2c2:	87 ff       	sbrs	r24, 7
     2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <__fixunssfdi+0x42>
     2c6:	c7 01       	movw	r24, r14
     2c8:	b6 01       	movw	r22, r12
     2ca:	bc df       	rcall	.-136    	; 0x244 <__fixunssfsi>
     2cc:	4b 01       	movw	r8, r22
     2ce:	5c 01       	movw	r10, r24
     2d0:	c1 2c       	mov	r12, r1
     2d2:	d1 2c       	mov	r13, r1
     2d4:	76 01       	movw	r14, r12
     2d6:	87 c0       	rjmp	.+270    	; 0x3e6 <__fixunssfdi+0x150>
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	40 e8       	ldi	r20, 0x80	; 128
     2de:	5f e5       	ldi	r21, 0x5F	; 95
     2e0:	c7 01       	movw	r24, r14
     2e2:	b6 01       	movw	r22, r12
     2e4:	80 d4       	rcall	.+2304   	; 0xbe6 <__ltsf2>
     2e6:	87 ff       	sbrs	r24, 7
     2e8:	6e c0       	rjmp	.+220    	; 0x3c6 <__fixunssfdi+0x130>
     2ea:	20 e0       	ldi	r18, 0x00	; 0
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	40 e8       	ldi	r20, 0x80	; 128
     2f0:	5f e2       	ldi	r21, 0x2F	; 47
     2f2:	c7 01       	movw	r24, r14
     2f4:	b6 01       	movw	r22, r12
     2f6:	c9 d2       	rcall	.+1426   	; 0x88a <__mulsf3>
     2f8:	8b 01       	movw	r16, r22
     2fa:	d8 2f       	mov	r29, r24
     2fc:	c9 2f       	mov	r28, r25
     2fe:	95 e0       	ldi	r25, 0x05	; 5
     300:	29 2e       	mov	r2, r25
     302:	31 2c       	mov	r3, r1
     304:	20 e1       	ldi	r18, 0x10	; 16
     306:	c2 2e       	mov	r12, r18
     308:	d1 2c       	mov	r13, r1
     30a:	e1 2c       	mov	r14, r1
     30c:	f1 2c       	mov	r15, r1
     30e:	81 2c       	mov	r8, r1
     310:	91 2c       	mov	r9, r1
     312:	54 01       	movw	r10, r8
     314:	61 e0       	ldi	r22, 0x01	; 1
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0c 2c       	mov	r0, r12
     31e:	04 c0       	rjmp	.+8      	; 0x328 <__fixunssfdi+0x92>
     320:	66 0f       	add	r22, r22
     322:	77 1f       	adc	r23, r23
     324:	88 1f       	adc	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	0a 94       	dec	r0
     32a:	d2 f7       	brpl	.-12     	; 0x320 <__fixunssfdi+0x8a>
     32c:	31 d5       	rcall	.+2658   	; 0xd90 <__floatunsisf>
     32e:	2b 01       	movw	r4, r22
     330:	3c 01       	movw	r6, r24
     332:	76 2f       	mov	r23, r22
     334:	27 2f       	mov	r18, r23
     336:	35 2d       	mov	r19, r5
     338:	46 2d       	mov	r20, r6
     33a:	57 2d       	mov	r21, r7
     33c:	fe 01       	movw	r30, r28
     33e:	60 2f       	mov	r22, r16
     340:	71 2f       	mov	r23, r17
     342:	8f 2f       	mov	r24, r31
     344:	9c 2f       	mov	r25, r28
     346:	23 d4       	rcall	.+2118   	; 0xb8e <__gesf2>
     348:	87 fd       	sbrc	r24, 7
     34a:	11 c0       	rjmp	.+34     	; 0x36e <__fixunssfdi+0xd8>
     34c:	8c 28       	or	r8, r12
     34e:	9d 28       	or	r9, r13
     350:	ae 28       	or	r10, r14
     352:	bf 28       	or	r11, r15
     354:	24 2d       	mov	r18, r4
     356:	35 2d       	mov	r19, r5
     358:	46 2d       	mov	r20, r6
     35a:	57 2d       	mov	r21, r7
     35c:	fe 01       	movw	r30, r28
     35e:	60 2f       	mov	r22, r16
     360:	71 2f       	mov	r23, r17
     362:	8f 2f       	mov	r24, r31
     364:	9c 2f       	mov	r25, r28
     366:	73 d3       	rcall	.+1766   	; 0xa4e <__divsf3>
     368:	8b 01       	movw	r16, r22
     36a:	d8 2f       	mov	r29, r24
     36c:	c9 2f       	mov	r28, r25
     36e:	f6 94       	lsr	r15
     370:	e7 94       	ror	r14
     372:	d7 94       	ror	r13
     374:	c7 94       	ror	r12
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	28 1a       	sub	r2, r24
     37a:	31 08       	sbc	r3, r1
     37c:	59 f6       	brne	.-106    	; 0x314 <__fixunssfdi+0x7e>
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	40 e8       	ldi	r20, 0x80	; 128
     384:	5f e4       	ldi	r21, 0x4F	; 79
     386:	fe 01       	movw	r30, r28
     388:	60 2f       	mov	r22, r16
     38a:	71 2f       	mov	r23, r17
     38c:	8f 2f       	mov	r24, r31
     38e:	9c 2f       	mov	r25, r28
     390:	7c d2       	rcall	.+1272   	; 0x88a <__mulsf3>
     392:	58 df       	rcall	.-336    	; 0x244 <__fixunssfsi>
     394:	dc 01       	movw	r26, r24
     396:	cb 01       	movw	r24, r22
     398:	9c 01       	movw	r18, r24
     39a:	ad 01       	movw	r20, r26
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	08 2d       	mov	r16, r8
     3a6:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <__ashldi3>
     3aa:	49 01       	movw	r8, r18
     3ac:	5a 01       	movw	r10, r20
     3ae:	6b 01       	movw	r12, r22
     3b0:	7c 01       	movw	r14, r24
     3b2:	19 c0       	rjmp	.+50     	; 0x3e6 <__fixunssfdi+0x150>
     3b4:	81 2c       	mov	r8, r1
     3b6:	91 2c       	mov	r9, r1
     3b8:	a1 2c       	mov	r10, r1
     3ba:	b1 2c       	mov	r11, r1
     3bc:	c1 2c       	mov	r12, r1
     3be:	d1 2c       	mov	r13, r1
     3c0:	e1 2c       	mov	r14, r1
     3c2:	f1 2c       	mov	r15, r1
     3c4:	10 c0       	rjmp	.+32     	; 0x3e6 <__fixunssfdi+0x150>
     3c6:	88 24       	eor	r8, r8
     3c8:	8a 94       	dec	r8
     3ca:	99 24       	eor	r9, r9
     3cc:	9a 94       	dec	r9
     3ce:	aa 24       	eor	r10, r10
     3d0:	aa 94       	dec	r10
     3d2:	bb 24       	eor	r11, r11
     3d4:	ba 94       	dec	r11
     3d6:	cc 24       	eor	r12, r12
     3d8:	ca 94       	dec	r12
     3da:	dd 24       	eor	r13, r13
     3dc:	da 94       	dec	r13
     3de:	ee 24       	eor	r14, r14
     3e0:	ea 94       	dec	r14
     3e2:	ff 24       	eor	r15, r15
     3e4:	fa 94       	dec	r15
     3e6:	94 01       	movw	r18, r8
     3e8:	a5 01       	movw	r20, r10
     3ea:	b6 01       	movw	r22, r12
     3ec:	c7 01       	movw	r24, r14
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
     3f2:	e2 e1       	ldi	r30, 0x12	; 18
     3f4:	0c 94 75 25 	jmp	0x4aea	; 0x4aea <__epilogue_restores__>

000003f8 <__floatundisf>:
     3f8:	2f 92       	push	r2
     3fa:	3f 92       	push	r3
     3fc:	4f 92       	push	r4
     3fe:	5f 92       	push	r5
     400:	6f 92       	push	r6
     402:	7f 92       	push	r7
     404:	8f 92       	push	r8
     406:	9f 92       	push	r9
     408:	af 92       	push	r10
     40a:	bf 92       	push	r11
     40c:	cf 92       	push	r12
     40e:	df 92       	push	r13
     410:	ef 92       	push	r14
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	19 01       	movw	r2, r18
     41c:	2a 01       	movw	r4, r20
     41e:	3b 01       	movw	r6, r22
     420:	4c 01       	movw	r8, r24
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	51 01       	movw	r10, r2
     42c:	62 01       	movw	r12, r4
     42e:	73 01       	movw	r14, r6
     430:	84 01       	movw	r16, r8
     432:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <__cmpdi2>
     436:	21 f4       	brne	.+8      	; 0x440 <__floatundisf+0x48>
     438:	b1 01       	movw	r22, r2
     43a:	c2 01       	movw	r24, r4
     43c:	a9 d4       	rcall	.+2386   	; 0xd90 <__floatunsisf>
     43e:	63 c0       	rjmp	.+198    	; 0x506 <__floatundisf+0x10e>
     440:	91 01       	movw	r18, r2
     442:	a2 01       	movw	r20, r4
     444:	b3 01       	movw	r22, r6
     446:	c4 01       	movw	r24, r8
     448:	00 e2       	ldi	r16, 0x20	; 32
     44a:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <__lshrdi3>
     44e:	b9 01       	movw	r22, r18
     450:	ca 01       	movw	r24, r20
     452:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__clzsi2>
     456:	aa 27       	eor	r26, r26
     458:	97 fd       	sbrc	r25, 7
     45a:	a0 95       	com	r26
     45c:	ba 2f       	mov	r27, r26
     45e:	20 e2       	ldi	r18, 0x20	; 32
     460:	c2 2e       	mov	r12, r18
     462:	d1 2c       	mov	r13, r1
     464:	e1 2c       	mov	r14, r1
     466:	f1 2c       	mov	r15, r1
     468:	c8 1a       	sub	r12, r24
     46a:	d9 0a       	sbc	r13, r25
     46c:	ea 0a       	sbc	r14, r26
     46e:	fb 0a       	sbc	r15, r27
     470:	cc 2d       	mov	r28, r12
     472:	91 01       	movw	r18, r2
     474:	a2 01       	movw	r20, r4
     476:	b3 01       	movw	r22, r6
     478:	c4 01       	movw	r24, r8
     47a:	0c 2d       	mov	r16, r12
     47c:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <__lshrdi3>
     480:	60 e2       	ldi	r22, 0x20	; 32
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	6c 19       	sub	r22, r12
     486:	7d 09       	sbc	r23, r13
     488:	04 c0       	rjmp	.+8      	; 0x492 <__floatundisf+0x9a>
     48a:	22 0c       	add	r2, r2
     48c:	33 1c       	adc	r3, r3
     48e:	44 1c       	adc	r4, r4
     490:	55 1c       	adc	r5, r5
     492:	6a 95       	dec	r22
     494:	d2 f7       	brpl	.-12     	; 0x48a <__floatundisf+0x92>
     496:	62 2f       	mov	r22, r18
     498:	23 28       	or	r2, r3
     49a:	24 28       	or	r2, r4
     49c:	25 28       	or	r2, r5
     49e:	09 f4       	brne	.+2      	; 0x4a2 <__floatundisf+0xaa>
     4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <__floatundisf+0xac>
     4a2:	61 60       	ori	r22, 0x01	; 1
     4a4:	73 2f       	mov	r23, r19
     4a6:	ca 01       	movw	r24, r20
     4a8:	73 d4       	rcall	.+2278   	; 0xd90 <__floatunsisf>
     4aa:	3b 01       	movw	r6, r22
     4ac:	4c 01       	movw	r8, r24
     4ae:	80 e2       	ldi	r24, 0x20	; 32
     4b0:	c8 16       	cp	r12, r24
     4b2:	d1 04       	cpc	r13, r1
     4b4:	e1 04       	cpc	r14, r1
     4b6:	f1 04       	cpc	r15, r1
     4b8:	a1 f0       	breq	.+40     	; 0x4e2 <__floatundisf+0xea>
     4ba:	9f e1       	ldi	r25, 0x1F	; 31
     4bc:	c9 16       	cp	r12, r25
     4be:	d1 04       	cpc	r13, r1
     4c0:	e1 04       	cpc	r14, r1
     4c2:	f1 04       	cpc	r15, r1
     4c4:	91 f0       	breq	.+36     	; 0x4ea <__floatundisf+0xf2>
     4c6:	61 e0       	ldi	r22, 0x01	; 1
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <__floatundisf+0xe0>
     4d0:	66 0f       	add	r22, r22
     4d2:	77 1f       	adc	r23, r23
     4d4:	88 1f       	adc	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	ca 95       	dec	r28
     4da:	d2 f7       	brpl	.-12     	; 0x4d0 <__floatundisf+0xd8>
     4dc:	b0 d3       	rcall	.+1888   	; 0xc3e <__floatsisf>
     4de:	27 2f       	mov	r18, r23
     4e0:	08 c0       	rjmp	.+16     	; 0x4f2 <__floatundisf+0xfa>
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	80 e8       	ldi	r24, 0x80	; 128
     4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <__floatundisf+0xf8>
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	9f e4       	ldi	r25, 0x4F	; 79
     4f2:	f2 2f       	mov	r31, r18
     4f4:	26 2f       	mov	r18, r22
     4f6:	3f 2f       	mov	r19, r31
     4f8:	48 2f       	mov	r20, r24
     4fa:	59 2f       	mov	r21, r25
     4fc:	66 2d       	mov	r22, r6
     4fe:	77 2d       	mov	r23, r7
     500:	88 2d       	mov	r24, r8
     502:	99 2d       	mov	r25, r9
     504:	c2 d1       	rcall	.+900    	; 0x88a <__mulsf3>
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	ff 90       	pop	r15
     50e:	ef 90       	pop	r14
     510:	df 90       	pop	r13
     512:	cf 90       	pop	r12
     514:	bf 90       	pop	r11
     516:	af 90       	pop	r10
     518:	9f 90       	pop	r9
     51a:	8f 90       	pop	r8
     51c:	7f 90       	pop	r7
     51e:	6f 90       	pop	r6
     520:	5f 90       	pop	r5
     522:	4f 90       	pop	r4
     524:	3f 90       	pop	r3
     526:	2f 90       	pop	r2
     528:	08 95       	ret

0000052a <_fpadd_parts>:
     52a:	a4 e0       	ldi	r26, 0x04	; 4
     52c:	b0 e0       	ldi	r27, 0x00	; 0
     52e:	eb e9       	ldi	r30, 0x9B	; 155
     530:	f2 e0       	ldi	r31, 0x02	; 2
     532:	0c 94 5e 25 	jmp	0x4abc	; 0x4abc <__prologue_saves__+0x4>
     536:	7c 01       	movw	r14, r24
     538:	6a 01       	movw	r12, r20
     53a:	fc 01       	movw	r30, r24
     53c:	80 81       	ld	r24, Z
     53e:	82 30       	cpi	r24, 0x02	; 2
     540:	08 f4       	brcc	.+2      	; 0x544 <_fpadd_parts+0x1a>
     542:	4a c1       	rjmp	.+660    	; 0x7d8 <_fpadd_parts+0x2ae>
     544:	fb 01       	movw	r30, r22
     546:	90 81       	ld	r25, Z
     548:	92 30       	cpi	r25, 0x02	; 2
     54a:	08 f4       	brcc	.+2      	; 0x54e <_fpadd_parts+0x24>
     54c:	42 c1       	rjmp	.+644    	; 0x7d2 <_fpadd_parts+0x2a8>
     54e:	84 30       	cpi	r24, 0x04	; 4
     550:	79 f4       	brne	.+30     	; 0x570 <_fpadd_parts+0x46>
     552:	94 30       	cpi	r25, 0x04	; 4
     554:	09 f0       	breq	.+2      	; 0x558 <_fpadd_parts+0x2e>
     556:	40 c1       	rjmp	.+640    	; 0x7d8 <_fpadd_parts+0x2ae>
     558:	f7 01       	movw	r30, r14
     55a:	91 81       	ldd	r25, Z+1	; 0x01
     55c:	fb 01       	movw	r30, r22
     55e:	81 81       	ldd	r24, Z+1	; 0x01
     560:	98 17       	cp	r25, r24
     562:	09 f4       	brne	.+2      	; 0x566 <_fpadd_parts+0x3c>
     564:	39 c1       	rjmp	.+626    	; 0x7d8 <_fpadd_parts+0x2ae>
     566:	a2 e9       	ldi	r26, 0x92	; 146
     568:	ea 2e       	mov	r14, r26
     56a:	a0 e2       	ldi	r26, 0x20	; 32
     56c:	fa 2e       	mov	r15, r26
     56e:	34 c1       	rjmp	.+616    	; 0x7d8 <_fpadd_parts+0x2ae>
     570:	94 30       	cpi	r25, 0x04	; 4
     572:	09 f4       	brne	.+2      	; 0x576 <_fpadd_parts+0x4c>
     574:	2e c1       	rjmp	.+604    	; 0x7d2 <_fpadd_parts+0x2a8>
     576:	92 30       	cpi	r25, 0x02	; 2
     578:	91 f4       	brne	.+36     	; 0x59e <_fpadd_parts+0x74>
     57a:	82 30       	cpi	r24, 0x02	; 2
     57c:	09 f0       	breq	.+2      	; 0x580 <_fpadd_parts+0x56>
     57e:	2c c1       	rjmp	.+600    	; 0x7d8 <_fpadd_parts+0x2ae>
     580:	88 e0       	ldi	r24, 0x08	; 8
     582:	f7 01       	movw	r30, r14
     584:	da 01       	movw	r26, r20
     586:	01 90       	ld	r0, Z+
     588:	0d 92       	st	X+, r0
     58a:	8a 95       	dec	r24
     58c:	e1 f7       	brne	.-8      	; 0x586 <_fpadd_parts+0x5c>
     58e:	fb 01       	movw	r30, r22
     590:	81 81       	ldd	r24, Z+1	; 0x01
     592:	f7 01       	movw	r30, r14
     594:	91 81       	ldd	r25, Z+1	; 0x01
     596:	89 23       	and	r24, r25
     598:	fa 01       	movw	r30, r20
     59a:	81 83       	std	Z+1, r24	; 0x01
     59c:	1c c1       	rjmp	.+568    	; 0x7d6 <_fpadd_parts+0x2ac>
     59e:	82 30       	cpi	r24, 0x02	; 2
     5a0:	09 f4       	brne	.+2      	; 0x5a4 <_fpadd_parts+0x7a>
     5a2:	17 c1       	rjmp	.+558    	; 0x7d2 <_fpadd_parts+0x2a8>
     5a4:	f7 01       	movw	r30, r14
     5a6:	82 81       	ldd	r24, Z+2	; 0x02
     5a8:	93 81       	ldd	r25, Z+3	; 0x03
     5aa:	fb 01       	movw	r30, r22
     5ac:	a2 81       	ldd	r26, Z+2	; 0x02
     5ae:	b3 81       	ldd	r27, Z+3	; 0x03
     5b0:	f7 01       	movw	r30, r14
     5b2:	04 81       	ldd	r16, Z+4	; 0x04
     5b4:	15 81       	ldd	r17, Z+5	; 0x05
     5b6:	26 81       	ldd	r18, Z+6	; 0x06
     5b8:	37 81       	ldd	r19, Z+7	; 0x07
     5ba:	fb 01       	movw	r30, r22
     5bc:	84 80       	ldd	r8, Z+4	; 0x04
     5be:	95 80       	ldd	r9, Z+5	; 0x05
     5c0:	a6 80       	ldd	r10, Z+6	; 0x06
     5c2:	b7 80       	ldd	r11, Z+7	; 0x07
     5c4:	fc 01       	movw	r30, r24
     5c6:	ea 1b       	sub	r30, r26
     5c8:	fb 0b       	sbc	r31, r27
     5ca:	af 01       	movw	r20, r30
     5cc:	f7 ff       	sbrs	r31, 7
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <_fpadd_parts+0xae>
     5d0:	44 27       	eor	r20, r20
     5d2:	55 27       	eor	r21, r21
     5d4:	4e 1b       	sub	r20, r30
     5d6:	5f 0b       	sbc	r21, r31
     5d8:	40 32       	cpi	r20, 0x20	; 32
     5da:	51 05       	cpc	r21, r1
     5dc:	0c f0       	brlt	.+2      	; 0x5e0 <_fpadd_parts+0xb6>
     5de:	74 c0       	rjmp	.+232    	; 0x6c8 <_fpadd_parts+0x19e>
     5e0:	1e 16       	cp	r1, r30
     5e2:	1f 06       	cpc	r1, r31
     5e4:	b4 f5       	brge	.+108    	; 0x652 <_fpadd_parts+0x128>
     5e6:	24 01       	movw	r4, r8
     5e8:	35 01       	movw	r6, r10
     5ea:	04 2e       	mov	r0, r20
     5ec:	04 c0       	rjmp	.+8      	; 0x5f6 <_fpadd_parts+0xcc>
     5ee:	76 94       	lsr	r7
     5f0:	67 94       	ror	r6
     5f2:	57 94       	ror	r5
     5f4:	47 94       	ror	r4
     5f6:	0a 94       	dec	r0
     5f8:	d2 f7       	brpl	.-12     	; 0x5ee <_fpadd_parts+0xc4>
     5fa:	49 82       	std	Y+1, r4	; 0x01
     5fc:	5a 82       	std	Y+2, r5	; 0x02
     5fe:	6b 82       	std	Y+3, r6	; 0x03
     600:	7c 82       	std	Y+4, r7	; 0x04
     602:	41 2c       	mov	r4, r1
     604:	51 2c       	mov	r5, r1
     606:	32 01       	movw	r6, r4
     608:	43 94       	inc	r4
     60a:	04 c0       	rjmp	.+8      	; 0x614 <_fpadd_parts+0xea>
     60c:	44 0c       	add	r4, r4
     60e:	55 1c       	adc	r5, r5
     610:	66 1c       	adc	r6, r6
     612:	77 1c       	adc	r7, r7
     614:	4a 95       	dec	r20
     616:	d2 f7       	brpl	.-12     	; 0x60c <_fpadd_parts+0xe2>
     618:	41 e0       	ldi	r20, 0x01	; 1
     61a:	44 1a       	sub	r4, r20
     61c:	51 08       	sbc	r5, r1
     61e:	61 08       	sbc	r6, r1
     620:	71 08       	sbc	r7, r1
     622:	48 20       	and	r4, r8
     624:	59 20       	and	r5, r9
     626:	6a 20       	and	r6, r10
     628:	7b 20       	and	r7, r11
     62a:	81 2c       	mov	r8, r1
     62c:	91 2c       	mov	r9, r1
     62e:	54 01       	movw	r10, r8
     630:	83 94       	inc	r8
     632:	45 28       	or	r4, r5
     634:	46 28       	or	r4, r6
     636:	47 28       	or	r4, r7
     638:	19 f4       	brne	.+6      	; 0x640 <_fpadd_parts+0x116>
     63a:	81 2c       	mov	r8, r1
     63c:	91 2c       	mov	r9, r1
     63e:	54 01       	movw	r10, r8
     640:	49 80       	ldd	r4, Y+1	; 0x01
     642:	5a 80       	ldd	r5, Y+2	; 0x02
     644:	6b 80       	ldd	r6, Y+3	; 0x03
     646:	7c 80       	ldd	r7, Y+4	; 0x04
     648:	84 28       	or	r8, r4
     64a:	95 28       	or	r9, r5
     64c:	a6 28       	or	r10, r6
     64e:	b7 28       	or	r11, r7
     650:	46 c0       	rjmp	.+140    	; 0x6de <_fpadd_parts+0x1b4>
     652:	ef 2b       	or	r30, r31
     654:	09 f4       	brne	.+2      	; 0x658 <_fpadd_parts+0x12e>
     656:	43 c0       	rjmp	.+134    	; 0x6de <_fpadd_parts+0x1b4>
     658:	84 0f       	add	r24, r20
     65a:	95 1f       	adc	r25, r21
     65c:	28 01       	movw	r4, r16
     65e:	39 01       	movw	r6, r18
     660:	04 2e       	mov	r0, r20
     662:	04 c0       	rjmp	.+8      	; 0x66c <_fpadd_parts+0x142>
     664:	76 94       	lsr	r7
     666:	67 94       	ror	r6
     668:	57 94       	ror	r5
     66a:	47 94       	ror	r4
     66c:	0a 94       	dec	r0
     66e:	d2 f7       	brpl	.-12     	; 0x664 <_fpadd_parts+0x13a>
     670:	49 82       	std	Y+1, r4	; 0x01
     672:	5a 82       	std	Y+2, r5	; 0x02
     674:	6b 82       	std	Y+3, r6	; 0x03
     676:	7c 82       	std	Y+4, r7	; 0x04
     678:	41 2c       	mov	r4, r1
     67a:	51 2c       	mov	r5, r1
     67c:	32 01       	movw	r6, r4
     67e:	43 94       	inc	r4
     680:	04 c0       	rjmp	.+8      	; 0x68a <_fpadd_parts+0x160>
     682:	44 0c       	add	r4, r4
     684:	55 1c       	adc	r5, r5
     686:	66 1c       	adc	r6, r6
     688:	77 1c       	adc	r7, r7
     68a:	4a 95       	dec	r20
     68c:	d2 f7       	brpl	.-12     	; 0x682 <_fpadd_parts+0x158>
     68e:	41 e0       	ldi	r20, 0x01	; 1
     690:	44 1a       	sub	r4, r20
     692:	51 08       	sbc	r5, r1
     694:	61 08       	sbc	r6, r1
     696:	71 08       	sbc	r7, r1
     698:	40 22       	and	r4, r16
     69a:	51 22       	and	r5, r17
     69c:	62 22       	and	r6, r18
     69e:	73 22       	and	r7, r19
     6a0:	01 e0       	ldi	r16, 0x01	; 1
     6a2:	10 e0       	ldi	r17, 0x00	; 0
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	45 28       	or	r4, r5
     6aa:	46 28       	or	r4, r6
     6ac:	47 28       	or	r4, r7
     6ae:	19 f4       	brne	.+6      	; 0x6b6 <_fpadd_parts+0x18c>
     6b0:	00 e0       	ldi	r16, 0x00	; 0
     6b2:	10 e0       	ldi	r17, 0x00	; 0
     6b4:	98 01       	movw	r18, r16
     6b6:	49 80       	ldd	r4, Y+1	; 0x01
     6b8:	5a 80       	ldd	r5, Y+2	; 0x02
     6ba:	6b 80       	ldd	r6, Y+3	; 0x03
     6bc:	7c 80       	ldd	r7, Y+4	; 0x04
     6be:	04 29       	or	r16, r4
     6c0:	15 29       	or	r17, r5
     6c2:	26 29       	or	r18, r6
     6c4:	37 29       	or	r19, r7
     6c6:	0b c0       	rjmp	.+22     	; 0x6de <_fpadd_parts+0x1b4>
     6c8:	a8 17       	cp	r26, r24
     6ca:	b9 07       	cpc	r27, r25
     6cc:	24 f4       	brge	.+8      	; 0x6d6 <_fpadd_parts+0x1ac>
     6ce:	81 2c       	mov	r8, r1
     6d0:	91 2c       	mov	r9, r1
     6d2:	54 01       	movw	r10, r8
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <_fpadd_parts+0x1b4>
     6d6:	cd 01       	movw	r24, r26
     6d8:	00 e0       	ldi	r16, 0x00	; 0
     6da:	10 e0       	ldi	r17, 0x00	; 0
     6dc:	98 01       	movw	r18, r16
     6de:	f7 01       	movw	r30, r14
     6e0:	41 81       	ldd	r20, Z+1	; 0x01
     6e2:	fb 01       	movw	r30, r22
     6e4:	51 81       	ldd	r21, Z+1	; 0x01
     6e6:	45 17       	cp	r20, r21
     6e8:	09 f4       	brne	.+2      	; 0x6ec <_fpadd_parts+0x1c2>
     6ea:	46 c0       	rjmp	.+140    	; 0x778 <_fpadd_parts+0x24e>
     6ec:	44 23       	and	r20, r20
     6ee:	49 f0       	breq	.+18     	; 0x702 <_fpadd_parts+0x1d8>
     6f0:	24 01       	movw	r4, r8
     6f2:	35 01       	movw	r6, r10
     6f4:	40 1a       	sub	r4, r16
     6f6:	51 0a       	sbc	r5, r17
     6f8:	62 0a       	sbc	r6, r18
     6fa:	73 0a       	sbc	r7, r19
     6fc:	93 01       	movw	r18, r6
     6fe:	82 01       	movw	r16, r4
     700:	04 c0       	rjmp	.+8      	; 0x70a <_fpadd_parts+0x1e0>
     702:	08 19       	sub	r16, r8
     704:	19 09       	sbc	r17, r9
     706:	2a 09       	sbc	r18, r10
     708:	3b 09       	sbc	r19, r11
     70a:	37 fd       	sbrc	r19, 7
     70c:	05 c0       	rjmp	.+10     	; 0x718 <_fpadd_parts+0x1ee>
     70e:	f6 01       	movw	r30, r12
     710:	11 82       	std	Z+1, r1	; 0x01
     712:	82 83       	std	Z+2, r24	; 0x02
     714:	93 83       	std	Z+3, r25	; 0x03
     716:	0c c0       	rjmp	.+24     	; 0x730 <_fpadd_parts+0x206>
     718:	41 e0       	ldi	r20, 0x01	; 1
     71a:	f6 01       	movw	r30, r12
     71c:	41 83       	std	Z+1, r20	; 0x01
     71e:	82 83       	std	Z+2, r24	; 0x02
     720:	93 83       	std	Z+3, r25	; 0x03
     722:	30 95       	com	r19
     724:	20 95       	com	r18
     726:	10 95       	com	r17
     728:	01 95       	neg	r16
     72a:	1f 4f       	sbci	r17, 0xFF	; 255
     72c:	2f 4f       	sbci	r18, 0xFF	; 255
     72e:	3f 4f       	sbci	r19, 0xFF	; 255
     730:	04 83       	std	Z+4, r16	; 0x04
     732:	15 83       	std	Z+5, r17	; 0x05
     734:	26 83       	std	Z+6, r18	; 0x06
     736:	37 83       	std	Z+7, r19	; 0x07
     738:	0e c0       	rjmp	.+28     	; 0x756 <_fpadd_parts+0x22c>
     73a:	88 0f       	add	r24, r24
     73c:	99 1f       	adc	r25, r25
     73e:	aa 1f       	adc	r26, r26
     740:	bb 1f       	adc	r27, r27
     742:	f6 01       	movw	r30, r12
     744:	84 83       	std	Z+4, r24	; 0x04
     746:	95 83       	std	Z+5, r25	; 0x05
     748:	a6 83       	std	Z+6, r26	; 0x06
     74a:	b7 83       	std	Z+7, r27	; 0x07
     74c:	82 81       	ldd	r24, Z+2	; 0x02
     74e:	93 81       	ldd	r25, Z+3	; 0x03
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	82 83       	std	Z+2, r24	; 0x02
     754:	93 83       	std	Z+3, r25	; 0x03
     756:	f6 01       	movw	r30, r12
     758:	84 81       	ldd	r24, Z+4	; 0x04
     75a:	95 81       	ldd	r25, Z+5	; 0x05
     75c:	a6 81       	ldd	r26, Z+6	; 0x06
     75e:	b7 81       	ldd	r27, Z+7	; 0x07
     760:	ac 01       	movw	r20, r24
     762:	bd 01       	movw	r22, r26
     764:	41 50       	subi	r20, 0x01	; 1
     766:	51 09       	sbc	r21, r1
     768:	61 09       	sbc	r22, r1
     76a:	71 09       	sbc	r23, r1
     76c:	4f 3f       	cpi	r20, 0xFF	; 255
     76e:	5f 4f       	sbci	r21, 0xFF	; 255
     770:	6f 4f       	sbci	r22, 0xFF	; 255
     772:	7f 43       	sbci	r23, 0x3F	; 63
     774:	10 f3       	brcs	.-60     	; 0x73a <_fpadd_parts+0x210>
     776:	0c c0       	rjmp	.+24     	; 0x790 <_fpadd_parts+0x266>
     778:	f6 01       	movw	r30, r12
     77a:	41 83       	std	Z+1, r20	; 0x01
     77c:	82 83       	std	Z+2, r24	; 0x02
     77e:	93 83       	std	Z+3, r25	; 0x03
     780:	08 0d       	add	r16, r8
     782:	19 1d       	adc	r17, r9
     784:	2a 1d       	adc	r18, r10
     786:	3b 1d       	adc	r19, r11
     788:	04 83       	std	Z+4, r16	; 0x04
     78a:	15 83       	std	Z+5, r17	; 0x05
     78c:	26 83       	std	Z+6, r18	; 0x06
     78e:	37 83       	std	Z+7, r19	; 0x07
     790:	83 e0       	ldi	r24, 0x03	; 3
     792:	f6 01       	movw	r30, r12
     794:	80 83       	st	Z, r24
     796:	44 81       	ldd	r20, Z+4	; 0x04
     798:	55 81       	ldd	r21, Z+5	; 0x05
     79a:	66 81       	ldd	r22, Z+6	; 0x06
     79c:	77 81       	ldd	r23, Z+7	; 0x07
     79e:	77 ff       	sbrs	r23, 7
     7a0:	1a c0       	rjmp	.+52     	; 0x7d6 <_fpadd_parts+0x2ac>
     7a2:	db 01       	movw	r26, r22
     7a4:	ca 01       	movw	r24, r20
     7a6:	81 70       	andi	r24, 0x01	; 1
     7a8:	99 27       	eor	r25, r25
     7aa:	aa 27       	eor	r26, r26
     7ac:	bb 27       	eor	r27, r27
     7ae:	76 95       	lsr	r23
     7b0:	67 95       	ror	r22
     7b2:	57 95       	ror	r21
     7b4:	47 95       	ror	r20
     7b6:	84 2b       	or	r24, r20
     7b8:	95 2b       	or	r25, r21
     7ba:	a6 2b       	or	r26, r22
     7bc:	b7 2b       	or	r27, r23
     7be:	84 83       	std	Z+4, r24	; 0x04
     7c0:	95 83       	std	Z+5, r25	; 0x05
     7c2:	a6 83       	std	Z+6, r26	; 0x06
     7c4:	b7 83       	std	Z+7, r27	; 0x07
     7c6:	82 81       	ldd	r24, Z+2	; 0x02
     7c8:	93 81       	ldd	r25, Z+3	; 0x03
     7ca:	01 96       	adiw	r24, 0x01	; 1
     7cc:	82 83       	std	Z+2, r24	; 0x02
     7ce:	93 83       	std	Z+3, r25	; 0x03
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <_fpadd_parts+0x2ac>
     7d2:	7b 01       	movw	r14, r22
     7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <_fpadd_parts+0x2ae>
     7d6:	76 01       	movw	r14, r12
     7d8:	c7 01       	movw	r24, r14
     7da:	24 96       	adiw	r28, 0x04	; 4
     7dc:	e0 e1       	ldi	r30, 0x10	; 16
     7de:	0c 94 77 25 	jmp	0x4aee	; 0x4aee <__epilogue_restores__+0x4>

000007e2 <__addsf3>:
     7e2:	a0 e2       	ldi	r26, 0x20	; 32
     7e4:	b0 e0       	ldi	r27, 0x00	; 0
     7e6:	e7 ef       	ldi	r30, 0xF7	; 247
     7e8:	f3 e0       	ldi	r31, 0x03	; 3
     7ea:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <__prologue_saves__+0x20>
     7ee:	6d 8f       	std	Y+29, r22	; 0x1d
     7f0:	7e 8f       	std	Y+30, r23	; 0x1e
     7f2:	8f 8f       	std	Y+31, r24	; 0x1f
     7f4:	98 a3       	std	Y+32, r25	; 0x20
     7f6:	29 8f       	std	Y+25, r18	; 0x19
     7f8:	3a 8f       	std	Y+26, r19	; 0x1a
     7fa:	4b 8f       	std	Y+27, r20	; 0x1b
     7fc:	5c 8f       	std	Y+28, r21	; 0x1c
     7fe:	be 01       	movw	r22, r28
     800:	6f 5e       	subi	r22, 0xEF	; 239
     802:	7f 4f       	sbci	r23, 0xFF	; 255
     804:	ce 01       	movw	r24, r28
     806:	4d 96       	adiw	r24, 0x1d	; 29
     808:	02 d4       	rcall	.+2052   	; 0x100e <__unpack_f>
     80a:	be 01       	movw	r22, r28
     80c:	67 5f       	subi	r22, 0xF7	; 247
     80e:	7f 4f       	sbci	r23, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	49 96       	adiw	r24, 0x19	; 25
     814:	fc d3       	rcall	.+2040   	; 0x100e <__unpack_f>
     816:	ae 01       	movw	r20, r28
     818:	4f 5f       	subi	r20, 0xFF	; 255
     81a:	5f 4f       	sbci	r21, 0xFF	; 255
     81c:	be 01       	movw	r22, r28
     81e:	67 5f       	subi	r22, 0xF7	; 247
     820:	7f 4f       	sbci	r23, 0xFF	; 255
     822:	ce 01       	movw	r24, r28
     824:	41 96       	adiw	r24, 0x11	; 17
     826:	81 de       	rcall	.-766    	; 0x52a <_fpadd_parts>
     828:	28 d3       	rcall	.+1616   	; 0xe7a <__pack_f>
     82a:	a0 96       	adiw	r28, 0x20	; 32
     82c:	e2 e0       	ldi	r30, 0x02	; 2
     82e:	0c 94 85 25 	jmp	0x4b0a	; 0x4b0a <__epilogue_restores__+0x20>

00000832 <__subsf3>:
     832:	a0 e2       	ldi	r26, 0x20	; 32
     834:	b0 e0       	ldi	r27, 0x00	; 0
     836:	ef e1       	ldi	r30, 0x1F	; 31
     838:	f4 e0       	ldi	r31, 0x04	; 4
     83a:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <__prologue_saves__+0x20>
     83e:	6d 8f       	std	Y+29, r22	; 0x1d
     840:	7e 8f       	std	Y+30, r23	; 0x1e
     842:	8f 8f       	std	Y+31, r24	; 0x1f
     844:	98 a3       	std	Y+32, r25	; 0x20
     846:	29 8f       	std	Y+25, r18	; 0x19
     848:	3a 8f       	std	Y+26, r19	; 0x1a
     84a:	4b 8f       	std	Y+27, r20	; 0x1b
     84c:	5c 8f       	std	Y+28, r21	; 0x1c
     84e:	be 01       	movw	r22, r28
     850:	6f 5e       	subi	r22, 0xEF	; 239
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	ce 01       	movw	r24, r28
     856:	4d 96       	adiw	r24, 0x1d	; 29
     858:	da d3       	rcall	.+1972   	; 0x100e <__unpack_f>
     85a:	be 01       	movw	r22, r28
     85c:	67 5f       	subi	r22, 0xF7	; 247
     85e:	7f 4f       	sbci	r23, 0xFF	; 255
     860:	ce 01       	movw	r24, r28
     862:	49 96       	adiw	r24, 0x19	; 25
     864:	d4 d3       	rcall	.+1960   	; 0x100e <__unpack_f>
     866:	8a 85       	ldd	r24, Y+10	; 0x0a
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	89 27       	eor	r24, r25
     86c:	8a 87       	std	Y+10, r24	; 0x0a
     86e:	ae 01       	movw	r20, r28
     870:	4f 5f       	subi	r20, 0xFF	; 255
     872:	5f 4f       	sbci	r21, 0xFF	; 255
     874:	be 01       	movw	r22, r28
     876:	67 5f       	subi	r22, 0xF7	; 247
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	ce 01       	movw	r24, r28
     87c:	41 96       	adiw	r24, 0x11	; 17
     87e:	55 de       	rcall	.-854    	; 0x52a <_fpadd_parts>
     880:	fc d2       	rcall	.+1528   	; 0xe7a <__pack_f>
     882:	a0 96       	adiw	r28, 0x20	; 32
     884:	e2 e0       	ldi	r30, 0x02	; 2
     886:	0c 94 85 25 	jmp	0x4b0a	; 0x4b0a <__epilogue_restores__+0x20>

0000088a <__mulsf3>:
     88a:	a0 e2       	ldi	r26, 0x20	; 32
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	eb e4       	ldi	r30, 0x4B	; 75
     890:	f4 e0       	ldi	r31, 0x04	; 4
     892:	0c 94 5e 25 	jmp	0x4abc	; 0x4abc <__prologue_saves__+0x4>
     896:	6d 8f       	std	Y+29, r22	; 0x1d
     898:	7e 8f       	std	Y+30, r23	; 0x1e
     89a:	8f 8f       	std	Y+31, r24	; 0x1f
     89c:	98 a3       	std	Y+32, r25	; 0x20
     89e:	29 8f       	std	Y+25, r18	; 0x19
     8a0:	3a 8f       	std	Y+26, r19	; 0x1a
     8a2:	4b 8f       	std	Y+27, r20	; 0x1b
     8a4:	5c 8f       	std	Y+28, r21	; 0x1c
     8a6:	be 01       	movw	r22, r28
     8a8:	6f 5e       	subi	r22, 0xEF	; 239
     8aa:	7f 4f       	sbci	r23, 0xFF	; 255
     8ac:	ce 01       	movw	r24, r28
     8ae:	4d 96       	adiw	r24, 0x1d	; 29
     8b0:	ae d3       	rcall	.+1884   	; 0x100e <__unpack_f>
     8b2:	be 01       	movw	r22, r28
     8b4:	67 5f       	subi	r22, 0xF7	; 247
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	ce 01       	movw	r24, r28
     8ba:	49 96       	adiw	r24, 0x19	; 25
     8bc:	a8 d3       	rcall	.+1872   	; 0x100e <__unpack_f>
     8be:	99 89       	ldd	r25, Y+17	; 0x11
     8c0:	92 30       	cpi	r25, 0x02	; 2
     8c2:	08 f4       	brcc	.+2      	; 0x8c6 <__mulsf3+0x3c>
     8c4:	12 c0       	rjmp	.+36     	; 0x8ea <__mulsf3+0x60>
     8c6:	89 85       	ldd	r24, Y+9	; 0x09
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	08 f4       	brcc	.+2      	; 0x8ce <__mulsf3+0x44>
     8cc:	1a c0       	rjmp	.+52     	; 0x902 <__mulsf3+0x78>
     8ce:	94 30       	cpi	r25, 0x04	; 4
     8d0:	21 f4       	brne	.+8      	; 0x8da <__mulsf3+0x50>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <__mulsf3+0x4e>
     8d6:	b4 c0       	rjmp	.+360    	; 0xa40 <__mulsf3+0x1b6>
     8d8:	08 c0       	rjmp	.+16     	; 0x8ea <__mulsf3+0x60>
     8da:	84 30       	cpi	r24, 0x04	; 4
     8dc:	21 f4       	brne	.+8      	; 0x8e6 <__mulsf3+0x5c>
     8de:	92 30       	cpi	r25, 0x02	; 2
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <__mulsf3+0x5a>
     8e2:	ae c0       	rjmp	.+348    	; 0xa40 <__mulsf3+0x1b6>
     8e4:	0e c0       	rjmp	.+28     	; 0x902 <__mulsf3+0x78>
     8e6:	92 30       	cpi	r25, 0x02	; 2
     8e8:	51 f4       	brne	.+20     	; 0x8fe <__mulsf3+0x74>
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	2a 89       	ldd	r18, Y+18	; 0x12
     8ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     8f0:	29 13       	cpse	r18, r25
     8f2:	01 c0       	rjmp	.+2      	; 0x8f6 <__mulsf3+0x6c>
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	8a 8b       	std	Y+18, r24	; 0x12
     8f8:	ce 01       	movw	r24, r28
     8fa:	41 96       	adiw	r24, 0x11	; 17
     8fc:	a3 c0       	rjmp	.+326    	; 0xa44 <__mulsf3+0x1ba>
     8fe:	82 30       	cpi	r24, 0x02	; 2
     900:	51 f4       	brne	.+20     	; 0x916 <__mulsf3+0x8c>
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	2a 89       	ldd	r18, Y+18	; 0x12
     906:	9a 85       	ldd	r25, Y+10	; 0x0a
     908:	29 13       	cpse	r18, r25
     90a:	01 c0       	rjmp	.+2      	; 0x90e <__mulsf3+0x84>
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	8a 87       	std	Y+10, r24	; 0x0a
     910:	ce 01       	movw	r24, r28
     912:	09 96       	adiw	r24, 0x09	; 9
     914:	97 c0       	rjmp	.+302    	; 0xa44 <__mulsf3+0x1ba>
     916:	8d 88       	ldd	r8, Y+21	; 0x15
     918:	9e 88       	ldd	r9, Y+22	; 0x16
     91a:	af 88       	ldd	r10, Y+23	; 0x17
     91c:	b8 8c       	ldd	r11, Y+24	; 0x18
     91e:	0d 85       	ldd	r16, Y+13	; 0x0d
     920:	1e 85       	ldd	r17, Y+14	; 0x0e
     922:	2f 85       	ldd	r18, Y+15	; 0x0f
     924:	38 89       	ldd	r19, Y+16	; 0x10
     926:	e0 e2       	ldi	r30, 0x20	; 32
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	dc 01       	movw	r26, r24
     930:	c1 2c       	mov	r12, r1
     932:	d1 2c       	mov	r13, r1
     934:	76 01       	movw	r14, r12
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	ba 01       	movw	r22, r20
     93c:	80 fe       	sbrs	r8, 0
     93e:	18 c0       	rjmp	.+48     	; 0x970 <__mulsf3+0xe6>
     940:	40 0f       	add	r20, r16
     942:	51 1f       	adc	r21, r17
     944:	62 1f       	adc	r22, r18
     946:	73 1f       	adc	r23, r19
     948:	8c 0d       	add	r24, r12
     94a:	9d 1d       	adc	r25, r13
     94c:	ae 1d       	adc	r26, r14
     94e:	bf 1d       	adc	r27, r15
     950:	41 2c       	mov	r4, r1
     952:	51 2c       	mov	r5, r1
     954:	32 01       	movw	r6, r4
     956:	43 94       	inc	r4
     958:	40 17       	cp	r20, r16
     95a:	51 07       	cpc	r21, r17
     95c:	62 07       	cpc	r22, r18
     95e:	73 07       	cpc	r23, r19
     960:	18 f0       	brcs	.+6      	; 0x968 <__mulsf3+0xde>
     962:	41 2c       	mov	r4, r1
     964:	51 2c       	mov	r5, r1
     966:	32 01       	movw	r6, r4
     968:	84 0d       	add	r24, r4
     96a:	95 1d       	adc	r25, r5
     96c:	a6 1d       	adc	r26, r6
     96e:	b7 1d       	adc	r27, r7
     970:	cc 0c       	add	r12, r12
     972:	dd 1c       	adc	r13, r13
     974:	ee 1c       	adc	r14, r14
     976:	ff 1c       	adc	r15, r15
     978:	37 ff       	sbrs	r19, 7
     97a:	02 c0       	rjmp	.+4      	; 0x980 <__mulsf3+0xf6>
     97c:	68 94       	set
     97e:	c0 f8       	bld	r12, 0
     980:	00 0f       	add	r16, r16
     982:	11 1f       	adc	r17, r17
     984:	22 1f       	adc	r18, r18
     986:	33 1f       	adc	r19, r19
     988:	b6 94       	lsr	r11
     98a:	a7 94       	ror	r10
     98c:	97 94       	ror	r9
     98e:	87 94       	ror	r8
     990:	31 97       	sbiw	r30, 0x01	; 1
     992:	a1 f6       	brne	.-88     	; 0x93c <__mulsf3+0xb2>
     994:	2b 89       	ldd	r18, Y+19	; 0x13
     996:	3c 89       	ldd	r19, Y+20	; 0x14
     998:	eb 85       	ldd	r30, Y+11	; 0x0b
     99a:	fc 85       	ldd	r31, Y+12	; 0x0c
     99c:	2e 0f       	add	r18, r30
     99e:	3f 1f       	adc	r19, r31
     9a0:	2e 5f       	subi	r18, 0xFE	; 254
     9a2:	3f 4f       	sbci	r19, 0xFF	; 255
     9a4:	2b 83       	std	Y+3, r18	; 0x03
     9a6:	3c 83       	std	Y+4, r19	; 0x04
     9a8:	21 e0       	ldi	r18, 0x01	; 1
     9aa:	ea 89       	ldd	r30, Y+18	; 0x12
     9ac:	3a 85       	ldd	r19, Y+10	; 0x0a
     9ae:	e3 13       	cpse	r30, r19
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <__mulsf3+0x12a>
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	2a 83       	std	Y+2, r18	; 0x02
     9b6:	eb 81       	ldd	r30, Y+3	; 0x03
     9b8:	fc 81       	ldd	r31, Y+4	; 0x04
     9ba:	0c c0       	rjmp	.+24     	; 0x9d4 <__mulsf3+0x14a>
     9bc:	80 ff       	sbrs	r24, 0
     9be:	05 c0       	rjmp	.+10     	; 0x9ca <__mulsf3+0x140>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	70 68       	ori	r23, 0x80	; 128
     9ca:	b6 95       	lsr	r27
     9cc:	a7 95       	ror	r26
     9ce:	97 95       	ror	r25
     9d0:	87 95       	ror	r24
     9d2:	31 96       	adiw	r30, 0x01	; 1
     9d4:	b7 fd       	sbrc	r27, 7
     9d6:	f2 cf       	rjmp	.-28     	; 0x9bc <__mulsf3+0x132>
     9d8:	9f 01       	movw	r18, r30
     9da:	0c c0       	rjmp	.+24     	; 0x9f4 <__mulsf3+0x16a>
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	aa 1f       	adc	r26, r26
     9e2:	bb 1f       	adc	r27, r27
     9e4:	77 fd       	sbrc	r23, 7
     9e6:	81 60       	ori	r24, 0x01	; 1
     9e8:	44 0f       	add	r20, r20
     9ea:	55 1f       	adc	r21, r21
     9ec:	66 1f       	adc	r22, r22
     9ee:	77 1f       	adc	r23, r23
     9f0:	21 50       	subi	r18, 0x01	; 1
     9f2:	31 09       	sbc	r19, r1
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	a1 05       	cpc	r26, r1
     9f8:	e0 e4       	ldi	r30, 0x40	; 64
     9fa:	be 07       	cpc	r27, r30
     9fc:	78 f3       	brcs	.-34     	; 0x9dc <__mulsf3+0x152>
     9fe:	2b 83       	std	Y+3, r18	; 0x03
     a00:	3c 83       	std	Y+4, r19	; 0x04
     a02:	8c 01       	movw	r16, r24
     a04:	9d 01       	movw	r18, r26
     a06:	0f 77       	andi	r16, 0x7F	; 127
     a08:	11 27       	eor	r17, r17
     a0a:	22 27       	eor	r18, r18
     a0c:	33 27       	eor	r19, r19
     a0e:	00 34       	cpi	r16, 0x40	; 64
     a10:	11 05       	cpc	r17, r1
     a12:	21 05       	cpc	r18, r1
     a14:	31 05       	cpc	r19, r1
     a16:	59 f4       	brne	.+22     	; 0xa2e <__mulsf3+0x1a4>
     a18:	87 fd       	sbrc	r24, 7
     a1a:	09 c0       	rjmp	.+18     	; 0xa2e <__mulsf3+0x1a4>
     a1c:	45 2b       	or	r20, r21
     a1e:	46 2b       	or	r20, r22
     a20:	47 2b       	or	r20, r23
     a22:	29 f0       	breq	.+10     	; 0xa2e <__mulsf3+0x1a4>
     a24:	80 5c       	subi	r24, 0xC0	; 192
     a26:	9f 4f       	sbci	r25, 0xFF	; 255
     a28:	af 4f       	sbci	r26, 0xFF	; 255
     a2a:	bf 4f       	sbci	r27, 0xFF	; 255
     a2c:	80 78       	andi	r24, 0x80	; 128
     a2e:	8d 83       	std	Y+5, r24	; 0x05
     a30:	9e 83       	std	Y+6, r25	; 0x06
     a32:	af 83       	std	Y+7, r26	; 0x07
     a34:	b8 87       	std	Y+8, r27	; 0x08
     a36:	83 e0       	ldi	r24, 0x03	; 3
     a38:	89 83       	std	Y+1, r24	; 0x01
     a3a:	ce 01       	movw	r24, r28
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <__mulsf3+0x1ba>
     a40:	82 e9       	ldi	r24, 0x92	; 146
     a42:	90 e2       	ldi	r25, 0x20	; 32
     a44:	1a d2       	rcall	.+1076   	; 0xe7a <__pack_f>
     a46:	a0 96       	adiw	r28, 0x20	; 32
     a48:	e0 e1       	ldi	r30, 0x10	; 16
     a4a:	0c 94 77 25 	jmp	0x4aee	; 0x4aee <__epilogue_restores__+0x4>

00000a4e <__divsf3>:
     a4e:	a8 e1       	ldi	r26, 0x18	; 24
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	ed e2       	ldi	r30, 0x2D	; 45
     a54:	f5 e0       	ldi	r31, 0x05	; 5
     a56:	0c 94 66 25 	jmp	0x4acc	; 0x4acc <__prologue_saves__+0x14>
     a5a:	6d 8b       	std	Y+21, r22	; 0x15
     a5c:	7e 8b       	std	Y+22, r23	; 0x16
     a5e:	8f 8b       	std	Y+23, r24	; 0x17
     a60:	98 8f       	std	Y+24, r25	; 0x18
     a62:	29 8b       	std	Y+17, r18	; 0x11
     a64:	3a 8b       	std	Y+18, r19	; 0x12
     a66:	4b 8b       	std	Y+19, r20	; 0x13
     a68:	5c 8b       	std	Y+20, r21	; 0x14
     a6a:	be 01       	movw	r22, r28
     a6c:	67 5f       	subi	r22, 0xF7	; 247
     a6e:	7f 4f       	sbci	r23, 0xFF	; 255
     a70:	ce 01       	movw	r24, r28
     a72:	45 96       	adiw	r24, 0x15	; 21
     a74:	cc d2       	rcall	.+1432   	; 0x100e <__unpack_f>
     a76:	be 01       	movw	r22, r28
     a78:	6f 5f       	subi	r22, 0xFF	; 255
     a7a:	7f 4f       	sbci	r23, 0xFF	; 255
     a7c:	ce 01       	movw	r24, r28
     a7e:	41 96       	adiw	r24, 0x11	; 17
     a80:	c6 d2       	rcall	.+1420   	; 0x100e <__unpack_f>
     a82:	99 85       	ldd	r25, Y+9	; 0x09
     a84:	92 30       	cpi	r25, 0x02	; 2
     a86:	08 f4       	brcc	.+2      	; 0xa8a <__divsf3+0x3c>
     a88:	75 c0       	rjmp	.+234    	; 0xb74 <__divsf3+0x126>
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__divsf3+0x44>
     a90:	74 c0       	rjmp	.+232    	; 0xb7a <__divsf3+0x12c>
     a92:	2a 85       	ldd	r18, Y+10	; 0x0a
     a94:	3a 81       	ldd	r19, Y+2	; 0x02
     a96:	23 27       	eor	r18, r19
     a98:	2a 87       	std	Y+10, r18	; 0x0a
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	11 f0       	breq	.+4      	; 0xaa2 <__divsf3+0x54>
     a9e:	92 30       	cpi	r25, 0x02	; 2
     aa0:	19 f4       	brne	.+6      	; 0xaa8 <__divsf3+0x5a>
     aa2:	98 13       	cpse	r25, r24
     aa4:	67 c0       	rjmp	.+206    	; 0xb74 <__divsf3+0x126>
     aa6:	6c c0       	rjmp	.+216    	; 0xb80 <__divsf3+0x132>
     aa8:	84 30       	cpi	r24, 0x04	; 4
     aaa:	39 f4       	brne	.+14     	; 0xaba <__divsf3+0x6c>
     aac:	1d 86       	std	Y+13, r1	; 0x0d
     aae:	1e 86       	std	Y+14, r1	; 0x0e
     ab0:	1f 86       	std	Y+15, r1	; 0x0f
     ab2:	18 8a       	std	Y+16, r1	; 0x10
     ab4:	1b 86       	std	Y+11, r1	; 0x0b
     ab6:	1c 86       	std	Y+12, r1	; 0x0c
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__divsf3+0x74>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	29 f4       	brne	.+10     	; 0xac8 <__divsf3+0x7a>
     abe:	84 e0       	ldi	r24, 0x04	; 4
     ac0:	89 87       	std	Y+9, r24	; 0x09
     ac2:	ce 01       	movw	r24, r28
     ac4:	09 96       	adiw	r24, 0x09	; 9
     ac6:	5e c0       	rjmp	.+188    	; 0xb84 <__divsf3+0x136>
     ac8:	8b 85       	ldd	r24, Y+11	; 0x0b
     aca:	9c 85       	ldd	r25, Y+12	; 0x0c
     acc:	2b 81       	ldd	r18, Y+3	; 0x03
     ace:	3c 81       	ldd	r19, Y+4	; 0x04
     ad0:	82 1b       	sub	r24, r18
     ad2:	93 0b       	sbc	r25, r19
     ad4:	8b 87       	std	Y+11, r24	; 0x0b
     ad6:	9c 87       	std	Y+12, r25	; 0x0c
     ad8:	4d 85       	ldd	r20, Y+13	; 0x0d
     ada:	5e 85       	ldd	r21, Y+14	; 0x0e
     adc:	6f 85       	ldd	r22, Y+15	; 0x0f
     ade:	78 89       	ldd	r23, Y+16	; 0x10
     ae0:	cd 80       	ldd	r12, Y+5	; 0x05
     ae2:	de 80       	ldd	r13, Y+6	; 0x06
     ae4:	ef 80       	ldd	r14, Y+7	; 0x07
     ae6:	f8 84       	ldd	r15, Y+8	; 0x08
     ae8:	4c 15       	cp	r20, r12
     aea:	5d 05       	cpc	r21, r13
     aec:	6e 05       	cpc	r22, r14
     aee:	7f 05       	cpc	r23, r15
     af0:	38 f4       	brcc	.+14     	; 0xb00 <__divsf3+0xb2>
     af2:	44 0f       	add	r20, r20
     af4:	55 1f       	adc	r21, r21
     af6:	66 1f       	adc	r22, r22
     af8:	77 1f       	adc	r23, r23
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	8b 87       	std	Y+11, r24	; 0x0b
     afe:	9c 87       	std	Y+12, r25	; 0x0c
     b00:	ef e1       	ldi	r30, 0x1F	; 31
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	00 e0       	ldi	r16, 0x00	; 0
     b06:	10 e0       	ldi	r17, 0x00	; 0
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e4       	ldi	r19, 0x40	; 64
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	dc 01       	movw	r26, r24
     b12:	4c 15       	cp	r20, r12
     b14:	5d 05       	cpc	r21, r13
     b16:	6e 05       	cpc	r22, r14
     b18:	7f 05       	cpc	r23, r15
     b1a:	40 f0       	brcs	.+16     	; 0xb2c <__divsf3+0xde>
     b1c:	80 2b       	or	r24, r16
     b1e:	91 2b       	or	r25, r17
     b20:	a2 2b       	or	r26, r18
     b22:	b3 2b       	or	r27, r19
     b24:	4c 19       	sub	r20, r12
     b26:	5d 09       	sbc	r21, r13
     b28:	6e 09       	sbc	r22, r14
     b2a:	7f 09       	sbc	r23, r15
     b2c:	36 95       	lsr	r19
     b2e:	27 95       	ror	r18
     b30:	17 95       	ror	r17
     b32:	07 95       	ror	r16
     b34:	44 0f       	add	r20, r20
     b36:	55 1f       	adc	r21, r21
     b38:	66 1f       	adc	r22, r22
     b3a:	77 1f       	adc	r23, r23
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	49 f7       	brne	.-46     	; 0xb12 <__divsf3+0xc4>
     b40:	8c 01       	movw	r16, r24
     b42:	9d 01       	movw	r18, r26
     b44:	0f 77       	andi	r16, 0x7F	; 127
     b46:	11 27       	eor	r17, r17
     b48:	22 27       	eor	r18, r18
     b4a:	33 27       	eor	r19, r19
     b4c:	00 34       	cpi	r16, 0x40	; 64
     b4e:	11 05       	cpc	r17, r1
     b50:	21 05       	cpc	r18, r1
     b52:	31 05       	cpc	r19, r1
     b54:	59 f4       	brne	.+22     	; 0xb6c <__divsf3+0x11e>
     b56:	87 fd       	sbrc	r24, 7
     b58:	09 c0       	rjmp	.+18     	; 0xb6c <__divsf3+0x11e>
     b5a:	45 2b       	or	r20, r21
     b5c:	46 2b       	or	r20, r22
     b5e:	47 2b       	or	r20, r23
     b60:	29 f0       	breq	.+10     	; 0xb6c <__divsf3+0x11e>
     b62:	80 5c       	subi	r24, 0xC0	; 192
     b64:	9f 4f       	sbci	r25, 0xFF	; 255
     b66:	af 4f       	sbci	r26, 0xFF	; 255
     b68:	bf 4f       	sbci	r27, 0xFF	; 255
     b6a:	80 78       	andi	r24, 0x80	; 128
     b6c:	8d 87       	std	Y+13, r24	; 0x0d
     b6e:	9e 87       	std	Y+14, r25	; 0x0e
     b70:	af 87       	std	Y+15, r26	; 0x0f
     b72:	b8 8b       	std	Y+16, r27	; 0x10
     b74:	ce 01       	movw	r24, r28
     b76:	09 96       	adiw	r24, 0x09	; 9
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__divsf3+0x136>
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <__divsf3+0x136>
     b80:	82 e9       	ldi	r24, 0x92	; 146
     b82:	90 e2       	ldi	r25, 0x20	; 32
     b84:	7a d1       	rcall	.+756    	; 0xe7a <__pack_f>
     b86:	68 96       	adiw	r28, 0x18	; 24
     b88:	e8 e0       	ldi	r30, 0x08	; 8
     b8a:	0c 94 7f 25 	jmp	0x4afe	; 0x4afe <__epilogue_restores__+0x14>

00000b8e <__gesf2>:
     b8e:	a8 e1       	ldi	r26, 0x18	; 24
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	ed ec       	ldi	r30, 0xCD	; 205
     b94:	f5 e0       	ldi	r31, 0x05	; 5
     b96:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <__prologue_saves__+0x20>
     b9a:	6d 8b       	std	Y+21, r22	; 0x15
     b9c:	7e 8b       	std	Y+22, r23	; 0x16
     b9e:	8f 8b       	std	Y+23, r24	; 0x17
     ba0:	98 8f       	std	Y+24, r25	; 0x18
     ba2:	29 8b       	std	Y+17, r18	; 0x11
     ba4:	3a 8b       	std	Y+18, r19	; 0x12
     ba6:	4b 8b       	std	Y+19, r20	; 0x13
     ba8:	5c 8b       	std	Y+20, r21	; 0x14
     baa:	be 01       	movw	r22, r28
     bac:	67 5f       	subi	r22, 0xF7	; 247
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	ce 01       	movw	r24, r28
     bb2:	45 96       	adiw	r24, 0x15	; 21
     bb4:	2c d2       	rcall	.+1112   	; 0x100e <__unpack_f>
     bb6:	be 01       	movw	r22, r28
     bb8:	6f 5f       	subi	r22, 0xFF	; 255
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	ce 01       	movw	r24, r28
     bbe:	41 96       	adiw	r24, 0x11	; 17
     bc0:	26 d2       	rcall	.+1100   	; 0x100e <__unpack_f>
     bc2:	89 85       	ldd	r24, Y+9	; 0x09
     bc4:	82 30       	cpi	r24, 0x02	; 2
     bc6:	50 f0       	brcs	.+20     	; 0xbdc <__gesf2+0x4e>
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	82 30       	cpi	r24, 0x02	; 2
     bcc:	38 f0       	brcs	.+14     	; 0xbdc <__gesf2+0x4e>
     bce:	be 01       	movw	r22, r28
     bd0:	6f 5f       	subi	r22, 0xFF	; 255
     bd2:	7f 4f       	sbci	r23, 0xFF	; 255
     bd4:	ce 01       	movw	r24, r28
     bd6:	09 96       	adiw	r24, 0x09	; 9
     bd8:	89 d2       	rcall	.+1298   	; 0x10ec <__fpcmp_parts_f>
     bda:	01 c0       	rjmp	.+2      	; 0xbde <__gesf2+0x50>
     bdc:	8f ef       	ldi	r24, 0xFF	; 255
     bde:	68 96       	adiw	r28, 0x18	; 24
     be0:	e2 e0       	ldi	r30, 0x02	; 2
     be2:	0c 94 85 25 	jmp	0x4b0a	; 0x4b0a <__epilogue_restores__+0x20>

00000be6 <__ltsf2>:
     be6:	a8 e1       	ldi	r26, 0x18	; 24
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e9 ef       	ldi	r30, 0xF9	; 249
     bec:	f5 e0       	ldi	r31, 0x05	; 5
     bee:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <__prologue_saves__+0x20>
     bf2:	6d 8b       	std	Y+21, r22	; 0x15
     bf4:	7e 8b       	std	Y+22, r23	; 0x16
     bf6:	8f 8b       	std	Y+23, r24	; 0x17
     bf8:	98 8f       	std	Y+24, r25	; 0x18
     bfa:	29 8b       	std	Y+17, r18	; 0x11
     bfc:	3a 8b       	std	Y+18, r19	; 0x12
     bfe:	4b 8b       	std	Y+19, r20	; 0x13
     c00:	5c 8b       	std	Y+20, r21	; 0x14
     c02:	be 01       	movw	r22, r28
     c04:	67 5f       	subi	r22, 0xF7	; 247
     c06:	7f 4f       	sbci	r23, 0xFF	; 255
     c08:	ce 01       	movw	r24, r28
     c0a:	45 96       	adiw	r24, 0x15	; 21
     c0c:	00 d2       	rcall	.+1024   	; 0x100e <__unpack_f>
     c0e:	be 01       	movw	r22, r28
     c10:	6f 5f       	subi	r22, 0xFF	; 255
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	ce 01       	movw	r24, r28
     c16:	41 96       	adiw	r24, 0x11	; 17
     c18:	fa d1       	rcall	.+1012   	; 0x100e <__unpack_f>
     c1a:	89 85       	ldd	r24, Y+9	; 0x09
     c1c:	82 30       	cpi	r24, 0x02	; 2
     c1e:	50 f0       	brcs	.+20     	; 0xc34 <__ltsf2+0x4e>
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	38 f0       	brcs	.+14     	; 0xc34 <__ltsf2+0x4e>
     c26:	be 01       	movw	r22, r28
     c28:	6f 5f       	subi	r22, 0xFF	; 255
     c2a:	7f 4f       	sbci	r23, 0xFF	; 255
     c2c:	ce 01       	movw	r24, r28
     c2e:	09 96       	adiw	r24, 0x09	; 9
     c30:	5d d2       	rcall	.+1210   	; 0x10ec <__fpcmp_parts_f>
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <__ltsf2+0x50>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	68 96       	adiw	r28, 0x18	; 24
     c38:	e2 e0       	ldi	r30, 0x02	; 2
     c3a:	0c 94 85 25 	jmp	0x4b0a	; 0x4b0a <__epilogue_restores__+0x20>

00000c3e <__floatsisf>:
     c3e:	a8 e0       	ldi	r26, 0x08	; 8
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e5 e2       	ldi	r30, 0x25	; 37
     c44:	f6 e0       	ldi	r31, 0x06	; 6
     c46:	0c 94 6a 25 	jmp	0x4ad4	; 0x4ad4 <__prologue_saves__+0x1c>
     c4a:	23 e0       	ldi	r18, 0x03	; 3
     c4c:	29 83       	std	Y+1, r18	; 0x01
     c4e:	8b 01       	movw	r16, r22
     c50:	9c 01       	movw	r18, r24
     c52:	00 27       	eor	r16, r16
     c54:	37 fd       	sbrc	r19, 7
     c56:	03 95       	inc	r16
     c58:	11 27       	eor	r17, r17
     c5a:	22 27       	eor	r18, r18
     c5c:	33 27       	eor	r19, r19
     c5e:	40 2f       	mov	r20, r16
     c60:	0a 83       	std	Y+2, r16	; 0x02
     c62:	61 15       	cp	r22, r1
     c64:	71 05       	cpc	r23, r1
     c66:	81 05       	cpc	r24, r1
     c68:	91 05       	cpc	r25, r1
     c6a:	19 f4       	brne	.+6      	; 0xc72 <__floatsisf+0x34>
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	89 83       	std	Y+1, r24	; 0x01
     c70:	35 c0       	rjmp	.+106    	; 0xcdc <__floatsisf+0x9e>
     c72:	2e e1       	ldi	r18, 0x1E	; 30
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	2b 83       	std	Y+3, r18	; 0x03
     c78:	3c 83       	std	Y+4, r19	; 0x04
     c7a:	44 23       	and	r20, r20
     c7c:	71 f0       	breq	.+28     	; 0xc9a <__floatsisf+0x5c>
     c7e:	61 15       	cp	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	81 05       	cpc	r24, r1
     c84:	20 e8       	ldi	r18, 0x80	; 128
     c86:	92 07       	cpc	r25, r18
     c88:	69 f1       	breq	.+90     	; 0xce4 <__floatsisf+0xa6>
     c8a:	00 27       	eor	r16, r16
     c8c:	11 27       	eor	r17, r17
     c8e:	98 01       	movw	r18, r16
     c90:	06 1b       	sub	r16, r22
     c92:	17 0b       	sbc	r17, r23
     c94:	28 0b       	sbc	r18, r24
     c96:	39 0b       	sbc	r19, r25
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <__floatsisf+0x60>
     c9a:	8b 01       	movw	r16, r22
     c9c:	9c 01       	movw	r18, r24
     c9e:	c9 01       	movw	r24, r18
     ca0:	b8 01       	movw	r22, r16
     ca2:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__clzsi2>
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	18 16       	cp	r1, r24
     caa:	19 06       	cpc	r1, r25
     cac:	2c f0       	brlt	.+10     	; 0xcb8 <__floatsisf+0x7a>
     cae:	0d 83       	std	Y+5, r16	; 0x05
     cb0:	1e 83       	std	Y+6, r17	; 0x06
     cb2:	2f 83       	std	Y+7, r18	; 0x07
     cb4:	38 87       	std	Y+8, r19	; 0x08
     cb6:	12 c0       	rjmp	.+36     	; 0xcdc <__floatsisf+0x9e>
     cb8:	08 2e       	mov	r0, r24
     cba:	04 c0       	rjmp	.+8      	; 0xcc4 <__floatsisf+0x86>
     cbc:	00 0f       	add	r16, r16
     cbe:	11 1f       	adc	r17, r17
     cc0:	22 1f       	adc	r18, r18
     cc2:	33 1f       	adc	r19, r19
     cc4:	0a 94       	dec	r0
     cc6:	d2 f7       	brpl	.-12     	; 0xcbc <__floatsisf+0x7e>
     cc8:	0d 83       	std	Y+5, r16	; 0x05
     cca:	1e 83       	std	Y+6, r17	; 0x06
     ccc:	2f 83       	std	Y+7, r18	; 0x07
     cce:	38 87       	std	Y+8, r19	; 0x08
     cd0:	2e e1       	ldi	r18, 0x1E	; 30
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	28 1b       	sub	r18, r24
     cd6:	39 0b       	sbc	r19, r25
     cd8:	2b 83       	std	Y+3, r18	; 0x03
     cda:	3c 83       	std	Y+4, r19	; 0x04
     cdc:	ce 01       	movw	r24, r28
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	cc d0       	rcall	.+408    	; 0xe7a <__pack_f>
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <__floatsisf+0xae>
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	9f ec       	ldi	r25, 0xCF	; 207
     cec:	28 96       	adiw	r28, 0x08	; 8
     cee:	e4 e0       	ldi	r30, 0x04	; 4
     cf0:	0c 94 83 25 	jmp	0x4b06	; 0x4b06 <__epilogue_restores__+0x1c>

00000cf4 <__fixsfsi>:
     cf4:	ac e0       	ldi	r26, 0x0C	; 12
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e0 e8       	ldi	r30, 0x80	; 128
     cfa:	f6 e0       	ldi	r31, 0x06	; 6
     cfc:	0c 94 6a 25 	jmp	0x4ad4	; 0x4ad4 <__prologue_saves__+0x1c>
     d00:	69 87       	std	Y+9, r22	; 0x09
     d02:	7a 87       	std	Y+10, r23	; 0x0a
     d04:	8b 87       	std	Y+11, r24	; 0x0b
     d06:	9c 87       	std	Y+12, r25	; 0x0c
     d08:	be 01       	movw	r22, r28
     d0a:	6f 5f       	subi	r22, 0xFF	; 255
     d0c:	7f 4f       	sbci	r23, 0xFF	; 255
     d0e:	ce 01       	movw	r24, r28
     d10:	09 96       	adiw	r24, 0x09	; 9
     d12:	7d d1       	rcall	.+762    	; 0x100e <__unpack_f>
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	91 f1       	breq	.+100    	; 0xd7e <__fixsfsi+0x8a>
     d1a:	82 30       	cpi	r24, 0x02	; 2
     d1c:	80 f1       	brcs	.+96     	; 0xd7e <__fixsfsi+0x8a>
     d1e:	84 30       	cpi	r24, 0x04	; 4
     d20:	41 f4       	brne	.+16     	; 0xd32 <__fixsfsi+0x3e>
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	88 23       	and	r24, r24
     d26:	31 f1       	breq	.+76     	; 0xd74 <__fixsfsi+0x80>
     d28:	00 e0       	ldi	r16, 0x00	; 0
     d2a:	10 e0       	ldi	r17, 0x00	; 0
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e8       	ldi	r19, 0x80	; 128
     d30:	29 c0       	rjmp	.+82     	; 0xd84 <__fixsfsi+0x90>
     d32:	2b 81       	ldd	r18, Y+3	; 0x03
     d34:	3c 81       	ldd	r19, Y+4	; 0x04
     d36:	37 fd       	sbrc	r19, 7
     d38:	22 c0       	rjmp	.+68     	; 0xd7e <__fixsfsi+0x8a>
     d3a:	2f 31       	cpi	r18, 0x1F	; 31
     d3c:	31 05       	cpc	r19, r1
     d3e:	8c f7       	brge	.-30     	; 0xd22 <__fixsfsi+0x2e>
     d40:	8e e1       	ldi	r24, 0x1E	; 30
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	82 1b       	sub	r24, r18
     d46:	93 0b       	sbc	r25, r19
     d48:	0d 81       	ldd	r16, Y+5	; 0x05
     d4a:	1e 81       	ldd	r17, Y+6	; 0x06
     d4c:	2f 81       	ldd	r18, Y+7	; 0x07
     d4e:	38 85       	ldd	r19, Y+8	; 0x08
     d50:	04 c0       	rjmp	.+8      	; 0xd5a <__fixsfsi+0x66>
     d52:	36 95       	lsr	r19
     d54:	27 95       	ror	r18
     d56:	17 95       	ror	r17
     d58:	07 95       	ror	r16
     d5a:	8a 95       	dec	r24
     d5c:	d2 f7       	brpl	.-12     	; 0xd52 <__fixsfsi+0x5e>
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	88 23       	and	r24, r24
     d62:	81 f0       	breq	.+32     	; 0xd84 <__fixsfsi+0x90>
     d64:	30 95       	com	r19
     d66:	20 95       	com	r18
     d68:	10 95       	com	r17
     d6a:	01 95       	neg	r16
     d6c:	1f 4f       	sbci	r17, 0xFF	; 255
     d6e:	2f 4f       	sbci	r18, 0xFF	; 255
     d70:	3f 4f       	sbci	r19, 0xFF	; 255
     d72:	08 c0       	rjmp	.+16     	; 0xd84 <__fixsfsi+0x90>
     d74:	0f ef       	ldi	r16, 0xFF	; 255
     d76:	1f ef       	ldi	r17, 0xFF	; 255
     d78:	2f ef       	ldi	r18, 0xFF	; 255
     d7a:	3f e7       	ldi	r19, 0x7F	; 127
     d7c:	03 c0       	rjmp	.+6      	; 0xd84 <__fixsfsi+0x90>
     d7e:	00 e0       	ldi	r16, 0x00	; 0
     d80:	10 e0       	ldi	r17, 0x00	; 0
     d82:	98 01       	movw	r18, r16
     d84:	b8 01       	movw	r22, r16
     d86:	c9 01       	movw	r24, r18
     d88:	2c 96       	adiw	r28, 0x0c	; 12
     d8a:	e4 e0       	ldi	r30, 0x04	; 4
     d8c:	0c 94 83 25 	jmp	0x4b06	; 0x4b06 <__epilogue_restores__+0x1c>

00000d90 <__floatunsisf>:
     d90:	a8 e0       	ldi	r26, 0x08	; 8
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	ee ec       	ldi	r30, 0xCE	; 206
     d96:	f6 e0       	ldi	r31, 0x06	; 6
     d98:	0c 94 66 25 	jmp	0x4acc	; 0x4acc <__prologue_saves__+0x14>
     d9c:	8b 01       	movw	r16, r22
     d9e:	9c 01       	movw	r18, r24
     da0:	1a 82       	std	Y+2, r1	; 0x02
     da2:	61 15       	cp	r22, r1
     da4:	71 05       	cpc	r23, r1
     da6:	81 05       	cpc	r24, r1
     da8:	91 05       	cpc	r25, r1
     daa:	19 f4       	brne	.+6      	; 0xdb2 <__floatunsisf+0x22>
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	5d c0       	rjmp	.+186    	; 0xe6c <__floatunsisf+0xdc>
     db2:	83 e0       	ldi	r24, 0x03	; 3
     db4:	89 83       	std	Y+1, r24	; 0x01
     db6:	4e e1       	ldi	r20, 0x1E	; 30
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	4b 83       	std	Y+3, r20	; 0x03
     dbc:	5c 83       	std	Y+4, r21	; 0x04
     dbe:	c9 01       	movw	r24, r18
     dc0:	b8 01       	movw	r22, r16
     dc2:	0e 94 43 25 	call	0x4a86	; 0x4a86 <__clzsi2>
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	97 ff       	sbrs	r25, 7
     dca:	39 c0       	rjmp	.+114    	; 0xe3e <__floatunsisf+0xae>
     dcc:	ee 27       	eor	r30, r30
     dce:	ff 27       	eor	r31, r31
     dd0:	e8 1b       	sub	r30, r24
     dd2:	f9 0b       	sbc	r31, r25
     dd4:	41 e0       	ldi	r20, 0x01	; 1
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	0e 2e       	mov	r0, r30
     dde:	04 c0       	rjmp	.+8      	; 0xde8 <__floatunsisf+0x58>
     de0:	44 0f       	add	r20, r20
     de2:	55 1f       	adc	r21, r21
     de4:	66 1f       	adc	r22, r22
     de6:	77 1f       	adc	r23, r23
     de8:	0a 94       	dec	r0
     dea:	d2 f7       	brpl	.-12     	; 0xde0 <__floatunsisf+0x50>
     dec:	41 50       	subi	r20, 0x01	; 1
     dee:	51 09       	sbc	r21, r1
     df0:	61 09       	sbc	r22, r1
     df2:	71 09       	sbc	r23, r1
     df4:	40 23       	and	r20, r16
     df6:	51 23       	and	r21, r17
     df8:	62 23       	and	r22, r18
     dfa:	73 23       	and	r23, r19
     dfc:	c1 2c       	mov	r12, r1
     dfe:	d1 2c       	mov	r13, r1
     e00:	76 01       	movw	r14, r12
     e02:	c3 94       	inc	r12
     e04:	45 2b       	or	r20, r21
     e06:	46 2b       	or	r20, r22
     e08:	47 2b       	or	r20, r23
     e0a:	19 f4       	brne	.+6      	; 0xe12 <__floatunsisf+0x82>
     e0c:	c1 2c       	mov	r12, r1
     e0e:	d1 2c       	mov	r13, r1
     e10:	76 01       	movw	r14, r12
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <__floatunsisf+0x8c>
     e14:	36 95       	lsr	r19
     e16:	27 95       	ror	r18
     e18:	17 95       	ror	r17
     e1a:	07 95       	ror	r16
     e1c:	ea 95       	dec	r30
     e1e:	d2 f7       	brpl	.-12     	; 0xe14 <__floatunsisf+0x84>
     e20:	0c 29       	or	r16, r12
     e22:	1d 29       	or	r17, r13
     e24:	2e 29       	or	r18, r14
     e26:	3f 29       	or	r19, r15
     e28:	0d 83       	std	Y+5, r16	; 0x05
     e2a:	1e 83       	std	Y+6, r17	; 0x06
     e2c:	2f 83       	std	Y+7, r18	; 0x07
     e2e:	38 87       	std	Y+8, r19	; 0x08
     e30:	2e e1       	ldi	r18, 0x1E	; 30
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	28 1b       	sub	r18, r24
     e36:	39 0b       	sbc	r19, r25
     e38:	2b 83       	std	Y+3, r18	; 0x03
     e3a:	3c 83       	std	Y+4, r19	; 0x04
     e3c:	17 c0       	rjmp	.+46     	; 0xe6c <__floatunsisf+0xdc>
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	29 f4       	brne	.+10     	; 0xe4c <__floatunsisf+0xbc>
     e42:	0d 83       	std	Y+5, r16	; 0x05
     e44:	1e 83       	std	Y+6, r17	; 0x06
     e46:	2f 83       	std	Y+7, r18	; 0x07
     e48:	38 87       	std	Y+8, r19	; 0x08
     e4a:	10 c0       	rjmp	.+32     	; 0xe6c <__floatunsisf+0xdc>
     e4c:	08 2e       	mov	r0, r24
     e4e:	04 c0       	rjmp	.+8      	; 0xe58 <__floatunsisf+0xc8>
     e50:	00 0f       	add	r16, r16
     e52:	11 1f       	adc	r17, r17
     e54:	22 1f       	adc	r18, r18
     e56:	33 1f       	adc	r19, r19
     e58:	0a 94       	dec	r0
     e5a:	d2 f7       	brpl	.-12     	; 0xe50 <__floatunsisf+0xc0>
     e5c:	0d 83       	std	Y+5, r16	; 0x05
     e5e:	1e 83       	std	Y+6, r17	; 0x06
     e60:	2f 83       	std	Y+7, r18	; 0x07
     e62:	38 87       	std	Y+8, r19	; 0x08
     e64:	48 1b       	sub	r20, r24
     e66:	59 0b       	sbc	r21, r25
     e68:	4b 83       	std	Y+3, r20	; 0x03
     e6a:	5c 83       	std	Y+4, r21	; 0x04
     e6c:	ce 01       	movw	r24, r28
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	04 d0       	rcall	.+8      	; 0xe7a <__pack_f>
     e72:	28 96       	adiw	r28, 0x08	; 8
     e74:	e8 e0       	ldi	r30, 0x08	; 8
     e76:	0c 94 7f 25 	jmp	0x4afe	; 0x4afe <__epilogue_restores__+0x14>

00000e7a <__pack_f>:
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	dc 01       	movw	r26, r24
     e84:	14 96       	adiw	r26, 0x04	; 4
     e86:	4d 91       	ld	r20, X+
     e88:	5d 91       	ld	r21, X+
     e8a:	6d 91       	ld	r22, X+
     e8c:	7c 91       	ld	r23, X
     e8e:	17 97       	sbiw	r26, 0x07	; 7
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	ec 91       	ld	r30, X
     e94:	11 97       	sbiw	r26, 0x01	; 1
     e96:	8c 91       	ld	r24, X
     e98:	82 30       	cpi	r24, 0x02	; 2
     e9a:	20 f4       	brcc	.+8      	; 0xea4 <__pack_f+0x2a>
     e9c:	60 61       	ori	r22, 0x10	; 16
     e9e:	8f ef       	ldi	r24, 0xFF	; 255
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	a6 c0       	rjmp	.+332    	; 0xff0 <__pack_f+0x176>
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	09 f4       	brne	.+2      	; 0xeaa <__pack_f+0x30>
     ea8:	9e c0       	rjmp	.+316    	; 0xfe6 <__pack_f+0x16c>
     eaa:	82 30       	cpi	r24, 0x02	; 2
     eac:	09 f4       	brne	.+2      	; 0xeb0 <__pack_f+0x36>
     eae:	95 c0       	rjmp	.+298    	; 0xfda <__pack_f+0x160>
     eb0:	41 15       	cp	r20, r1
     eb2:	51 05       	cpc	r21, r1
     eb4:	61 05       	cpc	r22, r1
     eb6:	71 05       	cpc	r23, r1
     eb8:	09 f4       	brne	.+2      	; 0xebc <__pack_f+0x42>
     eba:	92 c0       	rjmp	.+292    	; 0xfe0 <__pack_f+0x166>
     ebc:	12 96       	adiw	r26, 0x02	; 2
     ebe:	2d 91       	ld	r18, X+
     ec0:	3c 91       	ld	r19, X
     ec2:	13 97       	sbiw	r26, 0x03	; 3
     ec4:	22 38       	cpi	r18, 0x82	; 130
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	38 07       	cpc	r19, r24
     eca:	0c f0       	brlt	.+2      	; 0xece <__pack_f+0x54>
     ecc:	58 c0       	rjmp	.+176    	; 0xf7e <__pack_f+0x104>
     ece:	c2 e8       	ldi	r28, 0x82	; 130
     ed0:	df ef       	ldi	r29, 0xFF	; 255
     ed2:	c2 1b       	sub	r28, r18
     ed4:	d3 0b       	sbc	r29, r19
     ed6:	ca 31       	cpi	r28, 0x1A	; 26
     ed8:	d1 05       	cpc	r29, r1
     eda:	6c f5       	brge	.+90     	; 0xf36 <__pack_f+0xbc>
     edc:	8a 01       	movw	r16, r20
     ede:	9b 01       	movw	r18, r22
     ee0:	0c 2e       	mov	r0, r28
     ee2:	04 c0       	rjmp	.+8      	; 0xeec <__pack_f+0x72>
     ee4:	36 95       	lsr	r19
     ee6:	27 95       	ror	r18
     ee8:	17 95       	ror	r17
     eea:	07 95       	ror	r16
     eec:	0a 94       	dec	r0
     eee:	d2 f7       	brpl	.-12     	; 0xee4 <__pack_f+0x6a>
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	a0 e0       	ldi	r26, 0x00	; 0
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	0c 2e       	mov	r0, r28
     efa:	04 c0       	rjmp	.+8      	; 0xf04 <__pack_f+0x8a>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	aa 1f       	adc	r26, r26
     f02:	bb 1f       	adc	r27, r27
     f04:	0a 94       	dec	r0
     f06:	d2 f7       	brpl	.-12     	; 0xefc <__pack_f+0x82>
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	a1 09       	sbc	r26, r1
     f0c:	b1 09       	sbc	r27, r1
     f0e:	84 23       	and	r24, r20
     f10:	95 23       	and	r25, r21
     f12:	a6 23       	and	r26, r22
     f14:	b7 23       	and	r27, r23
     f16:	41 e0       	ldi	r20, 0x01	; 1
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	89 2b       	or	r24, r25
     f20:	8a 2b       	or	r24, r26
     f22:	8b 2b       	or	r24, r27
     f24:	19 f4       	brne	.+6      	; 0xf2c <__pack_f+0xb2>
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	ba 01       	movw	r22, r20
     f2c:	40 2b       	or	r20, r16
     f2e:	51 2b       	or	r21, r17
     f30:	62 2b       	or	r22, r18
     f32:	73 2b       	or	r23, r19
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <__pack_f+0xc2>
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	ba 01       	movw	r22, r20
     f3c:	db 01       	movw	r26, r22
     f3e:	ca 01       	movw	r24, r20
     f40:	8f 77       	andi	r24, 0x7F	; 127
     f42:	99 27       	eor	r25, r25
     f44:	aa 27       	eor	r26, r26
     f46:	bb 27       	eor	r27, r27
     f48:	80 34       	cpi	r24, 0x40	; 64
     f4a:	91 05       	cpc	r25, r1
     f4c:	a1 05       	cpc	r26, r1
     f4e:	b1 05       	cpc	r27, r1
     f50:	39 f4       	brne	.+14     	; 0xf60 <__pack_f+0xe6>
     f52:	47 ff       	sbrs	r20, 7
     f54:	09 c0       	rjmp	.+18     	; 0xf68 <__pack_f+0xee>
     f56:	40 5c       	subi	r20, 0xC0	; 192
     f58:	5f 4f       	sbci	r21, 0xFF	; 255
     f5a:	6f 4f       	sbci	r22, 0xFF	; 255
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <__pack_f+0xee>
     f60:	41 5c       	subi	r20, 0xC1	; 193
     f62:	5f 4f       	sbci	r21, 0xFF	; 255
     f64:	6f 4f       	sbci	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	41 15       	cp	r20, r1
     f6e:	51 05       	cpc	r21, r1
     f70:	61 05       	cpc	r22, r1
     f72:	20 e4       	ldi	r18, 0x40	; 64
     f74:	72 07       	cpc	r23, r18
     f76:	48 f5       	brcc	.+82     	; 0xfca <__pack_f+0x150>
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	26 c0       	rjmp	.+76     	; 0xfca <__pack_f+0x150>
     f7e:	20 38       	cpi	r18, 0x80	; 128
     f80:	31 05       	cpc	r19, r1
     f82:	8c f5       	brge	.+98     	; 0xfe6 <__pack_f+0x16c>
     f84:	db 01       	movw	r26, r22
     f86:	ca 01       	movw	r24, r20
     f88:	8f 77       	andi	r24, 0x7F	; 127
     f8a:	99 27       	eor	r25, r25
     f8c:	aa 27       	eor	r26, r26
     f8e:	bb 27       	eor	r27, r27
     f90:	80 34       	cpi	r24, 0x40	; 64
     f92:	91 05       	cpc	r25, r1
     f94:	a1 05       	cpc	r26, r1
     f96:	b1 05       	cpc	r27, r1
     f98:	39 f4       	brne	.+14     	; 0xfa8 <__pack_f+0x12e>
     f9a:	47 ff       	sbrs	r20, 7
     f9c:	09 c0       	rjmp	.+18     	; 0xfb0 <__pack_f+0x136>
     f9e:	40 5c       	subi	r20, 0xC0	; 192
     fa0:	5f 4f       	sbci	r21, 0xFF	; 255
     fa2:	6f 4f       	sbci	r22, 0xFF	; 255
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	04 c0       	rjmp	.+8      	; 0xfb0 <__pack_f+0x136>
     fa8:	41 5c       	subi	r20, 0xC1	; 193
     faa:	5f 4f       	sbci	r21, 0xFF	; 255
     fac:	6f 4f       	sbci	r22, 0xFF	; 255
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	77 fd       	sbrc	r23, 7
     fb2:	04 c0       	rjmp	.+8      	; 0xfbc <__pack_f+0x142>
     fb4:	c9 01       	movw	r24, r18
     fb6:	81 58       	subi	r24, 0x81	; 129
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	07 c0       	rjmp	.+14     	; 0xfca <__pack_f+0x150>
     fbc:	76 95       	lsr	r23
     fbe:	67 95       	ror	r22
     fc0:	57 95       	ror	r21
     fc2:	47 95       	ror	r20
     fc4:	c9 01       	movw	r24, r18
     fc6:	80 58       	subi	r24, 0x80	; 128
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	97 e0       	ldi	r25, 0x07	; 7
     fcc:	76 95       	lsr	r23
     fce:	67 95       	ror	r22
     fd0:	57 95       	ror	r21
     fd2:	47 95       	ror	r20
     fd4:	9a 95       	dec	r25
     fd6:	d1 f7       	brne	.-12     	; 0xfcc <__pack_f+0x152>
     fd8:	0b c0       	rjmp	.+22     	; 0xff0 <__pack_f+0x176>
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	05 c0       	rjmp	.+10     	; 0xfea <__pack_f+0x170>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	05 c0       	rjmp	.+10     	; 0xff0 <__pack_f+0x176>
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	ba 01       	movw	r22, r20
     ff0:	98 2f       	mov	r25, r24
     ff2:	96 95       	lsr	r25
     ff4:	e0 fb       	bst	r30, 0
     ff6:	97 f9       	bld	r25, 7
     ff8:	36 2f       	mov	r19, r22
     ffa:	80 fb       	bst	r24, 0
     ffc:	37 f9       	bld	r19, 7
     ffe:	64 2f       	mov	r22, r20
    1000:	75 2f       	mov	r23, r21
    1002:	83 2f       	mov	r24, r19
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	08 95       	ret

0000100e <__unpack_f>:
    100e:	cf 92       	push	r12
    1010:	df 92       	push	r13
    1012:	ef 92       	push	r14
    1014:	dc 01       	movw	r26, r24
    1016:	fb 01       	movw	r30, r22
    1018:	cc 90       	ld	r12, X
    101a:	11 96       	adiw	r26, 0x01	; 1
    101c:	dc 90       	ld	r13, X
    101e:	11 97       	sbiw	r26, 0x01	; 1
    1020:	12 96       	adiw	r26, 0x02	; 2
    1022:	8c 91       	ld	r24, X
    1024:	12 97       	sbiw	r26, 0x02	; 2
    1026:	3f e7       	ldi	r19, 0x7F	; 127
    1028:	e3 2e       	mov	r14, r19
    102a:	e8 22       	and	r14, r24
    102c:	6e 2d       	mov	r22, r14
    102e:	a6 01       	movw	r20, r12
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	98 2f       	mov	r25, r24
    1034:	99 1f       	adc	r25, r25
    1036:	99 27       	eor	r25, r25
    1038:	99 1f       	adc	r25, r25
    103a:	13 96       	adiw	r26, 0x03	; 3
    103c:	2c 91       	ld	r18, X
    103e:	82 2f       	mov	r24, r18
    1040:	88 0f       	add	r24, r24
    1042:	89 2b       	or	r24, r25
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	27 fb       	bst	r18, 7
    1048:	22 27       	eor	r18, r18
    104a:	20 f9       	bld	r18, 0
    104c:	21 83       	std	Z+1, r18	; 0x01
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	29 f5       	brne	.+74     	; 0x109c <__unpack_f+0x8e>
    1052:	41 15       	cp	r20, r1
    1054:	51 05       	cpc	r21, r1
    1056:	61 05       	cpc	r22, r1
    1058:	71 05       	cpc	r23, r1
    105a:	11 f4       	brne	.+4      	; 0x1060 <__unpack_f+0x52>
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	27 c0       	rjmp	.+78     	; 0x10ae <__unpack_f+0xa0>
    1060:	82 e8       	ldi	r24, 0x82	; 130
    1062:	9f ef       	ldi	r25, 0xFF	; 255
    1064:	82 83       	std	Z+2, r24	; 0x02
    1066:	93 83       	std	Z+3, r25	; 0x03
    1068:	27 e0       	ldi	r18, 0x07	; 7
    106a:	44 0f       	add	r20, r20
    106c:	55 1f       	adc	r21, r21
    106e:	66 1f       	adc	r22, r22
    1070:	77 1f       	adc	r23, r23
    1072:	2a 95       	dec	r18
    1074:	d1 f7       	brne	.-12     	; 0x106a <__unpack_f+0x5c>
    1076:	83 e0       	ldi	r24, 0x03	; 3
    1078:	80 83       	st	Z, r24
    107a:	09 c0       	rjmp	.+18     	; 0x108e <__unpack_f+0x80>
    107c:	44 0f       	add	r20, r20
    107e:	55 1f       	adc	r21, r21
    1080:	66 1f       	adc	r22, r22
    1082:	77 1f       	adc	r23, r23
    1084:	82 81       	ldd	r24, Z+2	; 0x02
    1086:	93 81       	ldd	r25, Z+3	; 0x03
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	82 83       	std	Z+2, r24	; 0x02
    108c:	93 83       	std	Z+3, r25	; 0x03
    108e:	41 15       	cp	r20, r1
    1090:	51 05       	cpc	r21, r1
    1092:	61 05       	cpc	r22, r1
    1094:	80 e4       	ldi	r24, 0x40	; 64
    1096:	78 07       	cpc	r23, r24
    1098:	88 f3       	brcs	.-30     	; 0x107c <__unpack_f+0x6e>
    109a:	20 c0       	rjmp	.+64     	; 0x10dc <__unpack_f+0xce>
    109c:	8f 3f       	cpi	r24, 0xFF	; 255
    109e:	91 05       	cpc	r25, r1
    10a0:	79 f4       	brne	.+30     	; 0x10c0 <__unpack_f+0xb2>
    10a2:	41 15       	cp	r20, r1
    10a4:	51 05       	cpc	r21, r1
    10a6:	61 05       	cpc	r22, r1
    10a8:	71 05       	cpc	r23, r1
    10aa:	19 f4       	brne	.+6      	; 0x10b2 <__unpack_f+0xa4>
    10ac:	84 e0       	ldi	r24, 0x04	; 4
    10ae:	80 83       	st	Z, r24
    10b0:	19 c0       	rjmp	.+50     	; 0x10e4 <__unpack_f+0xd6>
    10b2:	e4 fe       	sbrs	r14, 4
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <__unpack_f+0xae>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	80 83       	st	Z, r24
    10ba:	10 c0       	rjmp	.+32     	; 0x10dc <__unpack_f+0xce>
    10bc:	10 82       	st	Z, r1
    10be:	0e c0       	rjmp	.+28     	; 0x10dc <__unpack_f+0xce>
    10c0:	8f 57       	subi	r24, 0x7F	; 127
    10c2:	91 09       	sbc	r25, r1
    10c4:	82 83       	std	Z+2, r24	; 0x02
    10c6:	93 83       	std	Z+3, r25	; 0x03
    10c8:	83 e0       	ldi	r24, 0x03	; 3
    10ca:	80 83       	st	Z, r24
    10cc:	87 e0       	ldi	r24, 0x07	; 7
    10ce:	44 0f       	add	r20, r20
    10d0:	55 1f       	adc	r21, r21
    10d2:	66 1f       	adc	r22, r22
    10d4:	77 1f       	adc	r23, r23
    10d6:	8a 95       	dec	r24
    10d8:	d1 f7       	brne	.-12     	; 0x10ce <__unpack_f+0xc0>
    10da:	70 64       	ori	r23, 0x40	; 64
    10dc:	44 83       	std	Z+4, r20	; 0x04
    10de:	55 83       	std	Z+5, r21	; 0x05
    10e0:	66 83       	std	Z+6, r22	; 0x06
    10e2:	77 83       	std	Z+7, r23	; 0x07
    10e4:	ef 90       	pop	r14
    10e6:	df 90       	pop	r13
    10e8:	cf 90       	pop	r12
    10ea:	08 95       	ret

000010ec <__fpcmp_parts_f>:
    10ec:	cf 93       	push	r28
    10ee:	fc 01       	movw	r30, r24
    10f0:	db 01       	movw	r26, r22
    10f2:	90 81       	ld	r25, Z
    10f4:	92 30       	cpi	r25, 0x02	; 2
    10f6:	08 f4       	brcc	.+2      	; 0x10fa <__fpcmp_parts_f+0xe>
    10f8:	52 c0       	rjmp	.+164    	; 0x119e <__fpcmp_parts_f+0xb2>
    10fa:	8c 91       	ld	r24, X
    10fc:	82 30       	cpi	r24, 0x02	; 2
    10fe:	08 f4       	brcc	.+2      	; 0x1102 <__fpcmp_parts_f+0x16>
    1100:	4e c0       	rjmp	.+156    	; 0x119e <__fpcmp_parts_f+0xb2>
    1102:	94 30       	cpi	r25, 0x04	; 4
    1104:	71 f4       	brne	.+28     	; 0x1122 <__fpcmp_parts_f+0x36>
    1106:	84 30       	cpi	r24, 0x04	; 4
    1108:	39 f4       	brne	.+14     	; 0x1118 <__fpcmp_parts_f+0x2c>
    110a:	11 96       	adiw	r26, 0x01	; 1
    110c:	2c 91       	ld	r18, X
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 81       	ldd	r24, Z+1	; 0x01
    1112:	28 1b       	sub	r18, r24
    1114:	31 09       	sbc	r19, r1
    1116:	48 c0       	rjmp	.+144    	; 0x11a8 <__fpcmp_parts_f+0xbc>
    1118:	81 81       	ldd	r24, Z+1	; 0x01
    111a:	88 23       	and	r24, r24
    111c:	09 f4       	brne	.+2      	; 0x1120 <__fpcmp_parts_f+0x34>
    111e:	3f c0       	rjmp	.+126    	; 0x119e <__fpcmp_parts_f+0xb2>
    1120:	3b c0       	rjmp	.+118    	; 0x1198 <__fpcmp_parts_f+0xac>
    1122:	84 30       	cpi	r24, 0x04	; 4
    1124:	29 f4       	brne	.+10     	; 0x1130 <__fpcmp_parts_f+0x44>
    1126:	11 96       	adiw	r26, 0x01	; 1
    1128:	8c 91       	ld	r24, X
    112a:	81 11       	cpse	r24, r1
    112c:	38 c0       	rjmp	.+112    	; 0x119e <__fpcmp_parts_f+0xb2>
    112e:	34 c0       	rjmp	.+104    	; 0x1198 <__fpcmp_parts_f+0xac>
    1130:	92 30       	cpi	r25, 0x02	; 2
    1132:	19 f4       	brne	.+6      	; 0x113a <__fpcmp_parts_f+0x4e>
    1134:	82 30       	cpi	r24, 0x02	; 2
    1136:	b9 f7       	brne	.-18     	; 0x1126 <__fpcmp_parts_f+0x3a>
    1138:	35 c0       	rjmp	.+106    	; 0x11a4 <__fpcmp_parts_f+0xb8>
    113a:	82 30       	cpi	r24, 0x02	; 2
    113c:	69 f3       	breq	.-38     	; 0x1118 <__fpcmp_parts_f+0x2c>
    113e:	c1 81       	ldd	r28, Z+1	; 0x01
    1140:	11 96       	adiw	r26, 0x01	; 1
    1142:	8c 91       	ld	r24, X
    1144:	11 97       	sbiw	r26, 0x01	; 1
    1146:	c8 13       	cpse	r28, r24
    1148:	1d c0       	rjmp	.+58     	; 0x1184 <__fpcmp_parts_f+0x98>
    114a:	22 81       	ldd	r18, Z+2	; 0x02
    114c:	33 81       	ldd	r19, Z+3	; 0x03
    114e:	12 96       	adiw	r26, 0x02	; 2
    1150:	8d 91       	ld	r24, X+
    1152:	9c 91       	ld	r25, X
    1154:	13 97       	sbiw	r26, 0x03	; 3
    1156:	82 17       	cp	r24, r18
    1158:	93 07       	cpc	r25, r19
    115a:	0c f4       	brge	.+2      	; 0x115e <__fpcmp_parts_f+0x72>
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <__fpcmp_parts_f+0x98>
    115e:	28 17       	cp	r18, r24
    1160:	39 07       	cpc	r19, r25
    1162:	0c f4       	brge	.+2      	; 0x1166 <__fpcmp_parts_f+0x7a>
    1164:	17 c0       	rjmp	.+46     	; 0x1194 <__fpcmp_parts_f+0xa8>
    1166:	44 81       	ldd	r20, Z+4	; 0x04
    1168:	55 81       	ldd	r21, Z+5	; 0x05
    116a:	66 81       	ldd	r22, Z+6	; 0x06
    116c:	77 81       	ldd	r23, Z+7	; 0x07
    116e:	14 96       	adiw	r26, 0x04	; 4
    1170:	8d 91       	ld	r24, X+
    1172:	9d 91       	ld	r25, X+
    1174:	0d 90       	ld	r0, X+
    1176:	bc 91       	ld	r27, X
    1178:	a0 2d       	mov	r26, r0
    117a:	84 17       	cp	r24, r20
    117c:	95 07       	cpc	r25, r21
    117e:	a6 07       	cpc	r26, r22
    1180:	b7 07       	cpc	r27, r23
    1182:	18 f4       	brcc	.+6      	; 0x118a <__fpcmp_parts_f+0x9e>
    1184:	c1 11       	cpse	r28, r1
    1186:	08 c0       	rjmp	.+16     	; 0x1198 <__fpcmp_parts_f+0xac>
    1188:	0a c0       	rjmp	.+20     	; 0x119e <__fpcmp_parts_f+0xb2>
    118a:	48 17       	cp	r20, r24
    118c:	59 07       	cpc	r21, r25
    118e:	6a 07       	cpc	r22, r26
    1190:	7b 07       	cpc	r23, r27
    1192:	40 f4       	brcc	.+16     	; 0x11a4 <__fpcmp_parts_f+0xb8>
    1194:	c1 11       	cpse	r28, r1
    1196:	03 c0       	rjmp	.+6      	; 0x119e <__fpcmp_parts_f+0xb2>
    1198:	2f ef       	ldi	r18, 0xFF	; 255
    119a:	3f ef       	ldi	r19, 0xFF	; 255
    119c:	05 c0       	rjmp	.+10     	; 0x11a8 <__fpcmp_parts_f+0xbc>
    119e:	21 e0       	ldi	r18, 0x01	; 1
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <__fpcmp_parts_f+0xbc>
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	c9 01       	movw	r24, r18
    11aa:	cf 91       	pop	r28
    11ac:	08 95       	ret

000011ae <bluetooth_init>:
void bluetooth_init_interrupt(void)
{
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
	USARTD0.CTRLA = USART_RXCINTLVL_HI_gc;
	cpu_irq_enable();
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	29 97       	sbiw	r28, 0x09	; 9
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	88 e0       	ldi	r24, 0x08	; 8
    11be:	e0 e6       	ldi	r30, 0x60	; 96
    11c0:	f6 e0       	ldi	r31, 0x06	; 6
    11c2:	81 83       	std	Z+1, r24	; 0x01
    11c4:	80 91 04 20 	lds	r24, 0x2004
    11c8:	90 91 05 20 	lds	r25, 0x2005
    11cc:	8d 83       	std	Y+5, r24	; 0x05
    11ce:	9e 83       	std	Y+6, r25	; 0x06
    11d0:	80 91 06 20 	lds	r24, 0x2006
    11d4:	90 91 07 20 	lds	r25, 0x2007
    11d8:	8f 83       	std	Y+7, r24	; 0x07
    11da:	98 87       	std	Y+8, r25	; 0x08
    11dc:	80 91 08 20 	lds	r24, 0x2008
    11e0:	89 87       	std	Y+9, r24	; 0x09
    11e2:	80 91 00 20 	lds	r24, 0x2000
    11e6:	90 91 01 20 	lds	r25, 0x2001
    11ea:	a0 91 02 20 	lds	r26, 0x2002
    11ee:	b0 91 03 20 	lds	r27, 0x2003
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	9a 83       	std	Y+2, r25	; 0x02
    11f6:	ab 83       	std	Y+3, r26	; 0x03
    11f8:	bc 83       	std	Y+4, r27	; 0x04
    11fa:	60 e1       	ldi	r22, 0x10	; 16
    11fc:	84 e0       	ldi	r24, 0x04	; 4
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	12 d3       	rcall	.+1572   	; 0x1826 <sysclk_enable_module>
    1202:	be 01       	movw	r22, r28
    1204:	6f 5f       	subi	r22, 0xFF	; 255
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	80 ea       	ldi	r24, 0xA0	; 160
    120a:	99 e0       	ldi	r25, 0x09	; 9
    120c:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <usart_init_rs232>
    1210:	89 e0       	ldi	r24, 0x09	; 9
    1212:	90 e2       	ldi	r25, 0x20	; 32
    1214:	80 93 a8 23 	sts	0x23A8, r24
    1218:	90 93 a9 23 	sts	0x23A9, r25
    121c:	80 93 a6 23 	sts	0x23A6, r24
    1220:	90 93 a7 23 	sts	0x23A7, r25
    1224:	29 96       	adiw	r28, 0x09	; 9
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <bluetooth_putchar>:
}

void bluetooth_putchar(char a)
{
	usart_putchar(BLUETOOTH,a);
    1230:	68 2f       	mov	r22, r24
    1232:	80 ea       	ldi	r24, 0xA0	; 160
    1234:	99 e0       	ldi	r25, 0x09	; 9
    1236:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <usart_putchar>

0000123a <bluetooth_putchar_printf>:
}


#ifdef PRINTF_BLUETOOTH

int bluetooth_putchar_printf(char var, FILE *stream) {
    123a:	cf 93       	push	r28
    123c:	c8 2f       	mov	r28, r24
	// translate \n to \r for br@y++ terminal
	if (var == '\n') bluetooth_putchar('\r');
    123e:	8a 30       	cpi	r24, 0x0A	; 10
    1240:	11 f4       	brne	.+4      	; 0x1246 <bluetooth_putchar_printf+0xc>
    1242:	8d e0       	ldi	r24, 0x0D	; 13
    1244:	f5 df       	rcall	.-22     	; 0x1230 <bluetooth_putchar>
	bluetooth_putchar(var);
    1246:	8c 2f       	mov	r24, r28
    1248:	f3 df       	rcall	.-26     	; 0x1230 <bluetooth_putchar>
	return 0;
}
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	cf 91       	pop	r28
    1250:	08 95       	ret

00001252 <bluetooth_getchar>:
	usart_putchar(BLUETOOTH,a);
}

char bluetooth_getchar(void)
{
	return usart_getchar(BLUETOOTH);
    1252:	80 ea       	ldi	r24, 0xA0	; 160
    1254:	99 e0       	ldi	r25, 0x09	; 9
    1256:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <usart_getchar>

0000125a <bluetooth_getchar_scanf>:
	bluetooth_putchar(var);
	return 0;
}

int bluetooth_getchar_scanf(FILE *stream)
{
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	ec 01       	movw	r28, r24
	uint8_t u8Data;
	// Wait for byte to be received
	u8Data=bluetooth_getchar();
    1262:	f7 df       	rcall	.-18     	; 0x1252 <bluetooth_getchar>
    1264:	18 2f       	mov	r17, r24
	//echo input data
	bluetooth_putchar_printf(u8Data,stream);
    1266:	be 01       	movw	r22, r28
    1268:	e8 df       	rcall	.-48     	; 0x123a <bluetooth_putchar_printf>
	// Return received data
	return u8Data;
}
    126a:	81 2f       	mov	r24, r17
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	08 95       	ret

00001276 <bluetooth_is_rx_complete>:
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_RXCIF_bm;
    1276:	e0 ea       	ldi	r30, 0xA0	; 160
    1278:	f9 e0       	ldi	r31, 0x09	; 9
    127a:	81 81       	ldd	r24, Z+1	; 0x01
    127c:	99 27       	eor	r25, r25
    127e:	87 fd       	sbrc	r24, 7
    1280:	90 95       	com	r25
}

int bluetooth_is_rx_complete(void)
{
	return usart_rx_is_complete(BLUETOOTH);
}
    1282:	89 2f       	mov	r24, r25
    1284:	88 1f       	adc	r24, r24
    1286:	88 27       	eor	r24, r24
    1288:	88 1f       	adc	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	08 95       	ret

0000128e <leds_init>:
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    128e:	e0 e4       	ldi	r30, 0x40	; 64
    1290:	f6 e0       	ldi	r31, 0x06	; 6
    1292:	80 e1       	ldi	r24, 0x10	; 16
    1294:	81 83       	std	Z+1, r24	; 0x01
    1296:	80 e2       	ldi	r24, 0x20	; 32
    1298:	81 83       	std	Z+1, r24	; 0x01
    129a:	80 e8       	ldi	r24, 0x80	; 128
    129c:	81 83       	std	Z+1, r24	; 0x01
    129e:	a0 ee       	ldi	r26, 0xE0	; 224
    12a0:	b7 e0       	ldi	r27, 0x07	; 7
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	11 96       	adiw	r26, 0x01	; 1
    12a6:	8c 93       	st	X, r24
    12a8:	11 97       	sbiw	r26, 0x01	; 1
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	11 96       	adiw	r26, 0x01	; 1
    12ae:	8c 93       	st	X, r24
    12b0:	80 e4       	ldi	r24, 0x40	; 64
    12b2:	81 83       	std	Z+1, r24	; 0x01
    12b4:	08 95       	ret

000012b6 <led1>:
	led6( ( leds & (1<<5) ) && (1<<5)  );
}

void led1(int state)
{
	switch (state)
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	91 05       	cpc	r25, r1
    12ba:	31 f0       	breq	.+12     	; 0x12c8 <led1+0x12>
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	91 05       	cpc	r25, r1
    12c0:	69 f0       	breq	.+26     	; 0x12dc <led1+0x26>
    12c2:	89 2b       	or	r24, r25
    12c4:	31 f0       	breq	.+12     	; 0x12d2 <led1+0x1c>
    12c6:	08 95       	ret
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    12c8:	80 e1       	ldi	r24, 0x10	; 16
    12ca:	e0 e4       	ldi	r30, 0x40	; 64
    12cc:	f6 e0       	ldi	r31, 0x06	; 6
    12ce:	85 83       	std	Z+5, r24	; 0x05
    12d0:	08 95       	ret
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    12d2:	80 e1       	ldi	r24, 0x10	; 16
    12d4:	e0 e4       	ldi	r30, 0x40	; 64
    12d6:	f6 e0       	ldi	r31, 0x06	; 6
    12d8:	86 83       	std	Z+6, r24	; 0x06
    12da:	08 95       	ret

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    12dc:	80 e1       	ldi	r24, 0x10	; 16
    12de:	e0 e4       	ldi	r30, 0x40	; 64
    12e0:	f6 e0       	ldi	r31, 0x06	; 6
    12e2:	87 83       	std	Z+7, r24	; 0x07
    12e4:	08 95       	ret

000012e6 <led2>:
	}
}

void led2(int state)
{
	switch (state)
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	91 05       	cpc	r25, r1
    12ea:	31 f0       	breq	.+12     	; 0x12f8 <led2+0x12>
    12ec:	82 30       	cpi	r24, 0x02	; 2
    12ee:	91 05       	cpc	r25, r1
    12f0:	69 f0       	breq	.+26     	; 0x130c <led2+0x26>
    12f2:	89 2b       	or	r24, r25
    12f4:	31 f0       	breq	.+12     	; 0x1302 <led2+0x1c>
    12f6:	08 95       	ret
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    12f8:	80 e2       	ldi	r24, 0x20	; 32
    12fa:	e0 e4       	ldi	r30, 0x40	; 64
    12fc:	f6 e0       	ldi	r31, 0x06	; 6
    12fe:	85 83       	std	Z+5, r24	; 0x05
    1300:	08 95       	ret
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1302:	80 e2       	ldi	r24, 0x20	; 32
    1304:	e0 e4       	ldi	r30, 0x40	; 64
    1306:	f6 e0       	ldi	r31, 0x06	; 6
    1308:	86 83       	std	Z+6, r24	; 0x06
    130a:	08 95       	ret

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    130c:	80 e2       	ldi	r24, 0x20	; 32
    130e:	e0 e4       	ldi	r30, 0x40	; 64
    1310:	f6 e0       	ldi	r31, 0x06	; 6
    1312:	87 83       	std	Z+7, r24	; 0x07
    1314:	08 95       	ret

00001316 <led3>:
	}
}

void led3(int state)
{
	switch (state)
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	91 05       	cpc	r25, r1
    131a:	31 f0       	breq	.+12     	; 0x1328 <led3+0x12>
    131c:	82 30       	cpi	r24, 0x02	; 2
    131e:	91 05       	cpc	r25, r1
    1320:	69 f0       	breq	.+26     	; 0x133c <led3+0x26>
    1322:	89 2b       	or	r24, r25
    1324:	31 f0       	breq	.+12     	; 0x1332 <led3+0x1c>
    1326:	08 95       	ret
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1328:	80 e8       	ldi	r24, 0x80	; 128
    132a:	e0 e4       	ldi	r30, 0x40	; 64
    132c:	f6 e0       	ldi	r31, 0x06	; 6
    132e:	85 83       	std	Z+5, r24	; 0x05
    1330:	08 95       	ret
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1332:	80 e8       	ldi	r24, 0x80	; 128
    1334:	e0 e4       	ldi	r30, 0x40	; 64
    1336:	f6 e0       	ldi	r31, 0x06	; 6
    1338:	86 83       	std	Z+6, r24	; 0x06
    133a:	08 95       	ret

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    133c:	80 e8       	ldi	r24, 0x80	; 128
    133e:	e0 e4       	ldi	r30, 0x40	; 64
    1340:	f6 e0       	ldi	r31, 0x06	; 6
    1342:	87 83       	std	Z+7, r24	; 0x07
    1344:	08 95       	ret

00001346 <led4>:
	}
}

void led4(int state)
{
	switch (state)
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	91 05       	cpc	r25, r1
    134a:	31 f0       	breq	.+12     	; 0x1358 <led4+0x12>
    134c:	82 30       	cpi	r24, 0x02	; 2
    134e:	91 05       	cpc	r25, r1
    1350:	69 f0       	breq	.+26     	; 0x136c <led4+0x26>
    1352:	89 2b       	or	r24, r25
    1354:	31 f0       	breq	.+12     	; 0x1362 <led4+0x1c>
    1356:	08 95       	ret
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1358:	82 e0       	ldi	r24, 0x02	; 2
    135a:	e0 ee       	ldi	r30, 0xE0	; 224
    135c:	f7 e0       	ldi	r31, 0x07	; 7
    135e:	85 83       	std	Z+5, r24	; 0x05
    1360:	08 95       	ret
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	e0 ee       	ldi	r30, 0xE0	; 224
    1366:	f7 e0       	ldi	r31, 0x07	; 7
    1368:	86 83       	std	Z+6, r24	; 0x06
    136a:	08 95       	ret

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	e0 ee       	ldi	r30, 0xE0	; 224
    1370:	f7 e0       	ldi	r31, 0x07	; 7
    1372:	87 83       	std	Z+7, r24	; 0x07
    1374:	08 95       	ret

00001376 <motors_init>:

#include "../include/motors.h"

void motors_init(void)
{
	pwm_init(&pwm_mot1, PWM_TCE0, PWM_CH_C, MOTOR_FREQUENCY);
    1376:	20 e1       	ldi	r18, 0x10	; 16
    1378:	37 e2       	ldi	r19, 0x27	; 39
    137a:	43 e0       	ldi	r20, 0x03	; 3
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	64 e0       	ldi	r22, 0x04	; 4
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	84 e5       	ldi	r24, 0x54	; 84
    1384:	93 e2       	ldi	r25, 0x23	; 35
    1386:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <pwm_init>
	pwm_init(&pwm_mot2, PWM_TCE0, PWM_CH_B, MOTOR_FREQUENCY);
    138a:	20 e1       	ldi	r18, 0x10	; 16
    138c:	37 e2       	ldi	r19, 0x27	; 39
    138e:	42 e0       	ldi	r20, 0x02	; 2
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	64 e0       	ldi	r22, 0x04	; 4
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	82 e7       	ldi	r24, 0x72	; 114
    1398:	93 e2       	ldi	r25, 0x23	; 35
    139a:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <pwm_init>
	pwm_init(&pwm_mot3, PWM_TCE0, PWM_CH_D, MOTOR_FREQUENCY);
    139e:	20 e1       	ldi	r18, 0x10	; 16
    13a0:	37 e2       	ldi	r19, 0x27	; 39
    13a2:	44 e0       	ldi	r20, 0x04	; 4
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	64 e0       	ldi	r22, 0x04	; 4
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	8c e7       	ldi	r24, 0x7C	; 124
    13ac:	93 e2       	ldi	r25, 0x23	; 35
    13ae:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <pwm_init>
	pwm_init(&pwm_mot4, PWM_TCE0, PWM_CH_A, MOTOR_FREQUENCY);
    13b2:	20 e1       	ldi	r18, 0x10	; 16
    13b4:	37 e2       	ldi	r19, 0x27	; 39
    13b6:	41 e0       	ldi	r20, 0x01	; 1
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	64 e0       	ldi	r22, 0x04	; 4
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	8a e4       	ldi	r24, 0x4A	; 74
    13c0:	93 e2       	ldi	r25, 0x23	; 35
    13c2:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <pwm_init>
	
	pwm_start(&pwm_mot1,0);
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	84 e5       	ldi	r24, 0x54	; 84
    13ca:	93 e2       	ldi	r25, 0x23	; 35
    13cc:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <pwm_start>
	pwm_start(&pwm_mot2,0);
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	82 e7       	ldi	r24, 0x72	; 114
    13d4:	93 e2       	ldi	r25, 0x23	; 35
    13d6:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <pwm_start>
	pwm_start(&pwm_mot3,0);
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	8c e7       	ldi	r24, 0x7C	; 124
    13de:	93 e2       	ldi	r25, 0x23	; 35
    13e0:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <pwm_start>
	pwm_start(&pwm_mot4,0);
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	8a e4       	ldi	r24, 0x4A	; 74
    13e8:	93 e2       	ldi	r25, 0x23	; 35
    13ea:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <pwm_start>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    13ee:	e0 e0       	ldi	r30, 0x00	; 0
    13f0:	f6 e0       	ldi	r31, 0x06	; 6
    13f2:	80 e4       	ldi	r24, 0x40	; 64
    13f4:	81 83       	std	Z+1, r24	; 0x01
    13f6:	80 e2       	ldi	r24, 0x20	; 32
    13f8:	81 83       	std	Z+1, r24	; 0x01
    13fa:	80 e8       	ldi	r24, 0x80	; 128
    13fc:	81 83       	std	Z+1, r24	; 0x01
    13fe:	80 e1       	ldi	r24, 0x10	; 16
    1400:	81 83       	std	Z+1, r24	; 0x01
    1402:	08 95       	ret

00001404 <init_octopus>:



void init_octopus(void)
{
	sysclk_init();
    1404:	a4 d1       	rcall	.+840    	; 0x174e <sysclk_init>
	ioport_init();
	leds_init();
    1406:	43 df       	rcall	.-378    	; 0x128e <leds_init>
	bluetooth_init();
    1408:	d2 de       	rcall	.-604    	; 0x11ae <bluetooth_init>
	//bluetooth_init_interrupt();
	switch_init();
    140a:	9a d1       	rcall	.+820    	; 0x1740 <switch_init>
	motors_init();
    140c:	b4 cf       	rjmp	.-152    	; 0x1376 <motors_init>

0000140e <pwm_ini>:

#include "./../include/PWM.h"

void pwm_ini(int servo_num)
{
	switch(servo_num)
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	91 05       	cpc	r25, r1
    1412:	d1 f0       	breq	.+52     	; 0x1448 <pwm_ini+0x3a>
    1414:	1c f4       	brge	.+6      	; 0x141c <pwm_ini+0xe>
    1416:	89 2b       	or	r24, r25
    1418:	41 f0       	breq	.+16     	; 0x142a <pwm_ini+0x1c>
    141a:	08 95       	ret
    141c:	82 30       	cpi	r24, 0x02	; 2
    141e:	91 05       	cpc	r25, r1
    1420:	11 f1       	breq	.+68     	; 0x1466 <pwm_ini+0x58>
    1422:	03 97       	sbiw	r24, 0x03	; 3
    1424:	09 f0       	breq	.+2      	; 0x1428 <pwm_ini+0x1a>
    1426:	3d c0       	rjmp	.+122    	; 0x14a2 <pwm_ini+0x94>
    1428:	2d c0       	rjmp	.+90     	; 0x1484 <pwm_ini+0x76>
	{
		case SERVO_0:
		pwm_init(&pwm_servo0, PWM_TCD0, PWM_CH_A, 50);
    142a:	22 e3       	ldi	r18, 0x32	; 50
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	41 e0       	ldi	r20, 0x01	; 1
    1430:	50 e0       	ldi	r21, 0x00	; 0
    1432:	62 e0       	ldi	r22, 0x02	; 2
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	80 e4       	ldi	r24, 0x40	; 64
    1438:	93 e2       	ldi	r25, 0x23	; 35
    143a:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <pwm_init>
		pwm_start(&pwm_servo0, 3.4);
    143e:	63 e0       	ldi	r22, 0x03	; 3
    1440:	80 e4       	ldi	r24, 0x40	; 64
    1442:	93 e2       	ldi	r25, 0x23	; 35
    1444:	0c 94 e6 1f 	jmp	0x3fcc	; 0x3fcc <pwm_start>
		break;
		case SERVO_1:
		pwm_init(&pwm_servo1, PWM_TCD0, PWM_CH_B, 50);
    1448:	22 e3       	ldi	r18, 0x32	; 50
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	42 e0       	ldi	r20, 0x02	; 2
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	62 e0       	ldi	r22, 0x02	; 2
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	8e e5       	ldi	r24, 0x5E	; 94
    1456:	93 e2       	ldi	r25, 0x23	; 35
    1458:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <pwm_init>
		pwm_start(&pwm_servo1, 10);
    145c:	6a e0       	ldi	r22, 0x0A	; 10
    145e:	8e e5       	ldi	r24, 0x5E	; 94
    1460:	93 e2       	ldi	r25, 0x23	; 35
    1462:	0c 94 e6 1f 	jmp	0x3fcc	; 0x3fcc <pwm_start>
		break;
		case SERVO_2:
		pwm_init(&pwm_servo2, PWM_TCD1, PWM_CH_A, 50);
    1466:	22 e3       	ldi	r18, 0x32	; 50
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	63 e0       	ldi	r22, 0x03	; 3
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	86 e8       	ldi	r24, 0x86	; 134
    1474:	93 e2       	ldi	r25, 0x23	; 35
    1476:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <pwm_init>
		pwm_start(&pwm_servo2, 6);
    147a:	66 e0       	ldi	r22, 0x06	; 6
    147c:	86 e8       	ldi	r24, 0x86	; 134
    147e:	93 e2       	ldi	r25, 0x23	; 35
    1480:	0c 94 e6 1f 	jmp	0x3fcc	; 0x3fcc <pwm_start>
		break;
		case SERVO_3:
		pwm_init(&pwm_servo3, PWM_TCD1, PWM_CH_B, 50);
    1484:	22 e3       	ldi	r18, 0x32	; 50
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	42 e0       	ldi	r20, 0x02	; 2
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	63 e0       	ldi	r22, 0x03	; 3
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	88 e6       	ldi	r24, 0x68	; 104
    1492:	93 e2       	ldi	r25, 0x23	; 35
    1494:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <pwm_init>
		pwm_start(&pwm_servo3, 10);
    1498:	6a e0       	ldi	r22, 0x0A	; 10
    149a:	88 e6       	ldi	r24, 0x68	; 104
    149c:	93 e2       	ldi	r25, 0x23	; 35
    149e:	0c 94 e6 1f 	jmp	0x3fcc	; 0x3fcc <pwm_start>
    14a2:	08 95       	ret

000014a4 <pwm_update>:

}

//Duty Cycle between 1 and 1000
void pwm_update(int servo_num,int duty)
{
    14a4:	cf 92       	push	r12
    14a6:	df 92       	push	r13
    14a8:	ef 92       	push	r14
    14aa:	ff 92       	push	r15
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	eb 01       	movw	r28, r22
	switch(servo_num)
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	91 05       	cpc	r25, r1
    14b6:	09 f4       	brne	.+2      	; 0x14ba <pwm_update+0x16>
    14b8:	59 c0       	rjmp	.+178    	; 0x156c <pwm_update+0xc8>
    14ba:	1c f4       	brge	.+6      	; 0x14c2 <pwm_update+0x1e>
    14bc:	89 2b       	or	r24, r25
    14be:	49 f0       	breq	.+18     	; 0x14d2 <pwm_update+0x2e>
    14c0:	38 c1       	rjmp	.+624    	; 0x1732 <pwm_update+0x28e>
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	91 05       	cpc	r25, r1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <pwm_update+0x26>
    14c8:	9e c0       	rjmp	.+316    	; 0x1606 <pwm_update+0x162>
    14ca:	03 97       	sbiw	r24, 0x03	; 3
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <pwm_update+0x2c>
    14ce:	31 c1       	rjmp	.+610    	; 0x1732 <pwm_update+0x28e>
    14d0:	e7 c0       	rjmp	.+462    	; 0x16a0 <pwm_update+0x1fc>
	{
		case 0:
		tc_write_cc_buffer(pwm_servo0.tc, pwm_servo0.channel,
		(uint16_t)(((double)pwm_servo0.period *
    14d2:	60 91 48 23 	lds	r22, 0x2348
    14d6:	70 91 49 23 	lds	r23, 0x2349
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	58 dc       	rcall	.-1872   	; 0xd90 <__floatunsisf>
    14e0:	6b 01       	movw	r12, r22
    14e2:	7c 01       	movw	r14, r24
		(double)duty) / 1000));
    14e4:	be 01       	movw	r22, r28
    14e6:	88 27       	eor	r24, r24
    14e8:	77 fd       	sbrc	r23, 7
    14ea:	80 95       	com	r24
    14ec:	98 2f       	mov	r25, r24
    14ee:	a7 db       	rcall	.-2226   	; 0xc3e <__floatsisf>
    14f0:	9b 01       	movw	r18, r22
    14f2:	ac 01       	movw	r20, r24
{
	switch(servo_num)
	{
		case 0:
		tc_write_cc_buffer(pwm_servo0.tc, pwm_servo0.channel,
		(uint16_t)(((double)pwm_servo0.period *
    14f4:	c7 01       	movw	r24, r14
    14f6:	b6 01       	movw	r22, r12
    14f8:	c8 d9       	rcall	.-3184   	; 0x88a <__mulsf3>
		(double)duty) / 1000));
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	4a e7       	ldi	r20, 0x7A	; 122
    1500:	54 e4       	ldi	r21, 0x44	; 68
    1502:	a5 da       	rcall	.-2742   	; 0xa4e <__divsf3>
void pwm_update(int servo_num,int duty)
{
	switch(servo_num)
	{
		case 0:
		tc_write_cc_buffer(pwm_servo0.tc, pwm_servo0.channel,
    1504:	0e 94 22 01 	call	0x244	; 0x244 <__fixunssfsi>
    1508:	80 91 42 23 	lds	r24, 0x2342
    150c:	90 91 43 23 	lds	r25, 0x2343
    1510:	e0 91 40 23 	lds	r30, 0x2340
    1514:	f0 91 41 23 	lds	r31, 0x2341
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    1518:	e6 fd       	sbrc	r30, 6
    151a:	1b c0       	rjmp	.+54     	; 0x1552 <pwm_update+0xae>
		switch (channel_index) {
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	91 05       	cpc	r25, r1
    1520:	79 f0       	breq	.+30     	; 0x1540 <pwm_update+0x9c>
    1522:	20 f4       	brcc	.+8      	; 0x152c <pwm_update+0x88>
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	09 f0       	breq	.+2      	; 0x152a <pwm_update+0x86>
    1528:	04 c1       	rjmp	.+520    	; 0x1732 <pwm_update+0x28e>
    152a:	07 c0       	rjmp	.+14     	; 0x153a <pwm_update+0x96>
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	91 05       	cpc	r25, r1
    1530:	51 f0       	breq	.+20     	; 0x1546 <pwm_update+0xa2>
    1532:	04 97       	sbiw	r24, 0x04	; 4
    1534:	09 f0       	breq	.+2      	; 0x1538 <pwm_update+0x94>
    1536:	fd c0       	rjmp	.+506    	; 0x1732 <pwm_update+0x28e>
    1538:	09 c0       	rjmp	.+18     	; 0x154c <pwm_update+0xa8>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    153a:	60 af       	std	Z+56, r22	; 0x38
    153c:	71 af       	std	Z+57, r23	; 0x39
    153e:	f9 c0       	rjmp	.+498    	; 0x1732 <pwm_update+0x28e>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    1540:	62 af       	std	Z+58, r22	; 0x3a
    1542:	73 af       	std	Z+59, r23	; 0x3b
    1544:	f6 c0       	rjmp	.+492    	; 0x1732 <pwm_update+0x28e>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    1546:	64 af       	std	Z+60, r22	; 0x3c
    1548:	75 af       	std	Z+61, r23	; 0x3d
    154a:	f3 c0       	rjmp	.+486    	; 0x1732 <pwm_update+0x28e>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    154c:	66 af       	std	Z+62, r22	; 0x3e
    154e:	77 af       	std	Z+63, r23	; 0x3f
    1550:	f0 c0       	rjmp	.+480    	; 0x1732 <pwm_update+0x28e>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	91 05       	cpc	r25, r1
    1556:	21 f0       	breq	.+8      	; 0x1560 <pwm_update+0xbc>
    1558:	02 97       	sbiw	r24, 0x02	; 2
    155a:	09 f0       	breq	.+2      	; 0x155e <pwm_update+0xba>
    155c:	ea c0       	rjmp	.+468    	; 0x1732 <pwm_update+0x28e>
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <pwm_update+0xc2>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    1560:	60 af       	std	Z+56, r22	; 0x38
    1562:	71 af       	std	Z+57, r23	; 0x39
    1564:	e6 c0       	rjmp	.+460    	; 0x1732 <pwm_update+0x28e>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    1566:	62 af       	std	Z+58, r22	; 0x3a
    1568:	73 af       	std	Z+59, r23	; 0x3b
    156a:	e3 c0       	rjmp	.+454    	; 0x1732 <pwm_update+0x28e>
		(uint16_t)(((double)pwm_servo0.period *
		(double)duty) / 1000));
		break;
		case 1:
		tc_write_cc_buffer(pwm_servo1.tc, pwm_servo1.channel,
		(uint16_t)(((double)pwm_servo1.period *
    156c:	60 91 66 23 	lds	r22, 0x2366
    1570:	70 91 67 23 	lds	r23, 0x2367
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0b dc       	rcall	.-2026   	; 0xd90 <__floatunsisf>
    157a:	6b 01       	movw	r12, r22
    157c:	7c 01       	movw	r14, r24
		(double)duty) / 1000));
    157e:	be 01       	movw	r22, r28
    1580:	88 27       	eor	r24, r24
    1582:	77 fd       	sbrc	r23, 7
    1584:	80 95       	com	r24
    1586:	98 2f       	mov	r25, r24
    1588:	5a db       	rcall	.-2380   	; 0xc3e <__floatsisf>
    158a:	9b 01       	movw	r18, r22
    158c:	ac 01       	movw	r20, r24
		(uint16_t)(((double)pwm_servo0.period *
		(double)duty) / 1000));
		break;
		case 1:
		tc_write_cc_buffer(pwm_servo1.tc, pwm_servo1.channel,
		(uint16_t)(((double)pwm_servo1.period *
    158e:	c7 01       	movw	r24, r14
    1590:	b6 01       	movw	r22, r12
    1592:	7b d9       	rcall	.-3338   	; 0x88a <__mulsf3>
		(double)duty) / 1000));
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	4a e7       	ldi	r20, 0x7A	; 122
    159a:	54 e4       	ldi	r21, 0x44	; 68
    159c:	58 da       	rcall	.-2896   	; 0xa4e <__divsf3>
		tc_write_cc_buffer(pwm_servo0.tc, pwm_servo0.channel,
		(uint16_t)(((double)pwm_servo0.period *
		(double)duty) / 1000));
		break;
		case 1:
		tc_write_cc_buffer(pwm_servo1.tc, pwm_servo1.channel,
    159e:	0e 94 22 01 	call	0x244	; 0x244 <__fixunssfsi>
    15a2:	80 91 60 23 	lds	r24, 0x2360
    15a6:	90 91 61 23 	lds	r25, 0x2361
    15aa:	e0 91 5e 23 	lds	r30, 0x235E
    15ae:	f0 91 5f 23 	lds	r31, 0x235F
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    15b2:	e6 fd       	sbrc	r30, 6
    15b4:	1b c0       	rjmp	.+54     	; 0x15ec <pwm_update+0x148>
		switch (channel_index) {
    15b6:	82 30       	cpi	r24, 0x02	; 2
    15b8:	91 05       	cpc	r25, r1
    15ba:	79 f0       	breq	.+30     	; 0x15da <pwm_update+0x136>
    15bc:	20 f4       	brcc	.+8      	; 0x15c6 <pwm_update+0x122>
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <pwm_update+0x120>
    15c2:	b7 c0       	rjmp	.+366    	; 0x1732 <pwm_update+0x28e>
    15c4:	07 c0       	rjmp	.+14     	; 0x15d4 <pwm_update+0x130>
    15c6:	83 30       	cpi	r24, 0x03	; 3
    15c8:	91 05       	cpc	r25, r1
    15ca:	51 f0       	breq	.+20     	; 0x15e0 <pwm_update+0x13c>
    15cc:	04 97       	sbiw	r24, 0x04	; 4
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <pwm_update+0x12e>
    15d0:	b0 c0       	rjmp	.+352    	; 0x1732 <pwm_update+0x28e>
    15d2:	09 c0       	rjmp	.+18     	; 0x15e6 <pwm_update+0x142>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    15d4:	60 af       	std	Z+56, r22	; 0x38
    15d6:	71 af       	std	Z+57, r23	; 0x39
    15d8:	ac c0       	rjmp	.+344    	; 0x1732 <pwm_update+0x28e>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    15da:	62 af       	std	Z+58, r22	; 0x3a
    15dc:	73 af       	std	Z+59, r23	; 0x3b
    15de:	a9 c0       	rjmp	.+338    	; 0x1732 <pwm_update+0x28e>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    15e0:	64 af       	std	Z+60, r22	; 0x3c
    15e2:	75 af       	std	Z+61, r23	; 0x3d
    15e4:	a6 c0       	rjmp	.+332    	; 0x1732 <pwm_update+0x28e>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    15e6:	66 af       	std	Z+62, r22	; 0x3e
    15e8:	77 af       	std	Z+63, r23	; 0x3f
    15ea:	a3 c0       	rjmp	.+326    	; 0x1732 <pwm_update+0x28e>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	91 05       	cpc	r25, r1
    15f0:	21 f0       	breq	.+8      	; 0x15fa <pwm_update+0x156>
    15f2:	02 97       	sbiw	r24, 0x02	; 2
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <pwm_update+0x154>
    15f6:	9d c0       	rjmp	.+314    	; 0x1732 <pwm_update+0x28e>
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <pwm_update+0x15c>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    15fa:	60 af       	std	Z+56, r22	; 0x38
    15fc:	71 af       	std	Z+57, r23	; 0x39
    15fe:	99 c0       	rjmp	.+306    	; 0x1732 <pwm_update+0x28e>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    1600:	62 af       	std	Z+58, r22	; 0x3a
    1602:	73 af       	std	Z+59, r23	; 0x3b
    1604:	96 c0       	rjmp	.+300    	; 0x1732 <pwm_update+0x28e>
		(uint16_t)(((double)pwm_servo1.period *
		(double)duty) / 1000));
		break;
		case 2:
		tc_write_cc_buffer(pwm_servo2.tc, pwm_servo2.channel,
		(uint16_t)(((double)pwm_servo2.period *
    1606:	60 91 8e 23 	lds	r22, 0x238E
    160a:	70 91 8f 23 	lds	r23, 0x238F
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	be db       	rcall	.-2180   	; 0xd90 <__floatunsisf>
    1614:	6b 01       	movw	r12, r22
    1616:	7c 01       	movw	r14, r24
		(double)duty) / 1000));
    1618:	be 01       	movw	r22, r28
    161a:	88 27       	eor	r24, r24
    161c:	77 fd       	sbrc	r23, 7
    161e:	80 95       	com	r24
    1620:	98 2f       	mov	r25, r24
    1622:	0d db       	rcall	.-2534   	; 0xc3e <__floatsisf>
    1624:	9b 01       	movw	r18, r22
    1626:	ac 01       	movw	r20, r24
		(uint16_t)(((double)pwm_servo1.period *
		(double)duty) / 1000));
		break;
		case 2:
		tc_write_cc_buffer(pwm_servo2.tc, pwm_servo2.channel,
		(uint16_t)(((double)pwm_servo2.period *
    1628:	c7 01       	movw	r24, r14
    162a:	b6 01       	movw	r22, r12
    162c:	2e d9       	rcall	.-3492   	; 0x88a <__mulsf3>
		(double)duty) / 1000));
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	4a e7       	ldi	r20, 0x7A	; 122
    1634:	54 e4       	ldi	r21, 0x44	; 68
    1636:	0b da       	rcall	.-3050   	; 0xa4e <__divsf3>
		tc_write_cc_buffer(pwm_servo1.tc, pwm_servo1.channel,
		(uint16_t)(((double)pwm_servo1.period *
		(double)duty) / 1000));
		break;
		case 2:
		tc_write_cc_buffer(pwm_servo2.tc, pwm_servo2.channel,
    1638:	0e 94 22 01 	call	0x244	; 0x244 <__fixunssfsi>
    163c:	80 91 88 23 	lds	r24, 0x2388
    1640:	90 91 89 23 	lds	r25, 0x2389
    1644:	e0 91 86 23 	lds	r30, 0x2386
    1648:	f0 91 87 23 	lds	r31, 0x2387
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    164c:	e6 fd       	sbrc	r30, 6
    164e:	1b c0       	rjmp	.+54     	; 0x1686 <pwm_update+0x1e2>
		switch (channel_index) {
    1650:	82 30       	cpi	r24, 0x02	; 2
    1652:	91 05       	cpc	r25, r1
    1654:	79 f0       	breq	.+30     	; 0x1674 <pwm_update+0x1d0>
    1656:	20 f4       	brcc	.+8      	; 0x1660 <pwm_update+0x1bc>
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	09 f0       	breq	.+2      	; 0x165e <pwm_update+0x1ba>
    165c:	6a c0       	rjmp	.+212    	; 0x1732 <pwm_update+0x28e>
    165e:	07 c0       	rjmp	.+14     	; 0x166e <pwm_update+0x1ca>
    1660:	83 30       	cpi	r24, 0x03	; 3
    1662:	91 05       	cpc	r25, r1
    1664:	51 f0       	breq	.+20     	; 0x167a <pwm_update+0x1d6>
    1666:	04 97       	sbiw	r24, 0x04	; 4
    1668:	09 f0       	breq	.+2      	; 0x166c <pwm_update+0x1c8>
    166a:	63 c0       	rjmp	.+198    	; 0x1732 <pwm_update+0x28e>
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <pwm_update+0x1dc>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    166e:	60 af       	std	Z+56, r22	; 0x38
    1670:	71 af       	std	Z+57, r23	; 0x39
    1672:	5f c0       	rjmp	.+190    	; 0x1732 <pwm_update+0x28e>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    1674:	62 af       	std	Z+58, r22	; 0x3a
    1676:	73 af       	std	Z+59, r23	; 0x3b
    1678:	5c c0       	rjmp	.+184    	; 0x1732 <pwm_update+0x28e>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    167a:	64 af       	std	Z+60, r22	; 0x3c
    167c:	75 af       	std	Z+61, r23	; 0x3d
    167e:	59 c0       	rjmp	.+178    	; 0x1732 <pwm_update+0x28e>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    1680:	66 af       	std	Z+62, r22	; 0x3e
    1682:	77 af       	std	Z+63, r23	; 0x3f
    1684:	56 c0       	rjmp	.+172    	; 0x1732 <pwm_update+0x28e>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	91 05       	cpc	r25, r1
    168a:	21 f0       	breq	.+8      	; 0x1694 <pwm_update+0x1f0>
    168c:	02 97       	sbiw	r24, 0x02	; 2
    168e:	09 f0       	breq	.+2      	; 0x1692 <pwm_update+0x1ee>
    1690:	50 c0       	rjmp	.+160    	; 0x1732 <pwm_update+0x28e>
    1692:	03 c0       	rjmp	.+6      	; 0x169a <pwm_update+0x1f6>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    1694:	60 af       	std	Z+56, r22	; 0x38
    1696:	71 af       	std	Z+57, r23	; 0x39
    1698:	4c c0       	rjmp	.+152    	; 0x1732 <pwm_update+0x28e>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    169a:	62 af       	std	Z+58, r22	; 0x3a
    169c:	73 af       	std	Z+59, r23	; 0x3b
    169e:	49 c0       	rjmp	.+146    	; 0x1732 <pwm_update+0x28e>
		(uint16_t)(((double)pwm_servo2.period *
		(double)duty) / 1000));
		break;
		case 3:
		tc_write_cc_buffer(pwm_servo3.tc, pwm_servo3.channel,
		(uint16_t)(((double)pwm_servo3.period *
    16a0:	60 91 70 23 	lds	r22, 0x2370
    16a4:	70 91 71 23 	lds	r23, 0x2371
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	71 db       	rcall	.-2334   	; 0xd90 <__floatunsisf>
    16ae:	6b 01       	movw	r12, r22
    16b0:	7c 01       	movw	r14, r24
		(double)duty) / 1000));
    16b2:	be 01       	movw	r22, r28
    16b4:	88 27       	eor	r24, r24
    16b6:	77 fd       	sbrc	r23, 7
    16b8:	80 95       	com	r24
    16ba:	98 2f       	mov	r25, r24
    16bc:	c0 da       	rcall	.-2688   	; 0xc3e <__floatsisf>
    16be:	9b 01       	movw	r18, r22
    16c0:	ac 01       	movw	r20, r24
		(uint16_t)(((double)pwm_servo2.period *
		(double)duty) / 1000));
		break;
		case 3:
		tc_write_cc_buffer(pwm_servo3.tc, pwm_servo3.channel,
		(uint16_t)(((double)pwm_servo3.period *
    16c2:	c7 01       	movw	r24, r14
    16c4:	b6 01       	movw	r22, r12
    16c6:	e1 d8       	rcall	.-3646   	; 0x88a <__mulsf3>
		(double)duty) / 1000));
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	4a e7       	ldi	r20, 0x7A	; 122
    16ce:	54 e4       	ldi	r21, 0x44	; 68
    16d0:	be d9       	rcall	.-3204   	; 0xa4e <__divsf3>
		tc_write_cc_buffer(pwm_servo2.tc, pwm_servo2.channel,
		(uint16_t)(((double)pwm_servo2.period *
		(double)duty) / 1000));
		break;
		case 3:
		tc_write_cc_buffer(pwm_servo3.tc, pwm_servo3.channel,
    16d2:	0e 94 22 01 	call	0x244	; 0x244 <__fixunssfsi>
    16d6:	80 91 6a 23 	lds	r24, 0x236A
    16da:	90 91 6b 23 	lds	r25, 0x236B
    16de:	e0 91 68 23 	lds	r30, 0x2368
    16e2:	f0 91 69 23 	lds	r31, 0x2369
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    16e6:	e6 fd       	sbrc	r30, 6
    16e8:	19 c0       	rjmp	.+50     	; 0x171c <pwm_update+0x278>
		switch (channel_index) {
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	91 05       	cpc	r25, r1
    16ee:	69 f0       	breq	.+26     	; 0x170a <pwm_update+0x266>
    16f0:	18 f4       	brcc	.+6      	; 0x16f8 <pwm_update+0x254>
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f4       	brne	.+60     	; 0x1732 <pwm_update+0x28e>
    16f6:	06 c0       	rjmp	.+12     	; 0x1704 <pwm_update+0x260>
    16f8:	83 30       	cpi	r24, 0x03	; 3
    16fa:	91 05       	cpc	r25, r1
    16fc:	49 f0       	breq	.+18     	; 0x1710 <pwm_update+0x26c>
    16fe:	04 97       	sbiw	r24, 0x04	; 4
    1700:	c1 f4       	brne	.+48     	; 0x1732 <pwm_update+0x28e>
    1702:	09 c0       	rjmp	.+18     	; 0x1716 <pwm_update+0x272>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    1704:	60 af       	std	Z+56, r22	; 0x38
    1706:	71 af       	std	Z+57, r23	; 0x39
    1708:	14 c0       	rjmp	.+40     	; 0x1732 <pwm_update+0x28e>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    170a:	62 af       	std	Z+58, r22	; 0x3a
    170c:	73 af       	std	Z+59, r23	; 0x3b
    170e:	11 c0       	rjmp	.+34     	; 0x1732 <pwm_update+0x28e>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    1710:	64 af       	std	Z+60, r22	; 0x3c
    1712:	75 af       	std	Z+61, r23	; 0x3d
    1714:	0e c0       	rjmp	.+28     	; 0x1732 <pwm_update+0x28e>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    1716:	66 af       	std	Z+62, r22	; 0x3e
    1718:	77 af       	std	Z+63, r23	; 0x3f
    171a:	0b c0       	rjmp	.+22     	; 0x1732 <pwm_update+0x28e>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	91 05       	cpc	r25, r1
    1720:	19 f0       	breq	.+6      	; 0x1728 <pwm_update+0x284>
    1722:	02 97       	sbiw	r24, 0x02	; 2
    1724:	31 f4       	brne	.+12     	; 0x1732 <pwm_update+0x28e>
    1726:	03 c0       	rjmp	.+6      	; 0x172e <pwm_update+0x28a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    1728:	60 af       	std	Z+56, r22	; 0x38
    172a:	71 af       	std	Z+57, r23	; 0x39
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <pwm_update+0x28e>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    172e:	62 af       	std	Z+58, r22	; 0x3a
    1730:	73 af       	std	Z+59, r23	; 0x3b
		(double)duty) / 1000));
		break;
	}
	//pwm_start(&pwm_servo0, duty);
	
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	ff 90       	pop	r15
    1738:	ef 90       	pop	r14
    173a:	df 90       	pop	r13
    173c:	cf 90       	pop	r12
    173e:	08 95       	ret

00001740 <switch_init>:
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    1740:	e0 e4       	ldi	r30, 0x40	; 64
    1742:	f6 e0       	ldi	r31, 0x06	; 6
    1744:	84 e0       	ldi	r24, 0x04	; 4
    1746:	82 83       	std	Z+2, r24	; 0x02
    1748:	88 e0       	ldi	r24, 0x08	; 8
    174a:	82 83       	std	Z+2, r24	; 0x02
    174c:	08 95       	ret

0000174e <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	00 d0       	rcall	.+0      	; 0x1758 <sysclk_init+0xa>
    1758:	00 d0       	rcall	.+0      	; 0x175a <sysclk_init+0xc>
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	80 93 70 00 	sts	0x0070, r24
    1764:	80 93 71 00 	sts	0x0071, r24
    1768:	80 93 72 00 	sts	0x0072, r24
    176c:	80 93 73 00 	sts	0x0073, r24
    1770:	80 93 74 00 	sts	0x0074, r24
    1774:	80 93 75 00 	sts	0x0075, r24
    1778:	80 93 76 00 	sts	0x0076, r24
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    177c:	6c e1       	ldi	r22, 0x1C	; 28
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	82 e0       	ldi	r24, 0x02	; 2
    1782:	5d d6       	rcall	.+3258   	; 0x243e <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    1784:	8a 83       	std	Y+2, r24	; 0x02
    1786:	6d e1       	ldi	r22, 0x1D	; 29
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	82 e0       	ldi	r24, 0x02	; 2
    178c:	58 d6       	rcall	.+3248   	; 0x243e <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    178e:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	9a 81       	ldd	r25, Y+2	; 0x02
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	21 f4       	brne	.+8      	; 0x17a0 <sysclk_init+0x52>
		cal = 0x2340;
    1798:	80 e4       	ldi	r24, 0x40	; 64
    179a:	93 e2       	ldi	r25, 0x23	; 35
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	9a 83       	std	Y+2, r25	; 0x02
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	9a 81       	ldd	r25, Y+2	; 0x02
    17a4:	8b 83       	std	Y+3, r24	; 0x03
    17a6:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    17a8:	e0 e6       	ldi	r30, 0x60	; 96
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    17ae:	8c 81       	ldd	r24, Y+4	; 0x04
    17b0:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    17b2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    17b4:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    17b6:	e0 e5       	ldi	r30, 0x50	; 80
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	90 81       	ld	r25, Z
    17bc:	92 60       	ori	r25, 0x02	; 2
    17be:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    17c0:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    17c2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    17c4:	81 ff       	sbrs	r24, 1
    17c6:	fd cf       	rjmp	.-6      	; 0x17c2 <sysclk_init+0x74>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    17c8:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    17ca:	f8 94       	cli
#if XMEGA_AU || XMEGA_B || XMEGA_C || XMEGA_E
		Assert((ref_id == OSC_ID_RC32KHZ)
				|| (ref_id == OSC_ID_XOSC)
				|| (ref_id == OSC_ID_USBSOF));

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    17cc:	00 e5       	ldi	r16, 0x50	; 80
    17ce:	10 e0       	ldi	r17, 0x00	; 0
    17d0:	d8 01       	movw	r26, r16
    17d2:	16 96       	adiw	r26, 0x06	; 6
    17d4:	9c 91       	ld	r25, X
    17d6:	16 97       	sbiw	r26, 0x06	; 6
    17d8:	99 7f       	andi	r25, 0xF9	; 249
    17da:	16 96       	adiw	r26, 0x06	; 6
    17dc:	9c 93       	st	X, r25
    17de:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    17e0:	e0 e6       	ldi	r30, 0x60	; 96
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	90 e8       	ldi	r25, 0x80	; 128
    17e6:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    17e8:	9b eb       	ldi	r25, 0xBB	; 187
    17ea:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    17ec:	16 96       	adiw	r26, 0x06	; 6
    17ee:	9c 91       	ld	r25, X
    17f0:	16 97       	sbiw	r26, 0x06	; 6
    17f2:	94 60       	ori	r25, 0x04	; 4
    17f4:	16 96       	adiw	r26, 0x06	; 6
    17f6:	9c 93       	st	X, r25
		}
		else if (ref_id == OSC_ID_RC32KHZ) {
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
		}
#endif
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    17f8:	90 81       	ld	r25, Z
    17fa:	91 60       	ori	r25, 0x01	; 1
    17fc:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    17fe:	8f bf       	out	0x3f, r24	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1800:	61 e0       	ldi	r22, 0x01	; 1
    1802:	80 e4       	ldi	r24, 0x40	; 64
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	15 d6       	rcall	.+3114   	; 0x2432 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1808:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    180a:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    180c:	f8 01       	movw	r30, r16
    180e:	90 81       	ld	r25, Z
    1810:	9e 7f       	andi	r25, 0xFE	; 254
    1812:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1814:	8f bf       	out	0x3f, r24	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1816:	24 96       	adiw	r28, 0x04	; 4
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	08 95       	ret

00001826 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1826:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    1828:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    182a:	fc 01       	movw	r30, r24
    182c:	e0 59       	subi	r30, 0x90	; 144
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	60 95       	com	r22
    1832:	80 81       	ld	r24, Z
    1834:	68 23       	and	r22, r24
    1836:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1838:	2f bf       	out	0x3f, r18	; 63
    183a:	08 95       	ret

0000183c <udi_cdc_comm_enable>:
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
}
    183c:	10 92 b5 20 	sts	0x20B5, r1
    1840:	10 92 b6 20 	sts	0x20B6, r1
    1844:	10 92 b7 20 	sts	0x20B7, r1
    1848:	81 ea       	ldi	r24, 0xA1	; 161
    184a:	80 93 b8 20 	sts	0x20B8, r24
    184e:	80 e2       	ldi	r24, 0x20	; 32
    1850:	80 93 b9 20 	sts	0x20B9, r24
    1854:	10 92 ba 20 	sts	0x20BA, r1
    1858:	10 92 bb 20 	sts	0x20BB, r1
    185c:	10 92 bc 20 	sts	0x20BC, r1
    1860:	10 92 bd 20 	sts	0x20BD, r1
    1864:	82 e0       	ldi	r24, 0x02	; 2
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	80 93 be 20 	sts	0x20BE, r24
    186c:	90 93 bf 20 	sts	0x20BF, r25
    1870:	10 92 c0 20 	sts	0x20C0, r1
    1874:	10 92 c1 20 	sts	0x20C1, r1
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	92 ec       	ldi	r25, 0xC2	; 194
    187c:	a1 e0       	ldi	r26, 0x01	; 1
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	80 93 c2 20 	sts	0x20C2, r24
    1884:	90 93 c3 20 	sts	0x20C3, r25
    1888:	a0 93 c4 20 	sts	0x20C4, r26
    188c:	b0 93 c5 20 	sts	0x20C5, r27
    1890:	10 92 c6 20 	sts	0x20C6, r1
    1894:	10 92 c7 20 	sts	0x20C7, r1
    1898:	88 e0       	ldi	r24, 0x08	; 8
    189a:	80 93 c8 20 	sts	0x20C8, r24
    189e:	80 91 b5 20 	lds	r24, 0x20B5
    18a2:	8f 5f       	subi	r24, 0xFF	; 255
    18a4:	80 93 b5 20 	sts	0x20B5, r24
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	08 95       	ret

000018ac <udi_cdc_comm_disable>:
    18ac:	80 91 b5 20 	lds	r24, 0x20B5
    18b0:	81 50       	subi	r24, 0x01	; 1
    18b2:	80 93 b5 20 	sts	0x20B5, r24
    18b6:	08 95       	ret

000018b8 <udi_cdc_data_disable>:
    18b8:	80 91 b4 20 	lds	r24, 0x20B4
    18bc:	81 50       	subi	r24, 0x01	; 1
    18be:	80 93 b4 20 	sts	0x20B4, r24
    18c2:	80 91 b4 20 	lds	r24, 0x20B4
    18c6:	10 92 b3 20 	sts	0x20B3, r1
    18ca:	08 95       	ret

000018cc <udi_cdc_data_setup>:
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	08 95       	ret

000018d0 <udi_cdc_getsetting>:
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	08 95       	ret

000018d4 <udi_cdc_comm_setup>:
    18d4:	80 91 96 23 	lds	r24, 0x2396
    18d8:	88 23       	and	r24, r24
    18da:	dc f4       	brge	.+54     	; 0x1912 <udi_cdc_comm_setup+0x3e>
    18dc:	80 76       	andi	r24, 0x60	; 96
    18de:	80 32       	cpi	r24, 0x20	; 32
    18e0:	e9 f5       	brne	.+122    	; 0x195c <udi_cdc_comm_setup+0x88>
    18e2:	80 91 97 23 	lds	r24, 0x2397
    18e6:	81 32       	cpi	r24, 0x21	; 33
    18e8:	d9 f5       	brne	.+118    	; 0x1960 <udi_cdc_comm_setup+0x8c>
    18ea:	80 91 9c 23 	lds	r24, 0x239C
    18ee:	90 91 9d 23 	lds	r25, 0x239D
    18f2:	07 97       	sbiw	r24, 0x07	; 7
    18f4:	b9 f5       	brne	.+110    	; 0x1964 <udi_cdc_comm_setup+0x90>
    18f6:	82 ec       	ldi	r24, 0xC2	; 194
    18f8:	90 e2       	ldi	r25, 0x20	; 32
    18fa:	80 93 9e 23 	sts	0x239E, r24
    18fe:	90 93 9f 23 	sts	0x239F, r25
    1902:	87 e0       	ldi	r24, 0x07	; 7
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	80 93 a0 23 	sts	0x23A0, r24
    190a:	90 93 a1 23 	sts	0x23A1, r25
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	08 95       	ret
    1912:	80 76       	andi	r24, 0x60	; 96
    1914:	80 32       	cpi	r24, 0x20	; 32
    1916:	41 f5       	brne	.+80     	; 0x1968 <udi_cdc_comm_setup+0x94>
    1918:	80 91 97 23 	lds	r24, 0x2397
    191c:	80 32       	cpi	r24, 0x20	; 32
    191e:	21 f0       	breq	.+8      	; 0x1928 <udi_cdc_comm_setup+0x54>
    1920:	82 32       	cpi	r24, 0x22	; 34
    1922:	21 f5       	brne	.+72     	; 0x196c <udi_cdc_comm_setup+0x98>
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	08 95       	ret
    1928:	80 91 9c 23 	lds	r24, 0x239C
    192c:	90 91 9d 23 	lds	r25, 0x239D
    1930:	07 97       	sbiw	r24, 0x07	; 7
    1932:	f1 f4       	brne	.+60     	; 0x1970 <udi_cdc_comm_setup+0x9c>
    1934:	8a eb       	ldi	r24, 0xBA	; 186
    1936:	9c e0       	ldi	r25, 0x0C	; 12
    1938:	80 93 a2 23 	sts	0x23A2, r24
    193c:	90 93 a3 23 	sts	0x23A3, r25
    1940:	82 ec       	ldi	r24, 0xC2	; 194
    1942:	90 e2       	ldi	r25, 0x20	; 32
    1944:	80 93 9e 23 	sts	0x239E, r24
    1948:	90 93 9f 23 	sts	0x239F, r25
    194c:	87 e0       	ldi	r24, 0x07	; 7
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	80 93 a0 23 	sts	0x23A0, r24
    1954:	90 93 a1 23 	sts	0x23A1, r25
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	08 95       	ret
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	08 95       	ret
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	08 95       	ret
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	08 95       	ret
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	08 95       	ret
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	08 95       	ret
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	08 95       	ret

00001974 <udi_cdc_line_coding_received>:
    1974:	08 95       	ret

00001976 <udi_cdc_tx_send>:
    1976:	ff 92       	push	r15
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	80 91 ad 20 	lds	r24, 0x20AD
    1984:	81 11       	cpse	r24, r1
    1986:	9c c0       	rjmp	.+312    	; 0x1ac0 <udi_cdc_tx_send+0x14a>
    1988:	0e 94 03 1c 	call	0x3806	; 0x3806 <udd_is_high_speed>
    198c:	88 23       	and	r24, r24
    198e:	51 f0       	breq	.+20     	; 0x19a4 <udi_cdc_tx_send+0x2e>
    1990:	c0 91 cd 20 	lds	r28, 0x20CD
    1994:	d0 91 ce 20 	lds	r29, 0x20CE
    1998:	0e 94 12 1c 	call	0x3824	; 0x3824 <udd_get_micro_frame_number>
    199c:	c8 17       	cp	r28, r24
    199e:	d9 07       	cpc	r29, r25
    19a0:	59 f4       	brne	.+22     	; 0x19b8 <udi_cdc_tx_send+0x42>
    19a2:	8e c0       	rjmp	.+284    	; 0x1ac0 <udi_cdc_tx_send+0x14a>
    19a4:	c0 91 cd 20 	lds	r28, 0x20CD
    19a8:	d0 91 ce 20 	lds	r29, 0x20CE
    19ac:	0e 94 0b 1c 	call	0x3816	; 0x3816 <udd_get_frame_number>
    19b0:	c8 17       	cp	r28, r24
    19b2:	d9 07       	cpc	r29, r25
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <udi_cdc_tx_send+0x42>
    19b6:	84 c0       	rjmp	.+264    	; 0x1ac0 <udi_cdc_tx_send+0x14a>
    19b8:	df b7       	in	r29, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	c0 91 ae 20 	lds	r28, 0x20AE
    19c0:	ec 2f       	mov	r30, r28
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	ee 0f       	add	r30, r30
    19c6:	ff 1f       	adc	r31, r31
    19c8:	e7 53       	subi	r30, 0x37	; 55
    19ca:	ff 4d       	sbci	r31, 0xDF	; 223
    19cc:	80 81       	ld	r24, Z
    19ce:	91 81       	ldd	r25, Z+1	; 0x01
    19d0:	89 2b       	or	r24, r25
    19d2:	09 f5       	brne	.+66     	; 0x1a16 <udi_cdc_tx_send+0xa0>
    19d4:	80 91 d3 20 	lds	r24, 0x20D3
    19d8:	90 91 d4 20 	lds	r25, 0x20D4
    19dc:	01 96       	adiw	r24, 0x01	; 1
    19de:	80 93 d3 20 	sts	0x20D3, r24
    19e2:	90 93 d4 20 	sts	0x20D4, r25
    19e6:	0e 94 03 1c 	call	0x3806	; 0x3806 <udd_is_high_speed>
    19ea:	81 11       	cpse	r24, r1
    19ec:	07 c0       	rjmp	.+14     	; 0x19fc <udi_cdc_tx_send+0x86>
    19ee:	80 91 d3 20 	lds	r24, 0x20D3
    19f2:	90 91 d4 20 	lds	r25, 0x20D4
    19f6:	84 36       	cpi	r24, 0x64	; 100
    19f8:	91 05       	cpc	r25, r1
    19fa:	58 f0       	brcs	.+22     	; 0x1a12 <udi_cdc_tx_send+0x9c>
    19fc:	0e 94 03 1c 	call	0x3806	; 0x3806 <udd_is_high_speed>
    1a00:	88 23       	and	r24, r24
    1a02:	49 f0       	breq	.+18     	; 0x1a16 <udi_cdc_tx_send+0xa0>
    1a04:	80 91 d3 20 	lds	r24, 0x20D3
    1a08:	90 91 d4 20 	lds	r25, 0x20D4
    1a0c:	80 32       	cpi	r24, 0x20	; 32
    1a0e:	93 40       	sbci	r25, 0x03	; 3
    1a10:	10 f4       	brcc	.+4      	; 0x1a16 <udi_cdc_tx_send+0xa0>
    1a12:	df bf       	out	0x3f, r29	; 63
    1a14:	55 c0       	rjmp	.+170    	; 0x1ac0 <udi_cdc_tx_send+0x14a>
    1a16:	10 92 d3 20 	sts	0x20D3, r1
    1a1a:	10 92 d4 20 	sts	0x20D4, r1
    1a1e:	80 91 ac 20 	lds	r24, 0x20AC
    1a22:	81 11       	cpse	r24, r1
    1a24:	06 c0       	rjmp	.+12     	; 0x1a32 <udi_cdc_tx_send+0xbc>
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	c1 11       	cpse	r28, r1
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	80 93 ae 20 	sts	0x20AE, r24
    1a30:	04 c0       	rjmp	.+8      	; 0x1a3a <udi_cdc_tx_send+0xc4>
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	c1 11       	cpse	r28, r1
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	c8 2f       	mov	r28, r24
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	80 93 ad 20 	sts	0x20AD, r24
    1a40:	df bf       	out	0x3f, r29	; 63
    1a42:	d0 e0       	ldi	r29, 0x00	; 0
    1a44:	fe 01       	movw	r30, r28
    1a46:	ee 0f       	add	r30, r30
    1a48:	ff 1f       	adc	r31, r31
    1a4a:	e7 53       	subi	r30, 0x37	; 55
    1a4c:	ff 4d       	sbci	r31, 0xDF	; 223
    1a4e:	ff 24       	eor	r15, r15
    1a50:	f3 94       	inc	r15
    1a52:	80 81       	ld	r24, Z
    1a54:	91 81       	ldd	r25, Z+1	; 0x01
    1a56:	80 34       	cpi	r24, 0x40	; 64
    1a58:	91 05       	cpc	r25, r1
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <udi_cdc_tx_send+0xe8>
    1a5c:	f1 2c       	mov	r15, r1
    1a5e:	ff 20       	and	r15, r15
    1a60:	91 f0       	breq	.+36     	; 0x1a86 <udi_cdc_tx_send+0x110>
    1a62:	0e 94 03 1c 	call	0x3806	; 0x3806 <udd_is_high_speed>
    1a66:	88 23       	and	r24, r24
    1a68:	39 f0       	breq	.+14     	; 0x1a78 <udi_cdc_tx_send+0x102>
    1a6a:	0e 94 12 1c 	call	0x3824	; 0x3824 <udd_get_micro_frame_number>
    1a6e:	80 93 cd 20 	sts	0x20CD, r24
    1a72:	90 93 ce 20 	sts	0x20CE, r25
    1a76:	0b c0       	rjmp	.+22     	; 0x1a8e <udi_cdc_tx_send+0x118>
    1a78:	0e 94 0b 1c 	call	0x3816	; 0x3816 <udd_get_frame_number>
    1a7c:	80 93 cd 20 	sts	0x20CD, r24
    1a80:	90 93 ce 20 	sts	0x20CE, r25
    1a84:	04 c0       	rjmp	.+8      	; 0x1a8e <udi_cdc_tx_send+0x118>
    1a86:	10 92 cd 20 	sts	0x20CD, r1
    1a8a:	10 92 ce 20 	sts	0x20CE, r1
    1a8e:	fe 01       	movw	r30, r28
    1a90:	ee 0f       	add	r30, r30
    1a92:	ff 1f       	adc	r31, r31
    1a94:	e7 53       	subi	r30, 0x37	; 55
    1a96:	ff 4d       	sbci	r31, 0xDF	; 223
    1a98:	20 81       	ld	r18, Z
    1a9a:	31 81       	ldd	r19, Z+1	; 0x01
    1a9c:	ae 01       	movw	r20, r28
    1a9e:	00 24       	eor	r0, r0
    1aa0:	56 95       	lsr	r21
    1aa2:	47 95       	ror	r20
    1aa4:	07 94       	ror	r0
    1aa6:	56 95       	lsr	r21
    1aa8:	47 95       	ror	r20
    1aaa:	07 94       	ror	r0
    1aac:	54 2f       	mov	r21, r20
    1aae:	40 2d       	mov	r20, r0
    1ab0:	4a 52       	subi	r20, 0x2A	; 42
    1ab2:	5f 4d       	sbci	r21, 0xDF	; 223
    1ab4:	08 e6       	ldi	r16, 0x68	; 104
    1ab6:	1d e0       	ldi	r17, 0x0D	; 13
    1ab8:	6f 2d       	mov	r22, r15
    1aba:	81 e8       	ldi	r24, 0x81	; 129
    1abc:	0e 94 67 1c 	call	0x38ce	; 0x38ce <udd_ep_run>
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	ff 90       	pop	r15
    1aca:	08 95       	ret

00001acc <udi_cdc_data_sof_notify>:
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	53 cf       	rjmp	.-346    	; 0x1976 <udi_cdc_tx_send>

00001ad0 <udi_cdc_data_sent>:
    1ad0:	89 2b       	or	r24, r25
    1ad2:	a9 f4       	brne	.+42     	; 0x1afe <udi_cdc_data_sent+0x2e>
    1ad4:	20 91 ae 20 	lds	r18, 0x20AE
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	22 23       	and	r18, r18
    1ade:	11 f0       	breq	.+4      	; 0x1ae4 <udi_cdc_data_sent+0x14>
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	ee 0f       	add	r30, r30
    1ae8:	ff 1f       	adc	r31, r31
    1aea:	e7 53       	subi	r30, 0x37	; 55
    1aec:	ff 4d       	sbci	r31, 0xDF	; 223
    1aee:	10 82       	st	Z, r1
    1af0:	11 82       	std	Z+1, r1	; 0x01
    1af2:	10 92 ac 20 	sts	0x20AC, r1
    1af6:	10 92 ad 20 	sts	0x20AD, r1
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	3c cf       	rjmp	.-392    	; 0x1976 <udi_cdc_tx_send>
    1afe:	08 95       	ret

00001b00 <udi_cdc_multi_get_nb_received_data>:
    1b00:	4f b7       	in	r20, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	80 91 b0 20 	lds	r24, 0x20B0
    1b08:	90 91 b1 20 	lds	r25, 0x20B1
    1b0c:	e0 91 b2 20 	lds	r30, 0x20B2
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	ee 0f       	add	r30, r30
    1b14:	ff 1f       	adc	r31, r31
    1b16:	e1 53       	subi	r30, 0x31	; 49
    1b18:	ff 4d       	sbci	r31, 0xDF	; 223
    1b1a:	20 81       	ld	r18, Z
    1b1c:	31 81       	ldd	r19, Z+1	; 0x01
    1b1e:	28 1b       	sub	r18, r24
    1b20:	39 0b       	sbc	r19, r25
    1b22:	4f bf       	out	0x3f, r20	; 63
    1b24:	82 2f       	mov	r24, r18
    1b26:	93 2f       	mov	r25, r19
    1b28:	08 95       	ret

00001b2a <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    1b2a:	ea df       	rcall	.-44     	; 0x1b00 <udi_cdc_multi_get_nb_received_data>
    1b2c:	21 e0       	ldi	r18, 0x01	; 1
    1b2e:	89 2b       	or	r24, r25
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <udi_cdc_multi_is_rx_ready+0xa>
    1b32:	20 e0       	ldi	r18, 0x00	; 0
}
    1b34:	82 2f       	mov	r24, r18
    1b36:	08 95       	ret

00001b38 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
    1b38:	0f 93       	push	r16
    1b3a:	1f 93       	push	r17
    1b3c:	cf 93       	push	r28
    1b3e:	df 93       	push	r29

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1b40:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
    1b42:	f8 94       	cli
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    1b44:	50 91 b2 20 	lds	r21, 0x20B2
	if (udi_cdc_rx_trans_ongoing[port] ||
    1b48:	80 91 af 20 	lds	r24, 0x20AF
    1b4c:	81 11       	cpse	r24, r1
    1b4e:	10 c0       	rjmp	.+32     	; 0x1b70 <udi_cdc_rx_start+0x38>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    1b50:	20 91 b0 20 	lds	r18, 0x20B0
    1b54:	30 91 b1 20 	lds	r19, 0x20B1
    1b58:	c5 2f       	mov	r28, r21
    1b5a:	d0 e0       	ldi	r29, 0x00	; 0
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	ee 0f       	add	r30, r30
    1b60:	ff 1f       	adc	r31, r31
    1b62:	e1 53       	subi	r30, 0x31	; 49
    1b64:	ff 4d       	sbci	r31, 0xDF	; 223
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
    1b66:	80 81       	ld	r24, Z
    1b68:	91 81       	ldd	r25, Z+1	; 0x01
    1b6a:	28 17       	cp	r18, r24
    1b6c:	39 07       	cpc	r19, r25
    1b6e:	18 f4       	brcc	.+6      	; 0x1b76 <udi_cdc_rx_start+0x3e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b70:	4f bf       	out	0x3f, r20	; 63
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	23 c0       	rjmp	.+70     	; 0x1bbc <udi_cdc_rx_start+0x84>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
    1b76:	10 92 b0 20 	sts	0x20B0, r1
    1b7a:	10 92 b1 20 	sts	0x20B1, r1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	51 11       	cpse	r21, r1
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	80 93 b2 20 	sts	0x20B2, r24

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	80 93 af 20 	sts	0x20AF, r24
    1b8e:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	cb df       	rcall	.-106    	; 0x1b2a <udi_cdc_multi_is_rx_ready>
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
    1b94:	ae 01       	movw	r20, r28
    1b96:	00 24       	eor	r0, r0
    1b98:	56 95       	lsr	r21
    1b9a:	47 95       	ror	r20
    1b9c:	07 94       	ror	r0
    1b9e:	56 95       	lsr	r21
    1ba0:	47 95       	ror	r20
    1ba2:	07 94       	ror	r0
    1ba4:	54 2f       	mov	r21, r20
    1ba6:	40 2d       	mov	r20, r0
    1ba8:	4a 5a       	subi	r20, 0xAA	; 170
    1baa:	5e 4d       	sbci	r21, 0xDE	; 222
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
    1bac:	03 ee       	ldi	r16, 0xE3	; 227
    1bae:	1d e0       	ldi	r17, 0x0D	; 13
    1bb0:	20 e4       	ldi	r18, 0x40	; 64
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	82 e0       	ldi	r24, 0x02	; 2
    1bb8:	0e 94 67 1c 	call	0x38ce	; 0x38ce <udd_ep_run>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	08 95       	ret

00001bc6 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    1bc6:	0f 93       	push	r16
    1bc8:	1f 93       	push	r17
    1bca:	a4 2f       	mov	r26, r20
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
    1bcc:	89 2b       	or	r24, r25
    1bce:	49 f5       	brne	.+82     	; 0x1c22 <udi_cdc_data_received+0x5c>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    1bd0:	80 91 b2 20 	lds	r24, 0x20B2
    1bd4:	e1 e0       	ldi	r30, 0x01	; 1
    1bd6:	81 11       	cpse	r24, r1
    1bd8:	e0 e0       	ldi	r30, 0x00	; 0
	if (!n) {
    1bda:	61 15       	cp	r22, r1
    1bdc:	71 05       	cpc	r23, r1
    1bde:	b1 f4       	brne	.+44     	; 0x1c0c <udi_cdc_data_received+0x46>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	00 24       	eor	r0, r0
    1be4:	f6 95       	lsr	r31
    1be6:	e7 95       	ror	r30
    1be8:	07 94       	ror	r0
    1bea:	f6 95       	lsr	r31
    1bec:	e7 95       	ror	r30
    1bee:	07 94       	ror	r0
    1bf0:	fe 2f       	mov	r31, r30
    1bf2:	e0 2d       	mov	r30, r0
    1bf4:	af 01       	movw	r20, r30
    1bf6:	4a 5a       	subi	r20, 0xAA	; 170
    1bf8:	5e 4d       	sbci	r21, 0xDE	; 222
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
    1bfa:	03 ee       	ldi	r16, 0xE3	; 227
    1bfc:	1d e0       	ldi	r17, 0x0D	; 13
    1bfe:	20 e4       	ldi	r18, 0x40	; 64
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	61 e0       	ldi	r22, 0x01	; 1
    1c04:	8a 2f       	mov	r24, r26
    1c06:	0e 94 67 1c 	call	0x38ce	; 0x38ce <udd_ep_run>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
    1c0a:	0b c0       	rjmp	.+22     	; 0x1c22 <udi_cdc_data_received+0x5c>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	ee 0f       	add	r30, r30
    1c10:	ff 1f       	adc	r31, r31
    1c12:	e1 53       	subi	r30, 0x31	; 49
    1c14:	ff 4d       	sbci	r31, 0xDF	; 223
    1c16:	60 83       	st	Z, r22
    1c18:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
    1c1a:	10 92 af 20 	sts	0x20AF, r1
	udi_cdc_rx_start(port);
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	8b df       	rcall	.-234    	; 0x1b38 <udi_cdc_rx_start>
}
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	08 95       	ret

00001c28 <udi_cdc_data_enable>:
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
    1c28:	10 92 b4 20 	sts	0x20B4, r1
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
    1c2c:	10 92 ad 20 	sts	0x20AD, r1
	udi_cdc_tx_both_buf_to_send[port] = false;
    1c30:	10 92 ac 20 	sts	0x20AC, r1
	udi_cdc_tx_buf_sel[port] = 0;
    1c34:	10 92 ae 20 	sts	0x20AE, r1
	udi_cdc_tx_buf_nb[port][0] = 0;
    1c38:	10 92 c9 20 	sts	0x20C9, r1
    1c3c:	10 92 ca 20 	sts	0x20CA, r1
	udi_cdc_tx_buf_nb[port][1] = 0;
    1c40:	10 92 cb 20 	sts	0x20CB, r1
    1c44:	10 92 cc 20 	sts	0x20CC, r1
	udi_cdc_tx_sof_num[port] = 0;
    1c48:	10 92 cd 20 	sts	0x20CD, r1
    1c4c:	10 92 ce 20 	sts	0x20CE, r1
	udi_cdc_tx_send(port);
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	91 de       	rcall	.-734    	; 0x1976 <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    1c54:	10 92 af 20 	sts	0x20AF, r1
	udi_cdc_rx_buf_sel[port] = 0;
    1c58:	10 92 b2 20 	sts	0x20B2, r1
	udi_cdc_rx_buf_nb[port][0] = 0;
    1c5c:	10 92 cf 20 	sts	0x20CF, r1
    1c60:	10 92 d0 20 	sts	0x20D0, r1
	udi_cdc_rx_pos[port] = 0;
    1c64:	10 92 b0 20 	sts	0x20B0, r1
    1c68:	10 92 b1 20 	sts	0x20B1, r1
	if (!udi_cdc_rx_start(port)) {
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	64 df       	rcall	.-312    	; 0x1b38 <udi_cdc_rx_start>
    1c70:	88 23       	and	r24, r24
    1c72:	61 f0       	breq	.+24     	; 0x1c8c <udi_cdc_data_enable+0x64>
		return false;
	}
	udi_cdc_nb_data_enabled++;
    1c74:	80 91 b4 20 	lds	r24, 0x20B4
    1c78:	8f 5f       	subi	r24, 0xFF	; 255
    1c7a:	80 93 b4 20 	sts	0x20B4, r24
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    1c7e:	80 91 b4 20 	lds	r24, 0x20B4
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	29 f4       	brne	.+10     	; 0x1c90 <udi_cdc_data_enable+0x68>
		udi_cdc_data_running = true;
    1c86:	80 93 b3 20 	sts	0x20B3, r24
    1c8a:	08 95       	ret
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_buf_sel[port] = 0;
	udi_cdc_rx_buf_nb[port][0] = 0;
	udi_cdc_rx_pos[port] = 0;
	if (!udi_cdc_rx_start(port)) {
		return false;
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	08 95       	ret
	}
	udi_cdc_nb_data_enabled++;
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
		udi_cdc_data_running = true;
	}
	return true;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
}
    1c92:	08 95       	ret

00001c94 <udc_get_eof_conf>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1c94:	e0 91 d9 21 	lds	r30, 0x21D9
    1c98:	f0 91 da 21 	lds	r31, 0x21DA
    1c9c:	01 90       	ld	r0, Z+
    1c9e:	f0 81       	ld	r31, Z
    1ca0:	e0 2d       	mov	r30, r0
    1ca2:	22 81       	ldd	r18, Z+2	; 0x02
    1ca4:	33 81       	ldd	r19, Z+3	; 0x03
    1ca6:	2e 0f       	add	r18, r30
    1ca8:	3f 1f       	adc	r19, r31
    1caa:	82 2f       	mov	r24, r18
    1cac:	93 2f       	mov	r25, r19
    1cae:	08 95       	ret

00001cb0 <udc_next_desc_in_iface>:
    1cb0:	1f 93       	push	r17
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	ec 01       	movw	r28, r24
    1cb8:	16 2f       	mov	r17, r22
    1cba:	ec df       	rcall	.-40     	; 0x1c94 <udc_get_eof_conf>
    1cbc:	28 81       	ld	r18, Y
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e2 0f       	add	r30, r18
    1cc2:	f1 1d       	adc	r31, r1
    1cc4:	e8 17       	cp	r30, r24
    1cc6:	f9 07       	cpc	r31, r25
    1cc8:	a0 f4       	brcc	.+40     	; 0x1cf2 <udc_next_desc_in_iface+0x42>
    1cca:	21 81       	ldd	r18, Z+1	; 0x01
    1ccc:	24 30       	cpi	r18, 0x04	; 4
    1cce:	a1 f0       	breq	.+40     	; 0x1cf8 <udc_next_desc_in_iface+0x48>
    1cd0:	21 13       	cpse	r18, r17
    1cd2:	06 c0       	rjmp	.+12     	; 0x1ce0 <udc_next_desc_in_iface+0x30>
    1cd4:	16 c0       	rjmp	.+44     	; 0x1d02 <udc_next_desc_in_iface+0x52>
    1cd6:	21 81       	ldd	r18, Z+1	; 0x01
    1cd8:	24 30       	cpi	r18, 0x04	; 4
    1cda:	89 f0       	breq	.+34     	; 0x1cfe <udc_next_desc_in_iface+0x4e>
    1cdc:	21 17       	cp	r18, r17
    1cde:	89 f0       	breq	.+34     	; 0x1d02 <udc_next_desc_in_iface+0x52>
    1ce0:	20 81       	ld	r18, Z
    1ce2:	e2 0f       	add	r30, r18
    1ce4:	f1 1d       	adc	r31, r1
    1ce6:	e8 17       	cp	r30, r24
    1ce8:	f9 07       	cpc	r31, r25
    1cea:	a8 f3       	brcs	.-22     	; 0x1cd6 <udc_next_desc_in_iface+0x26>
    1cec:	e0 e0       	ldi	r30, 0x00	; 0
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	08 c0       	rjmp	.+16     	; 0x1d02 <udc_next_desc_in_iface+0x52>
    1cf2:	e0 e0       	ldi	r30, 0x00	; 0
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	05 c0       	rjmp	.+10     	; 0x1d02 <udc_next_desc_in_iface+0x52>
    1cf8:	e0 e0       	ldi	r30, 0x00	; 0
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <udc_next_desc_in_iface+0x52>
    1cfe:	e0 e0       	ldi	r30, 0x00	; 0
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	8e 2f       	mov	r24, r30
    1d04:	9f 2f       	mov	r25, r31
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	08 95       	ret

00001d0e <udc_update_iface_desc>:
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	18 2f       	mov	r17, r24
    1d18:	06 2f       	mov	r16, r22
    1d1a:	80 91 d8 21 	lds	r24, 0x21D8
    1d1e:	88 23       	and	r24, r24
    1d20:	69 f1       	breq	.+90     	; 0x1d7c <udc_update_iface_desc+0x6e>
    1d22:	e0 91 d9 21 	lds	r30, 0x21D9
    1d26:	f0 91 da 21 	lds	r31, 0x21DA
    1d2a:	c0 81       	ld	r28, Z
    1d2c:	d1 81       	ldd	r29, Z+1	; 0x01
    1d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d30:	18 17       	cp	r17, r24
    1d32:	30 f5       	brcc	.+76     	; 0x1d80 <udc_update_iface_desc+0x72>
    1d34:	c0 93 d6 21 	sts	0x21D6, r28
    1d38:	d0 93 d7 21 	sts	0x21D7, r29
    1d3c:	ab df       	rcall	.-170    	; 0x1c94 <udc_get_eof_conf>
    1d3e:	9c 01       	movw	r18, r24
    1d40:	c8 17       	cp	r28, r24
    1d42:	d9 07       	cpc	r29, r25
    1d44:	f8 f4       	brcc	.+62     	; 0x1d84 <udc_update_iface_desc+0x76>
    1d46:	99 81       	ldd	r25, Y+1	; 0x01
    1d48:	94 30       	cpi	r25, 0x04	; 4
    1d4a:	61 f4       	brne	.+24     	; 0x1d64 <udc_update_iface_desc+0x56>
    1d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4e:	91 13       	cpse	r25, r17
    1d50:	09 c0       	rjmp	.+18     	; 0x1d64 <udc_update_iface_desc+0x56>
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	80 13       	cpse	r24, r16
    1d56:	06 c0       	rjmp	.+12     	; 0x1d64 <udc_update_iface_desc+0x56>
    1d58:	c0 93 d6 21 	sts	0x21D6, r28
    1d5c:	d0 93 d7 21 	sts	0x21D7, r29
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	11 c0       	rjmp	.+34     	; 0x1d86 <udc_update_iface_desc+0x78>
    1d64:	98 81       	ld	r25, Y
    1d66:	c9 0f       	add	r28, r25
    1d68:	d1 1d       	adc	r29, r1
    1d6a:	c2 17       	cp	r28, r18
    1d6c:	d3 07       	cpc	r29, r19
    1d6e:	58 f3       	brcs	.-42     	; 0x1d46 <udc_update_iface_desc+0x38>
    1d70:	c0 93 d6 21 	sts	0x21D6, r28
    1d74:	d0 93 d7 21 	sts	0x21D7, r29
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	05 c0       	rjmp	.+10     	; 0x1d86 <udc_update_iface_desc+0x78>
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	03 c0       	rjmp	.+6      	; 0x1d86 <udc_update_iface_desc+0x78>
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	01 c0       	rjmp	.+2      	; 0x1d86 <udc_update_iface_desc+0x78>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	08 95       	ret

00001d90 <udc_valid_address>:
    1d90:	80 91 98 23 	lds	r24, 0x2398
    1d94:	8f 77       	andi	r24, 0x7F	; 127
    1d96:	0c 94 05 1c 	jmp	0x380a	; 0x380a <udd_set_address>

00001d9a <udc_iface_enable>:
    1d9a:	1f 93       	push	r17
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	18 2f       	mov	r17, r24
    1da2:	b5 df       	rcall	.-150    	; 0x1d0e <udc_update_iface_desc>
    1da4:	88 23       	and	r24, r24
    1da6:	49 f1       	breq	.+82     	; 0x1dfa <udc_iface_enable+0x60>
    1da8:	c0 91 d6 21 	lds	r28, 0x21D6
    1dac:	d0 91 d7 21 	lds	r29, 0x21D7
    1db0:	65 e0       	ldi	r22, 0x05	; 5
    1db2:	ce 01       	movw	r24, r28
    1db4:	7d df       	rcall	.-262    	; 0x1cb0 <udc_next_desc_in_iface>
    1db6:	ec 01       	movw	r28, r24
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	49 f0       	breq	.+18     	; 0x1dce <udc_iface_enable+0x34>
    1dbc:	4c 81       	ldd	r20, Y+4	; 0x04
    1dbe:	5d 81       	ldd	r21, Y+5	; 0x05
    1dc0:	6b 81       	ldd	r22, Y+3	; 0x03
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	0e 94 1e 1c 	call	0x383c	; 0x383c <udd_ep_alloc>
    1dc8:	81 11       	cpse	r24, r1
    1dca:	f2 cf       	rjmp	.-28     	; 0x1db0 <udc_iface_enable+0x16>
    1dcc:	17 c0       	rjmp	.+46     	; 0x1dfc <udc_iface_enable+0x62>
    1dce:	a0 91 d9 21 	lds	r26, 0x21D9
    1dd2:	b0 91 da 21 	lds	r27, 0x21DA
    1dd6:	81 2f       	mov	r24, r17
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	12 96       	adiw	r26, 0x02	; 2
    1de0:	ed 91       	ld	r30, X+
    1de2:	fc 91       	ld	r31, X
    1de4:	13 97       	sbiw	r26, 0x03	; 3
    1de6:	e8 0f       	add	r30, r24
    1de8:	f9 1f       	adc	r31, r25
    1dea:	01 90       	ld	r0, Z+
    1dec:	f0 81       	ld	r31, Z
    1dee:	e0 2d       	mov	r30, r0
    1df0:	01 90       	ld	r0, Z+
    1df2:	f0 81       	ld	r31, Z
    1df4:	e0 2d       	mov	r30, r0
    1df6:	09 95       	icall
    1df8:	01 c0       	rjmp	.+2      	; 0x1dfc <udc_iface_enable+0x62>
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	08 95       	ret

00001e04 <udc_iface_disable>:
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	c8 2f       	mov	r28, r24
    1e0e:	60 e0       	ldi	r22, 0x00	; 0
    1e10:	7e df       	rcall	.-260    	; 0x1d0e <udc_update_iface_desc>
    1e12:	88 23       	and	r24, r24
    1e14:	89 f1       	breq	.+98     	; 0x1e78 <udc_iface_disable+0x74>
    1e16:	a0 91 d9 21 	lds	r26, 0x21D9
    1e1a:	b0 91 da 21 	lds	r27, 0x21DA
    1e1e:	ec 2f       	mov	r30, r28
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	ee 0f       	add	r30, r30
    1e24:	ff 1f       	adc	r31, r31
    1e26:	12 96       	adiw	r26, 0x02	; 2
    1e28:	2d 91       	ld	r18, X+
    1e2a:	3c 91       	ld	r19, X
    1e2c:	13 97       	sbiw	r26, 0x03	; 3
    1e2e:	e2 0f       	add	r30, r18
    1e30:	f3 1f       	adc	r31, r19
    1e32:	00 81       	ld	r16, Z
    1e34:	11 81       	ldd	r17, Z+1	; 0x01
    1e36:	d8 01       	movw	r26, r16
    1e38:	16 96       	adiw	r26, 0x06	; 6
    1e3a:	ed 91       	ld	r30, X+
    1e3c:	fc 91       	ld	r31, X
    1e3e:	17 97       	sbiw	r26, 0x07	; 7
    1e40:	09 95       	icall
    1e42:	68 2f       	mov	r22, r24
    1e44:	8c 2f       	mov	r24, r28
    1e46:	63 df       	rcall	.-314    	; 0x1d0e <udc_update_iface_desc>
    1e48:	88 23       	and	r24, r24
    1e4a:	c1 f0       	breq	.+48     	; 0x1e7c <udc_iface_disable+0x78>
    1e4c:	c0 91 d6 21 	lds	r28, 0x21D6
    1e50:	d0 91 d7 21 	lds	r29, 0x21D7
    1e54:	65 e0       	ldi	r22, 0x05	; 5
    1e56:	ce 01       	movw	r24, r28
    1e58:	2b df       	rcall	.-426    	; 0x1cb0 <udc_next_desc_in_iface>
    1e5a:	ec 01       	movw	r28, r24
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	21 f0       	breq	.+8      	; 0x1e68 <udc_iface_disable+0x64>
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <udd_ep_free>
    1e66:	f6 cf       	rjmp	.-20     	; 0x1e54 <udc_iface_disable+0x50>
    1e68:	d8 01       	movw	r26, r16
    1e6a:	12 96       	adiw	r26, 0x02	; 2
    1e6c:	ed 91       	ld	r30, X+
    1e6e:	fc 91       	ld	r31, X
    1e70:	13 97       	sbiw	r26, 0x03	; 3
    1e72:	09 95       	icall
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	03 c0       	rjmp	.+6      	; 0x1e7e <udc_iface_disable+0x7a>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	01 c0       	rjmp	.+2      	; 0x1e7e <udc_iface_disable+0x7a>
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	1f 91       	pop	r17
    1e84:	0f 91       	pop	r16
    1e86:	08 95       	ret

00001e88 <udc_reset>:
    1e88:	cf 93       	push	r28
    1e8a:	80 91 d8 21 	lds	r24, 0x21D8
    1e8e:	88 23       	and	r24, r24
    1e90:	c1 f0       	breq	.+48     	; 0x1ec2 <udc_reset+0x3a>
    1e92:	e0 91 d9 21 	lds	r30, 0x21D9
    1e96:	f0 91 da 21 	lds	r31, 0x21DA
    1e9a:	01 90       	ld	r0, Z+
    1e9c:	f0 81       	ld	r31, Z
    1e9e:	e0 2d       	mov	r30, r0
    1ea0:	84 81       	ldd	r24, Z+4	; 0x04
    1ea2:	88 23       	and	r24, r24
    1ea4:	71 f0       	breq	.+28     	; 0x1ec2 <udc_reset+0x3a>
    1ea6:	c0 e0       	ldi	r28, 0x00	; 0
    1ea8:	8c 2f       	mov	r24, r28
    1eaa:	ac df       	rcall	.-168    	; 0x1e04 <udc_iface_disable>
    1eac:	cf 5f       	subi	r28, 0xFF	; 255
    1eae:	e0 91 d9 21 	lds	r30, 0x21D9
    1eb2:	f0 91 da 21 	lds	r31, 0x21DA
    1eb6:	01 90       	ld	r0, Z+
    1eb8:	f0 81       	ld	r31, Z
    1eba:	e0 2d       	mov	r30, r0
    1ebc:	84 81       	ldd	r24, Z+4	; 0x04
    1ebe:	c8 17       	cp	r28, r24
    1ec0:	98 f3       	brcs	.-26     	; 0x1ea8 <udc_reset+0x20>
    1ec2:	10 92 d8 21 	sts	0x21D8, r1
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	80 93 db 21 	sts	0x21DB, r24
    1ece:	90 93 dc 21 	sts	0x21DC, r25
    1ed2:	cf 91       	pop	r28
    1ed4:	08 95       	ret

00001ed6 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1ed6:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1ed8:	80 91 d8 21 	lds	r24, 0x21D8
    1edc:	88 23       	and	r24, r24
    1ede:	41 f1       	breq	.+80     	; 0x1f30 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ee0:	e0 91 d9 21 	lds	r30, 0x21D9
    1ee4:	f0 91 da 21 	lds	r31, 0x21DA
    1ee8:	a0 81       	ld	r26, Z
    1eea:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1eec:	14 96       	adiw	r26, 0x04	; 4
    1eee:	8c 91       	ld	r24, X
    1ef0:	88 23       	and	r24, r24
    1ef2:	f1 f0       	breq	.+60     	; 0x1f30 <udc_sof_notify+0x5a>
    1ef4:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1ef6:	8c 2f       	mov	r24, r28
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	88 0f       	add	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	02 80       	ldd	r0, Z+2	; 0x02
    1f00:	f3 81       	ldd	r31, Z+3	; 0x03
    1f02:	e0 2d       	mov	r30, r0
    1f04:	e8 0f       	add	r30, r24
    1f06:	f9 1f       	adc	r31, r25
    1f08:	01 90       	ld	r0, Z+
    1f0a:	f0 81       	ld	r31, Z
    1f0c:	e0 2d       	mov	r30, r0
    1f0e:	00 84       	ldd	r0, Z+8	; 0x08
    1f10:	f1 85       	ldd	r31, Z+9	; 0x09
    1f12:	e0 2d       	mov	r30, r0
    1f14:	30 97       	sbiw	r30, 0x00	; 0
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1f18:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1f1a:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f1c:	e0 91 d9 21 	lds	r30, 0x21D9
    1f20:	f0 91 da 21 	lds	r31, 0x21DA
    1f24:	a0 81       	ld	r26, Z
    1f26:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1f28:	14 96       	adiw	r26, 0x04	; 4
    1f2a:	8c 91       	ld	r24, X
    1f2c:	c8 17       	cp	r28, r24
    1f2e:	18 f3       	brcs	.-58     	; 0x1ef6 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1f30:	cf 91       	pop	r28
    1f32:	08 95       	ret

00001f34 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1f34:	ff 92       	push	r15
    1f36:	0f 93       	push	r16
    1f38:	1f 93       	push	r17
    1f3a:	cf 93       	push	r28
    1f3c:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1f3e:	10 92 a0 23 	sts	0x23A0, r1
    1f42:	10 92 a1 23 	sts	0x23A1, r1
	udd_g_ctrlreq.callback = NULL;
    1f46:	10 92 a2 23 	sts	0x23A2, r1
    1f4a:	10 92 a3 23 	sts	0x23A3, r1
	udd_g_ctrlreq.over_under_run = NULL;
    1f4e:	10 92 a4 23 	sts	0x23A4, r1
    1f52:	10 92 a5 23 	sts	0x23A5, r1

	if (Udd_setup_is_in()) {
    1f56:	20 91 96 23 	lds	r18, 0x2396
    1f5a:	22 23       	and	r18, r18
    1f5c:	0c f0       	brlt	.+2      	; 0x1f60 <udc_process_setup+0x2c>
    1f5e:	59 c2       	rjmp	.+1202   	; 0x2412 <udc_process_setup+0x4de>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1f60:	80 91 9c 23 	lds	r24, 0x239C
    1f64:	90 91 9d 23 	lds	r25, 0x239D
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <udc_process_setup+0x3a>
    1f6c:	57 c2       	rjmp	.+1198   	; 0x241c <udc_process_setup+0x4e8>
    1f6e:	49 c2       	rjmp	.+1170   	; 0x2402 <udc_process_setup+0x4ce>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1f70:	2f 71       	andi	r18, 0x1F	; 31
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <udc_process_setup+0x42>
    1f74:	7c c0       	rjmp	.+248    	; 0x206e <udc_process_setup+0x13a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1f76:	30 91 97 23 	lds	r19, 0x2397
    1f7a:	36 30       	cpi	r19, 0x06	; 6
    1f7c:	89 f0       	breq	.+34     	; 0x1fa0 <udc_process_setup+0x6c>
    1f7e:	38 30       	cpi	r19, 0x08	; 8
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <udc_process_setup+0x50>
    1f82:	69 c0       	rjmp	.+210    	; 0x2056 <udc_process_setup+0x122>
    1f84:	31 11       	cpse	r19, r1
    1f86:	73 c0       	rjmp	.+230    	; 0x206e <udc_process_setup+0x13a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1f88:	02 97       	sbiw	r24, 0x02	; 2
    1f8a:	41 f4       	brne	.+16     	; 0x1f9c <udc_process_setup+0x68>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1f8c:	62 e0       	ldi	r22, 0x02	; 2
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	8b ed       	ldi	r24, 0xDB	; 219
    1f92:	91 e2       	ldi	r25, 0x21	; 33
    1f94:	0e 94 15 1c 	call	0x382a	; 0x382a <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	bc c1       	rjmp	.+888    	; 0x2314 <udc_process_setup+0x3e0>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	ba c1       	rjmp	.+884    	; 0x2314 <udc_process_setup+0x3e0>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1fa0:	20 91 98 23 	lds	r18, 0x2398
    1fa4:	30 91 99 23 	lds	r19, 0x2399
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1fa8:	83 2f       	mov	r24, r19
    1faa:	99 27       	eor	r25, r25
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1fac:	82 30       	cpi	r24, 0x02	; 2
    1fae:	91 05       	cpc	r25, r1
    1fb0:	81 f0       	breq	.+32     	; 0x1fd2 <udc_process_setup+0x9e>
    1fb2:	83 30       	cpi	r24, 0x03	; 3
    1fb4:	91 05       	cpc	r25, r1
    1fb6:	71 f1       	breq	.+92     	; 0x2014 <udc_process_setup+0xe0>
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	09 f0       	breq	.+2      	; 0x1fbe <udc_process_setup+0x8a>
    1fbc:	44 c0       	rjmp	.+136    	; 0x2046 <udc_process_setup+0x112>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1fbe:	80 91 2b 20 	lds	r24, 0x202B
    1fc2:	90 91 2c 20 	lds	r25, 0x202C
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	6c 91       	ld	r22, X
    1fca:	70 e0       	ldi	r23, 0x00	; 0
    1fcc:	0e 94 15 1c 	call	0x382a	; 0x382a <udd_set_setup_payload>
    1fd0:	29 c0       	rjmp	.+82     	; 0x2024 <udc_process_setup+0xf0>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1fd2:	e0 91 2b 20 	lds	r30, 0x202B
    1fd6:	f0 91 2c 20 	lds	r31, 0x202C
    1fda:	81 89       	ldd	r24, Z+17	; 0x11
    1fdc:	28 17       	cp	r18, r24
    1fde:	a8 f5       	brcc	.+106    	; 0x204a <udc_process_setup+0x116>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1fe0:	c9 01       	movw	r24, r18
    1fe2:	99 27       	eor	r25, r25
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	e0 91 2d 20 	lds	r30, 0x202D
    1ff0:	f0 91 2e 20 	lds	r31, 0x202E
    1ff4:	e8 0f       	add	r30, r24
    1ff6:	f9 1f       	adc	r31, r25
    1ff8:	80 81       	ld	r24, Z
    1ffa:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	62 81       	ldd	r22, Z+2	; 0x02
    2000:	73 81       	ldd	r23, Z+3	; 0x03
    2002:	0e 94 15 1c 	call	0x382a	; 0x382a <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    2006:	e0 91 9e 23 	lds	r30, 0x239E
    200a:	f0 91 9f 23 	lds	r31, 0x239F
    200e:	82 e0       	ldi	r24, 0x02	; 2
    2010:	81 83       	std	Z+1, r24	; 0x01
    2012:	08 c0       	rjmp	.+16     	; 0x2024 <udc_process_setup+0xf0>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    2014:	21 11       	cpse	r18, r1
    2016:	1b c0       	rjmp	.+54     	; 0x204e <udc_process_setup+0x11a>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    2018:	64 e0       	ldi	r22, 0x04	; 4
    201a:	70 e0       	ldi	r23, 0x00	; 0
    201c:	8e e8       	ldi	r24, 0x8E	; 142
    201e:	90 e2       	ldi	r25, 0x20	; 32
    2020:	0e 94 15 1c 	call	0x382a	; 0x382a <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    2024:	80 91 9c 23 	lds	r24, 0x239C
    2028:	90 91 9d 23 	lds	r25, 0x239D
    202c:	20 91 a0 23 	lds	r18, 0x23A0
    2030:	30 91 a1 23 	lds	r19, 0x23A1
    2034:	82 17       	cp	r24, r18
    2036:	93 07       	cpc	r25, r19
    2038:	60 f4       	brcc	.+24     	; 0x2052 <udc_process_setup+0x11e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    203a:	80 93 a0 23 	sts	0x23A0, r24
    203e:	90 93 a1 23 	sts	0x23A1, r25
	}
	return true;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	67 c1       	rjmp	.+718    	; 0x2314 <udc_process_setup+0x3e0>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	65 c1       	rjmp	.+714    	; 0x2314 <udc_process_setup+0x3e0>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	63 c1       	rjmp	.+710    	; 0x2314 <udc_process_setup+0x3e0>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	61 c1       	rjmp	.+706    	; 0x2314 <udc_process_setup+0x3e0>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	5f c1       	rjmp	.+702    	; 0x2314 <udc_process_setup+0x3e0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	41 f4       	brne	.+16     	; 0x206a <udc_process_setup+0x136>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    205a:	61 e0       	ldi	r22, 0x01	; 1
    205c:	70 e0       	ldi	r23, 0x00	; 0
    205e:	88 ed       	ldi	r24, 0xD8	; 216
    2060:	91 e2       	ldi	r25, 0x21	; 33
    2062:	0e 94 15 1c 	call	0x382a	; 0x382a <udd_set_setup_payload>
	return true;
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	55 c1       	rjmp	.+682    	; 0x2314 <udc_process_setup+0x3e0>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	53 c1       	rjmp	.+678    	; 0x2314 <udc_process_setup+0x3e0>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    206e:	21 30       	cpi	r18, 0x01	; 1
    2070:	09 f0       	breq	.+2      	; 0x2074 <udc_process_setup+0x140>
    2072:	41 c0       	rjmp	.+130    	; 0x20f6 <udc_process_setup+0x1c2>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    2074:	30 91 97 23 	lds	r19, 0x2397
    2078:	3a 30       	cpi	r19, 0x0A	; 10
    207a:	e9 f5       	brne	.+122    	; 0x20f6 <udc_process_setup+0x1c2>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	99 f5       	brne	.+102    	; 0x20e6 <udc_process_setup+0x1b2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    2080:	80 91 d8 21 	lds	r24, 0x21D8
    2084:	88 23       	and	r24, r24
    2086:	89 f1       	breq	.+98     	; 0x20ea <udc_process_setup+0x1b6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2088:	c0 91 9a 23 	lds	r28, 0x239A
    208c:	d0 91 9b 23 	lds	r29, 0x239B
    2090:	8c 2f       	mov	r24, r28
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2092:	00 91 d9 21 	lds	r16, 0x21D9
    2096:	10 91 da 21 	lds	r17, 0x21DA
    209a:	d8 01       	movw	r26, r16
    209c:	ed 91       	ld	r30, X+
    209e:	fc 91       	ld	r31, X
    20a0:	94 81       	ldd	r25, Z+4	; 0x04
    20a2:	c9 17       	cp	r28, r25
    20a4:	20 f5       	brcc	.+72     	; 0x20ee <udc_process_setup+0x1ba>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	32 de       	rcall	.-924    	; 0x1d0e <udc_update_iface_desc>
    20aa:	88 23       	and	r24, r24
    20ac:	11 f1       	breq	.+68     	; 0x20f2 <udc_process_setup+0x1be>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    20ae:	ce 01       	movw	r24, r28
    20b0:	99 27       	eor	r25, r25
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	d8 01       	movw	r26, r16
    20b8:	12 96       	adiw	r26, 0x02	; 2
    20ba:	ed 91       	ld	r30, X+
    20bc:	fc 91       	ld	r31, X
    20be:	13 97       	sbiw	r26, 0x03	; 3
    20c0:	e8 0f       	add	r30, r24
    20c2:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    20c4:	01 90       	ld	r0, Z+
    20c6:	f0 81       	ld	r31, Z
    20c8:	e0 2d       	mov	r30, r0
    20ca:	86 81       	ldd	r24, Z+6	; 0x06
    20cc:	97 81       	ldd	r25, Z+7	; 0x07
    20ce:	fc 01       	movw	r30, r24
    20d0:	09 95       	icall
    20d2:	80 93 dd 21 	sts	0x21DD, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    20d6:	61 e0       	ldi	r22, 0x01	; 1
    20d8:	70 e0       	ldi	r23, 0x00	; 0
    20da:	8d ed       	ldi	r24, 0xDD	; 221
    20dc:	91 e2       	ldi	r25, 0x21	; 33
    20de:	0e 94 15 1c 	call	0x382a	; 0x382a <udd_set_setup_payload>
	return true;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	17 c1       	rjmp	.+558    	; 0x2314 <udc_process_setup+0x3e0>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	15 c1       	rjmp	.+554    	; 0x2314 <udc_process_setup+0x3e0>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	13 c1       	rjmp	.+550    	; 0x2314 <udc_process_setup+0x3e0>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	11 c1       	rjmp	.+546    	; 0x2314 <udc_process_setup+0x3e0>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	0f c1       	rjmp	.+542    	; 0x2314 <udc_process_setup+0x3e0>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    20f6:	22 30       	cpi	r18, 0x02	; 2
    20f8:	09 f0       	breq	.+2      	; 0x20fc <udc_process_setup+0x1c8>
    20fa:	0e c1       	rjmp	.+540    	; 0x2318 <udc_process_setup+0x3e4>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    20fc:	20 91 97 23 	lds	r18, 0x2397
    2100:	21 11       	cpse	r18, r1
    2102:	03 c1       	rjmp	.+518    	; 0x230a <udc_process_setup+0x3d6>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    2104:	02 97       	sbiw	r24, 0x02	; 2
    2106:	81 f4       	brne	.+32     	; 0x2128 <udc_process_setup+0x1f4>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    2108:	80 91 9a 23 	lds	r24, 0x239A
    210c:	0e 94 47 1c 	call	0x388e	; 0x388e <udd_ep_is_halted>
    2110:	80 93 de 21 	sts	0x21DE, r24
    2114:	10 92 df 21 	sts	0x21DF, r1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    2118:	62 e0       	ldi	r22, 0x02	; 2
    211a:	70 e0       	ldi	r23, 0x00	; 0
    211c:	8e ed       	ldi	r24, 0xDE	; 222
    211e:	91 e2       	ldi	r25, 0x21	; 33
    2120:	0e 94 15 1c 	call	0x382a	; 0x382a <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	f6 c0       	rjmp	.+492    	; 0x2314 <udc_process_setup+0x3e0>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	f4 c0       	rjmp	.+488    	; 0x2314 <udc_process_setup+0x3e0>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    212c:	2f 71       	andi	r18, 0x1F	; 31
    212e:	09 f0       	breq	.+2      	; 0x2132 <udc_process_setup+0x1fe>
    2130:	93 c0       	rjmp	.+294    	; 0x2258 <udc_process_setup+0x324>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    2132:	80 91 97 23 	lds	r24, 0x2397
    2136:	83 30       	cpi	r24, 0x03	; 3
    2138:	09 f4       	brne	.+2      	; 0x213c <udc_process_setup+0x208>
    213a:	e9 c0       	rjmp	.+466    	; 0x230e <udc_process_setup+0x3da>
    213c:	20 f4       	brcc	.+8      	; 0x2146 <udc_process_setup+0x212>
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	09 f0       	breq	.+2      	; 0x2144 <udc_process_setup+0x210>
    2142:	8a c0       	rjmp	.+276    	; 0x2258 <udc_process_setup+0x324>
    2144:	16 c0       	rjmp	.+44     	; 0x2172 <udc_process_setup+0x23e>
    2146:	85 30       	cpi	r24, 0x05	; 5
    2148:	21 f0       	breq	.+8      	; 0x2152 <udc_process_setup+0x21e>
    214a:	89 30       	cpi	r24, 0x09	; 9
    214c:	09 f0       	breq	.+2      	; 0x2150 <udc_process_setup+0x21c>
    214e:	84 c0       	rjmp	.+264    	; 0x2258 <udc_process_setup+0x324>
    2150:	2b c0       	rjmp	.+86     	; 0x21a8 <udc_process_setup+0x274>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    2152:	80 91 9c 23 	lds	r24, 0x239C
    2156:	90 91 9d 23 	lds	r25, 0x239D
    215a:	89 2b       	or	r24, r25
    215c:	41 f4       	brne	.+16     	; 0x216e <udc_process_setup+0x23a>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    215e:	88 ec       	ldi	r24, 0xC8	; 200
    2160:	9e e0       	ldi	r25, 0x0E	; 14
    2162:	80 93 a2 23 	sts	0x23A2, r24
    2166:	90 93 a3 23 	sts	0x23A3, r25
	return true;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	d3 c0       	rjmp	.+422    	; 0x2314 <udc_process_setup+0x3e0>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	d1 c0       	rjmp	.+418    	; 0x2314 <udc_process_setup+0x3e0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    2172:	80 91 9c 23 	lds	r24, 0x239C
    2176:	90 91 9d 23 	lds	r25, 0x239D
    217a:	89 2b       	or	r24, r25
    217c:	89 f4       	brne	.+34     	; 0x21a0 <udc_process_setup+0x26c>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    217e:	80 91 98 23 	lds	r24, 0x2398
    2182:	90 91 99 23 	lds	r25, 0x2399
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	69 f4       	brne	.+26     	; 0x21a4 <udc_process_setup+0x270>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    218a:	80 91 db 21 	lds	r24, 0x21DB
    218e:	90 91 dc 21 	lds	r25, 0x21DC
    2192:	8d 7f       	andi	r24, 0xFD	; 253
    2194:	80 93 db 21 	sts	0x21DB, r24
    2198:	90 93 dc 21 	sts	0x21DC, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	ba c0       	rjmp	.+372    	; 0x2314 <udc_process_setup+0x3e0>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	b8 c0       	rjmp	.+368    	; 0x2314 <udc_process_setup+0x3e0>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	b6 c0       	rjmp	.+364    	; 0x2314 <udc_process_setup+0x3e0>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    21a8:	80 91 9c 23 	lds	r24, 0x239C
    21ac:	90 91 9d 23 	lds	r25, 0x239D
    21b0:	89 2b       	or	r24, r25
    21b2:	09 f0       	breq	.+2      	; 0x21b6 <udc_process_setup+0x282>
    21b4:	45 c0       	rjmp	.+138    	; 0x2240 <udc_process_setup+0x30c>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    21b6:	0e 94 08 1c 	call	0x3810	; 0x3810 <udd_getaddress>
    21ba:	88 23       	and	r24, r24
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <udc_process_setup+0x28c>
    21be:	42 c0       	rjmp	.+132    	; 0x2244 <udc_process_setup+0x310>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    21c0:	20 91 98 23 	lds	r18, 0x2398
    21c4:	30 91 99 23 	lds	r19, 0x2399
    21c8:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    21ca:	e0 91 2b 20 	lds	r30, 0x202B
    21ce:	f0 91 2c 20 	lds	r31, 0x202C
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    21d2:	81 89       	ldd	r24, Z+17	; 0x11
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	82 17       	cp	r24, r18
    21d8:	93 07       	cpc	r25, r19
    21da:	b0 f1       	brcs	.+108    	; 0x2248 <udc_process_setup+0x314>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    21dc:	55 de       	rcall	.-854    	; 0x1e88 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    21de:	80 91 98 23 	lds	r24, 0x2398
    21e2:	90 91 99 23 	lds	r25, 0x2399
    21e6:	80 93 d8 21 	sts	0x21D8, r24
	if (udc_num_configuration == 0) {
    21ea:	88 23       	and	r24, r24
    21ec:	79 f1       	breq	.+94     	; 0x224c <udc_process_setup+0x318>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    21ee:	99 27       	eor	r25, r25
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	e0 91 2d 20 	lds	r30, 0x202D
    21fe:	f0 91 2e 20 	lds	r31, 0x202E
    2202:	e8 0f       	add	r30, r24
    2204:	f9 1f       	adc	r31, r25
    2206:	e0 93 d9 21 	sts	0x21D9, r30
    220a:	f0 93 da 21 	sts	0x21DA, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    220e:	01 90       	ld	r0, Z+
    2210:	f0 81       	ld	r31, Z
    2212:	e0 2d       	mov	r30, r0
    2214:	84 81       	ldd	r24, Z+4	; 0x04
    2216:	88 23       	and	r24, r24
    2218:	d9 f0       	breq	.+54     	; 0x2250 <udc_process_setup+0x31c>
    221a:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	8c 2f       	mov	r24, r28
    2220:	bc dd       	rcall	.-1160   	; 0x1d9a <udc_iface_enable>
    2222:	88 23       	and	r24, r24
    2224:	b9 f0       	breq	.+46     	; 0x2254 <udc_process_setup+0x320>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    2226:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2228:	e0 91 d9 21 	lds	r30, 0x21D9
    222c:	f0 91 da 21 	lds	r31, 0x21DA
    2230:	01 90       	ld	r0, Z+
    2232:	f0 81       	ld	r31, Z
    2234:	e0 2d       	mov	r30, r0
    2236:	84 81       	ldd	r24, Z+4	; 0x04
    2238:	c8 17       	cp	r28, r24
    223a:	80 f3       	brcs	.-32     	; 0x221c <udc_process_setup+0x2e8>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	6a c0       	rjmp	.+212    	; 0x2314 <udc_process_setup+0x3e0>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	68 c0       	rjmp	.+208    	; 0x2314 <udc_process_setup+0x3e0>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	66 c0       	rjmp	.+204    	; 0x2314 <udc_process_setup+0x3e0>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	64 c0       	rjmp	.+200    	; 0x2314 <udc_process_setup+0x3e0>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	62 c0       	rjmp	.+196    	; 0x2314 <udc_process_setup+0x3e0>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	60 c0       	rjmp	.+192    	; 0x2314 <udc_process_setup+0x3e0>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	5e c0       	rjmp	.+188    	; 0x2314 <udc_process_setup+0x3e0>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2258:	21 30       	cpi	r18, 0x01	; 1
    225a:	01 f5       	brne	.+64     	; 0x229c <udc_process_setup+0x368>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    225c:	80 91 97 23 	lds	r24, 0x2397
    2260:	8b 30       	cpi	r24, 0x0B	; 11
    2262:	e1 f4       	brne	.+56     	; 0x229c <udc_process_setup+0x368>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    2264:	80 91 9c 23 	lds	r24, 0x239C
    2268:	90 91 9d 23 	lds	r25, 0x239D
    226c:	89 2b       	or	r24, r25
    226e:	81 f4       	brne	.+32     	; 0x2290 <udc_process_setup+0x35c>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    2270:	80 91 d8 21 	lds	r24, 0x21D8
    2274:	88 23       	and	r24, r24
    2276:	71 f0       	breq	.+28     	; 0x2294 <udc_process_setup+0x360>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2278:	c0 91 9a 23 	lds	r28, 0x239A
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    227c:	d0 91 98 23 	lds	r29, 0x2398

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    2280:	8c 2f       	mov	r24, r28
    2282:	c0 dd       	rcall	.-1152   	; 0x1e04 <udc_iface_disable>
    2284:	88 23       	and	r24, r24
    2286:	41 f0       	breq	.+16     	; 0x2298 <udc_process_setup+0x364>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    2288:	6d 2f       	mov	r22, r29
    228a:	8c 2f       	mov	r24, r28
    228c:	86 dd       	rcall	.-1268   	; 0x1d9a <udc_iface_enable>
    228e:	42 c0       	rjmp	.+132    	; 0x2314 <udc_process_setup+0x3e0>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	40 c0       	rjmp	.+128    	; 0x2314 <udc_process_setup+0x3e0>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	3e c0       	rjmp	.+124    	; 0x2314 <udc_process_setup+0x3e0>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	3c c0       	rjmp	.+120    	; 0x2314 <udc_process_setup+0x3e0>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    229c:	22 30       	cpi	r18, 0x02	; 2
    229e:	e1 f5       	brne	.+120    	; 0x2318 <udc_process_setup+0x3e4>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    22a0:	80 91 97 23 	lds	r24, 0x2397
    22a4:	81 30       	cpi	r24, 0x01	; 1
    22a6:	19 f0       	breq	.+6      	; 0x22ae <udc_process_setup+0x37a>
    22a8:	83 30       	cpi	r24, 0x03	; 3
    22aa:	99 f5       	brne	.+102    	; 0x2312 <udc_process_setup+0x3de>
    22ac:	15 c0       	rjmp	.+42     	; 0x22d8 <udc_process_setup+0x3a4>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    22ae:	80 91 9c 23 	lds	r24, 0x239C
    22b2:	90 91 9d 23 	lds	r25, 0x239D
    22b6:	89 2b       	or	r24, r25
    22b8:	59 f4       	brne	.+22     	; 0x22d0 <udc_process_setup+0x39c>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    22ba:	80 91 98 23 	lds	r24, 0x2398
    22be:	90 91 99 23 	lds	r25, 0x2399
    22c2:	89 2b       	or	r24, r25
    22c4:	39 f4       	brne	.+14     	; 0x22d4 <udc_process_setup+0x3a0>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    22c6:	80 91 9a 23 	lds	r24, 0x239A
    22ca:	0e 94 4e 1c 	call	0x389c	; 0x389c <udd_ep_clear_halt>
    22ce:	22 c0       	rjmp	.+68     	; 0x2314 <udc_process_setup+0x3e0>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	20 c0       	rjmp	.+64     	; 0x2314 <udc_process_setup+0x3e0>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	1e c0       	rjmp	.+60     	; 0x2314 <udc_process_setup+0x3e0>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    22d8:	80 91 9c 23 	lds	r24, 0x239C
    22dc:	90 91 9d 23 	lds	r25, 0x239D
    22e0:	89 2b       	or	r24, r25
    22e2:	79 f4       	brne	.+30     	; 0x2302 <udc_process_setup+0x3ce>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    22e4:	80 91 98 23 	lds	r24, 0x2398
    22e8:	90 91 99 23 	lds	r25, 0x2399
    22ec:	89 2b       	or	r24, r25
    22ee:	59 f4       	brne	.+22     	; 0x2306 <udc_process_setup+0x3d2>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    22f0:	ca e9       	ldi	r28, 0x9A	; 154
    22f2:	d3 e2       	ldi	r29, 0x23	; 35
    22f4:	88 81       	ld	r24, Y
    22f6:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    22fa:	88 81       	ld	r24, Y
    22fc:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <udd_ep_set_halt>
    2300:	09 c0       	rjmp	.+18     	; 0x2314 <udc_process_setup+0x3e0>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	07 c0       	rjmp	.+14     	; 0x2314 <udc_process_setup+0x3e0>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	05 c0       	rjmp	.+10     	; 0x2314 <udc_process_setup+0x3e0>
				break;
			}
		}
#endif
	}
	return false;
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	03 c0       	rjmp	.+6      	; 0x2314 <udc_process_setup+0x3e0>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	01 c0       	rjmp	.+2      	; 0x2314 <udc_process_setup+0x3e0>
				break;
			}
		}
#endif
	}
	return false;
    2312:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    2314:	81 11       	cpse	r24, r1
    2316:	77 c0       	rjmp	.+238    	; 0x2406 <udc_process_setup+0x4d2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    2318:	80 91 96 23 	lds	r24, 0x2396
    231c:	8f 71       	andi	r24, 0x1F	; 31
    231e:	81 30       	cpi	r24, 0x01	; 1
    2320:	71 f5       	brne	.+92     	; 0x237e <udc_process_setup+0x44a>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    2322:	80 91 d8 21 	lds	r24, 0x21D8
    2326:	88 23       	and	r24, r24
    2328:	51 f1       	breq	.+84     	; 0x237e <udc_process_setup+0x44a>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    232a:	00 91 9a 23 	lds	r16, 0x239A
    232e:	10 91 9b 23 	lds	r17, 0x239B
    2332:	f0 2e       	mov	r15, r16
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2334:	c0 91 d9 21 	lds	r28, 0x21D9
    2338:	d0 91 da 21 	lds	r29, 0x21DA
    233c:	e8 81       	ld	r30, Y
    233e:	f9 81       	ldd	r31, Y+1	; 0x01
    2340:	84 81       	ldd	r24, Z+4	; 0x04
    2342:	08 17       	cp	r16, r24
    2344:	e0 f4       	brcc	.+56     	; 0x237e <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	80 2f       	mov	r24, r16
    234a:	e1 dc       	rcall	.-1598   	; 0x1d0e <udc_update_iface_desc>
    234c:	88 23       	and	r24, r24
    234e:	b9 f0       	breq	.+46     	; 0x237e <udc_process_setup+0x44a>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2350:	11 27       	eor	r17, r17
    2352:	98 01       	movw	r18, r16
    2354:	22 0f       	add	r18, r18
    2356:	33 1f       	adc	r19, r19
    2358:	ea 81       	ldd	r30, Y+2	; 0x02
    235a:	fb 81       	ldd	r31, Y+3	; 0x03
    235c:	e2 0f       	add	r30, r18
    235e:	f3 1f       	adc	r31, r19
    2360:	c0 81       	ld	r28, Z
    2362:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2364:	ee 81       	ldd	r30, Y+6	; 0x06
    2366:	ff 81       	ldd	r31, Y+7	; 0x07
    2368:	09 95       	icall
    236a:	68 2f       	mov	r22, r24
    236c:	8f 2d       	mov	r24, r15
    236e:	cf dc       	rcall	.-1634   	; 0x1d0e <udc_update_iface_desc>
    2370:	88 23       	and	r24, r24
    2372:	29 f0       	breq	.+10     	; 0x237e <udc_process_setup+0x44a>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    2374:	ec 81       	ldd	r30, Y+4	; 0x04
    2376:	fd 81       	ldd	r31, Y+5	; 0x05
    2378:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    237a:	81 11       	cpse	r24, r1
    237c:	46 c0       	rjmp	.+140    	; 0x240a <udc_process_setup+0x4d6>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    237e:	80 91 96 23 	lds	r24, 0x2396
    2382:	8f 71       	andi	r24, 0x1F	; 31
    2384:	82 30       	cpi	r24, 0x02	; 2
    2386:	09 f0       	breq	.+2      	; 0x238a <udc_process_setup+0x456>
    2388:	42 c0       	rjmp	.+132    	; 0x240e <udc_process_setup+0x4da>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    238a:	80 91 d8 21 	lds	r24, 0x21D8
    238e:	88 23       	and	r24, r24
    2390:	81 f1       	breq	.+96     	; 0x23f2 <udc_process_setup+0x4be>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2392:	e0 91 d9 21 	lds	r30, 0x21D9
    2396:	f0 91 da 21 	lds	r31, 0x21DA
    239a:	a0 81       	ld	r26, Z
    239c:	b1 81       	ldd	r27, Z+1	; 0x01
    239e:	14 96       	adiw	r26, 0x04	; 4
    23a0:	8c 91       	ld	r24, X
    23a2:	88 23       	and	r24, r24
    23a4:	41 f1       	breq	.+80     	; 0x23f6 <udc_process_setup+0x4c2>
    23a6:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    23a8:	21 2f       	mov	r18, r17
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	22 0f       	add	r18, r18
    23ae:	33 1f       	adc	r19, r19
    23b0:	02 80       	ldd	r0, Z+2	; 0x02
    23b2:	f3 81       	ldd	r31, Z+3	; 0x03
    23b4:	e0 2d       	mov	r30, r0
    23b6:	e2 0f       	add	r30, r18
    23b8:	f3 1f       	adc	r31, r19
    23ba:	c0 81       	ld	r28, Z
    23bc:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    23be:	ee 81       	ldd	r30, Y+6	; 0x06
    23c0:	ff 81       	ldd	r31, Y+7	; 0x07
    23c2:	09 95       	icall
    23c4:	68 2f       	mov	r22, r24
    23c6:	81 2f       	mov	r24, r17
    23c8:	a2 dc       	rcall	.-1724   	; 0x1d0e <udc_update_iface_desc>
    23ca:	88 23       	and	r24, r24
    23cc:	b1 f0       	breq	.+44     	; 0x23fa <udc_process_setup+0x4c6>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    23ce:	ec 81       	ldd	r30, Y+4	; 0x04
    23d0:	fd 81       	ldd	r31, Y+5	; 0x05
    23d2:	09 95       	icall
    23d4:	81 11       	cpse	r24, r1
    23d6:	13 c0       	rjmp	.+38     	; 0x23fe <udc_process_setup+0x4ca>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    23d8:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    23da:	e0 91 d9 21 	lds	r30, 0x21D9
    23de:	f0 91 da 21 	lds	r31, 0x21DA
    23e2:	a0 81       	ld	r26, Z
    23e4:	b1 81       	ldd	r27, Z+1	; 0x01
    23e6:	14 96       	adiw	r26, 0x04	; 4
    23e8:	8c 91       	ld	r24, X
    23ea:	18 17       	cp	r17, r24
    23ec:	e8 f2       	brcs	.-70     	; 0x23a8 <udc_process_setup+0x474>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	1a c0       	rjmp	.+52     	; 0x2426 <udc_process_setup+0x4f2>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	18 c0       	rjmp	.+48     	; 0x2426 <udc_process_setup+0x4f2>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	16 c0       	rjmp	.+44     	; 0x2426 <udc_process_setup+0x4f2>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	14 c0       	rjmp	.+40     	; 0x2426 <udc_process_setup+0x4f2>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	12 c0       	rjmp	.+36     	; 0x2426 <udc_process_setup+0x4f2>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	10 c0       	rjmp	.+32     	; 0x2426 <udc_process_setup+0x4f2>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	0e c0       	rjmp	.+28     	; 0x2426 <udc_process_setup+0x4f2>
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
			return true;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	0c c0       	rjmp	.+24     	; 0x2426 <udc_process_setup+0x4f2>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	0a c0       	rjmp	.+20     	; 0x2426 <udc_process_setup+0x4f2>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    2412:	82 2f       	mov	r24, r18
    2414:	80 76       	andi	r24, 0x60	; 96
    2416:	09 f0       	breq	.+2      	; 0x241a <udc_process_setup+0x4e6>
    2418:	7f cf       	rjmp	.-258    	; 0x2318 <udc_process_setup+0x3e4>
    241a:	88 ce       	rjmp	.-752    	; 0x212c <udc_process_setup+0x1f8>
    241c:	32 2f       	mov	r19, r18
    241e:	30 76       	andi	r19, 0x60	; 96
    2420:	09 f0       	breq	.+2      	; 0x2424 <udc_process_setup+0x4f0>
    2422:	7a cf       	rjmp	.-268    	; 0x2318 <udc_process_setup+0x3e4>
    2424:	a5 cd       	rjmp	.-1206   	; 0x1f70 <udc_process_setup+0x3c>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	1f 91       	pop	r17
    242c:	0f 91       	pop	r16
    242e:	ff 90       	pop	r15
    2430:	08 95       	ret

00002432 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2432:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2434:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2436:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2438:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    243a:	60 83       	st	Z, r22
	ret                             // Return to caller
    243c:	08 95       	ret

0000243e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    243e:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    2442:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2444:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2446:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    244a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    244c:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2450:	08 95       	ret

00002452 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    2452:	1f 92       	push	r1
    2454:	0f 92       	push	r0
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	0f 92       	push	r0
    245a:	11 24       	eor	r1, r1
    245c:	2f 93       	push	r18
    245e:	3f 93       	push	r19
    2460:	4f 93       	push	r20
    2462:	5f 93       	push	r21
    2464:	6f 93       	push	r22
    2466:	7f 93       	push	r23
    2468:	8f 93       	push	r24
    246a:	9f 93       	push	r25
    246c:	af 93       	push	r26
    246e:	bf 93       	push	r27
    2470:	ef 93       	push	r30
    2472:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    2474:	e0 91 e0 21 	lds	r30, 0x21E0
    2478:	f0 91 e1 21 	lds	r31, 0x21E1
    247c:	30 97       	sbiw	r30, 0x00	; 0
    247e:	09 f0       	breq	.+2      	; 0x2482 <__vector_14+0x30>
		tc_tcc0_ovf_callback();
    2480:	09 95       	icall
	}
}
    2482:	ff 91       	pop	r31
    2484:	ef 91       	pop	r30
    2486:	bf 91       	pop	r27
    2488:	af 91       	pop	r26
    248a:	9f 91       	pop	r25
    248c:	8f 91       	pop	r24
    248e:	7f 91       	pop	r23
    2490:	6f 91       	pop	r22
    2492:	5f 91       	pop	r21
    2494:	4f 91       	pop	r20
    2496:	3f 91       	pop	r19
    2498:	2f 91       	pop	r18
    249a:	0f 90       	pop	r0
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	0f 90       	pop	r0
    24a0:	1f 90       	pop	r1
    24a2:	18 95       	reti

000024a4 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    24a4:	1f 92       	push	r1
    24a6:	0f 92       	push	r0
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	0f 92       	push	r0
    24ac:	11 24       	eor	r1, r1
    24ae:	2f 93       	push	r18
    24b0:	3f 93       	push	r19
    24b2:	4f 93       	push	r20
    24b4:	5f 93       	push	r21
    24b6:	6f 93       	push	r22
    24b8:	7f 93       	push	r23
    24ba:	8f 93       	push	r24
    24bc:	9f 93       	push	r25
    24be:	af 93       	push	r26
    24c0:	bf 93       	push	r27
    24c2:	ef 93       	push	r30
    24c4:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    24c6:	e0 91 e2 21 	lds	r30, 0x21E2
    24ca:	f0 91 e3 21 	lds	r31, 0x21E3
    24ce:	30 97       	sbiw	r30, 0x00	; 0
    24d0:	09 f0       	breq	.+2      	; 0x24d4 <__vector_15+0x30>
		tc_tcc0_err_callback();
    24d2:	09 95       	icall
	}
}
    24d4:	ff 91       	pop	r31
    24d6:	ef 91       	pop	r30
    24d8:	bf 91       	pop	r27
    24da:	af 91       	pop	r26
    24dc:	9f 91       	pop	r25
    24de:	8f 91       	pop	r24
    24e0:	7f 91       	pop	r23
    24e2:	6f 91       	pop	r22
    24e4:	5f 91       	pop	r21
    24e6:	4f 91       	pop	r20
    24e8:	3f 91       	pop	r19
    24ea:	2f 91       	pop	r18
    24ec:	0f 90       	pop	r0
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	0f 90       	pop	r0
    24f2:	1f 90       	pop	r1
    24f4:	18 95       	reti

000024f6 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    24f6:	1f 92       	push	r1
    24f8:	0f 92       	push	r0
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	0f 92       	push	r0
    24fe:	11 24       	eor	r1, r1
    2500:	2f 93       	push	r18
    2502:	3f 93       	push	r19
    2504:	4f 93       	push	r20
    2506:	5f 93       	push	r21
    2508:	6f 93       	push	r22
    250a:	7f 93       	push	r23
    250c:	8f 93       	push	r24
    250e:	9f 93       	push	r25
    2510:	af 93       	push	r26
    2512:	bf 93       	push	r27
    2514:	ef 93       	push	r30
    2516:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    2518:	e0 91 e4 21 	lds	r30, 0x21E4
    251c:	f0 91 e5 21 	lds	r31, 0x21E5
    2520:	30 97       	sbiw	r30, 0x00	; 0
    2522:	09 f0       	breq	.+2      	; 0x2526 <__vector_16+0x30>
		tc_tcc0_cca_callback();
    2524:	09 95       	icall
	}
}
    2526:	ff 91       	pop	r31
    2528:	ef 91       	pop	r30
    252a:	bf 91       	pop	r27
    252c:	af 91       	pop	r26
    252e:	9f 91       	pop	r25
    2530:	8f 91       	pop	r24
    2532:	7f 91       	pop	r23
    2534:	6f 91       	pop	r22
    2536:	5f 91       	pop	r21
    2538:	4f 91       	pop	r20
    253a:	3f 91       	pop	r19
    253c:	2f 91       	pop	r18
    253e:	0f 90       	pop	r0
    2540:	0f be       	out	0x3f, r0	; 63
    2542:	0f 90       	pop	r0
    2544:	1f 90       	pop	r1
    2546:	18 95       	reti

00002548 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    2548:	1f 92       	push	r1
    254a:	0f 92       	push	r0
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	0f 92       	push	r0
    2550:	11 24       	eor	r1, r1
    2552:	2f 93       	push	r18
    2554:	3f 93       	push	r19
    2556:	4f 93       	push	r20
    2558:	5f 93       	push	r21
    255a:	6f 93       	push	r22
    255c:	7f 93       	push	r23
    255e:	8f 93       	push	r24
    2560:	9f 93       	push	r25
    2562:	af 93       	push	r26
    2564:	bf 93       	push	r27
    2566:	ef 93       	push	r30
    2568:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    256a:	e0 91 e6 21 	lds	r30, 0x21E6
    256e:	f0 91 e7 21 	lds	r31, 0x21E7
    2572:	30 97       	sbiw	r30, 0x00	; 0
    2574:	09 f0       	breq	.+2      	; 0x2578 <__vector_17+0x30>
		tc_tcc0_ccb_callback();
    2576:	09 95       	icall
	}
}
    2578:	ff 91       	pop	r31
    257a:	ef 91       	pop	r30
    257c:	bf 91       	pop	r27
    257e:	af 91       	pop	r26
    2580:	9f 91       	pop	r25
    2582:	8f 91       	pop	r24
    2584:	7f 91       	pop	r23
    2586:	6f 91       	pop	r22
    2588:	5f 91       	pop	r21
    258a:	4f 91       	pop	r20
    258c:	3f 91       	pop	r19
    258e:	2f 91       	pop	r18
    2590:	0f 90       	pop	r0
    2592:	0f be       	out	0x3f, r0	; 63
    2594:	0f 90       	pop	r0
    2596:	1f 90       	pop	r1
    2598:	18 95       	reti

0000259a <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    259a:	1f 92       	push	r1
    259c:	0f 92       	push	r0
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	0f 92       	push	r0
    25a2:	11 24       	eor	r1, r1
    25a4:	2f 93       	push	r18
    25a6:	3f 93       	push	r19
    25a8:	4f 93       	push	r20
    25aa:	5f 93       	push	r21
    25ac:	6f 93       	push	r22
    25ae:	7f 93       	push	r23
    25b0:	8f 93       	push	r24
    25b2:	9f 93       	push	r25
    25b4:	af 93       	push	r26
    25b6:	bf 93       	push	r27
    25b8:	ef 93       	push	r30
    25ba:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    25bc:	e0 91 e8 21 	lds	r30, 0x21E8
    25c0:	f0 91 e9 21 	lds	r31, 0x21E9
    25c4:	30 97       	sbiw	r30, 0x00	; 0
    25c6:	09 f0       	breq	.+2      	; 0x25ca <__vector_18+0x30>
		tc_tcc0_ccc_callback();
    25c8:	09 95       	icall
	}
}
    25ca:	ff 91       	pop	r31
    25cc:	ef 91       	pop	r30
    25ce:	bf 91       	pop	r27
    25d0:	af 91       	pop	r26
    25d2:	9f 91       	pop	r25
    25d4:	8f 91       	pop	r24
    25d6:	7f 91       	pop	r23
    25d8:	6f 91       	pop	r22
    25da:	5f 91       	pop	r21
    25dc:	4f 91       	pop	r20
    25de:	3f 91       	pop	r19
    25e0:	2f 91       	pop	r18
    25e2:	0f 90       	pop	r0
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	0f 90       	pop	r0
    25e8:	1f 90       	pop	r1
    25ea:	18 95       	reti

000025ec <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    25ec:	1f 92       	push	r1
    25ee:	0f 92       	push	r0
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	0f 92       	push	r0
    25f4:	11 24       	eor	r1, r1
    25f6:	2f 93       	push	r18
    25f8:	3f 93       	push	r19
    25fa:	4f 93       	push	r20
    25fc:	5f 93       	push	r21
    25fe:	6f 93       	push	r22
    2600:	7f 93       	push	r23
    2602:	8f 93       	push	r24
    2604:	9f 93       	push	r25
    2606:	af 93       	push	r26
    2608:	bf 93       	push	r27
    260a:	ef 93       	push	r30
    260c:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    260e:	e0 91 ea 21 	lds	r30, 0x21EA
    2612:	f0 91 eb 21 	lds	r31, 0x21EB
    2616:	30 97       	sbiw	r30, 0x00	; 0
    2618:	09 f0       	breq	.+2      	; 0x261c <__vector_19+0x30>
		tc_tcc0_ccd_callback();
    261a:	09 95       	icall
	}
}
    261c:	ff 91       	pop	r31
    261e:	ef 91       	pop	r30
    2620:	bf 91       	pop	r27
    2622:	af 91       	pop	r26
    2624:	9f 91       	pop	r25
    2626:	8f 91       	pop	r24
    2628:	7f 91       	pop	r23
    262a:	6f 91       	pop	r22
    262c:	5f 91       	pop	r21
    262e:	4f 91       	pop	r20
    2630:	3f 91       	pop	r19
    2632:	2f 91       	pop	r18
    2634:	0f 90       	pop	r0
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	0f 90       	pop	r0
    263a:	1f 90       	pop	r1
    263c:	18 95       	reti

0000263e <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    263e:	1f 92       	push	r1
    2640:	0f 92       	push	r0
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	0f 92       	push	r0
    2646:	11 24       	eor	r1, r1
    2648:	2f 93       	push	r18
    264a:	3f 93       	push	r19
    264c:	4f 93       	push	r20
    264e:	5f 93       	push	r21
    2650:	6f 93       	push	r22
    2652:	7f 93       	push	r23
    2654:	8f 93       	push	r24
    2656:	9f 93       	push	r25
    2658:	af 93       	push	r26
    265a:	bf 93       	push	r27
    265c:	ef 93       	push	r30
    265e:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    2660:	e0 91 ec 21 	lds	r30, 0x21EC
    2664:	f0 91 ed 21 	lds	r31, 0x21ED
    2668:	30 97       	sbiw	r30, 0x00	; 0
    266a:	09 f0       	breq	.+2      	; 0x266e <__vector_20+0x30>
		tc_tcc1_ovf_callback();
    266c:	09 95       	icall
	}
}
    266e:	ff 91       	pop	r31
    2670:	ef 91       	pop	r30
    2672:	bf 91       	pop	r27
    2674:	af 91       	pop	r26
    2676:	9f 91       	pop	r25
    2678:	8f 91       	pop	r24
    267a:	7f 91       	pop	r23
    267c:	6f 91       	pop	r22
    267e:	5f 91       	pop	r21
    2680:	4f 91       	pop	r20
    2682:	3f 91       	pop	r19
    2684:	2f 91       	pop	r18
    2686:	0f 90       	pop	r0
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	0f 90       	pop	r0
    268c:	1f 90       	pop	r1
    268e:	18 95       	reti

00002690 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    2690:	1f 92       	push	r1
    2692:	0f 92       	push	r0
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	0f 92       	push	r0
    2698:	11 24       	eor	r1, r1
    269a:	2f 93       	push	r18
    269c:	3f 93       	push	r19
    269e:	4f 93       	push	r20
    26a0:	5f 93       	push	r21
    26a2:	6f 93       	push	r22
    26a4:	7f 93       	push	r23
    26a6:	8f 93       	push	r24
    26a8:	9f 93       	push	r25
    26aa:	af 93       	push	r26
    26ac:	bf 93       	push	r27
    26ae:	ef 93       	push	r30
    26b0:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    26b2:	e0 91 ee 21 	lds	r30, 0x21EE
    26b6:	f0 91 ef 21 	lds	r31, 0x21EF
    26ba:	30 97       	sbiw	r30, 0x00	; 0
    26bc:	09 f0       	breq	.+2      	; 0x26c0 <__vector_21+0x30>
		tc_tcc1_err_callback();
    26be:	09 95       	icall
	}
}
    26c0:	ff 91       	pop	r31
    26c2:	ef 91       	pop	r30
    26c4:	bf 91       	pop	r27
    26c6:	af 91       	pop	r26
    26c8:	9f 91       	pop	r25
    26ca:	8f 91       	pop	r24
    26cc:	7f 91       	pop	r23
    26ce:	6f 91       	pop	r22
    26d0:	5f 91       	pop	r21
    26d2:	4f 91       	pop	r20
    26d4:	3f 91       	pop	r19
    26d6:	2f 91       	pop	r18
    26d8:	0f 90       	pop	r0
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	0f 90       	pop	r0
    26de:	1f 90       	pop	r1
    26e0:	18 95       	reti

000026e2 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    26e2:	1f 92       	push	r1
    26e4:	0f 92       	push	r0
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	0f 92       	push	r0
    26ea:	11 24       	eor	r1, r1
    26ec:	2f 93       	push	r18
    26ee:	3f 93       	push	r19
    26f0:	4f 93       	push	r20
    26f2:	5f 93       	push	r21
    26f4:	6f 93       	push	r22
    26f6:	7f 93       	push	r23
    26f8:	8f 93       	push	r24
    26fa:	9f 93       	push	r25
    26fc:	af 93       	push	r26
    26fe:	bf 93       	push	r27
    2700:	ef 93       	push	r30
    2702:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    2704:	e0 91 f0 21 	lds	r30, 0x21F0
    2708:	f0 91 f1 21 	lds	r31, 0x21F1
    270c:	30 97       	sbiw	r30, 0x00	; 0
    270e:	09 f0       	breq	.+2      	; 0x2712 <__vector_22+0x30>
		tc_tcc1_cca_callback();
    2710:	09 95       	icall
	}
}
    2712:	ff 91       	pop	r31
    2714:	ef 91       	pop	r30
    2716:	bf 91       	pop	r27
    2718:	af 91       	pop	r26
    271a:	9f 91       	pop	r25
    271c:	8f 91       	pop	r24
    271e:	7f 91       	pop	r23
    2720:	6f 91       	pop	r22
    2722:	5f 91       	pop	r21
    2724:	4f 91       	pop	r20
    2726:	3f 91       	pop	r19
    2728:	2f 91       	pop	r18
    272a:	0f 90       	pop	r0
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	0f 90       	pop	r0
    2730:	1f 90       	pop	r1
    2732:	18 95       	reti

00002734 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    2734:	1f 92       	push	r1
    2736:	0f 92       	push	r0
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	0f 92       	push	r0
    273c:	11 24       	eor	r1, r1
    273e:	2f 93       	push	r18
    2740:	3f 93       	push	r19
    2742:	4f 93       	push	r20
    2744:	5f 93       	push	r21
    2746:	6f 93       	push	r22
    2748:	7f 93       	push	r23
    274a:	8f 93       	push	r24
    274c:	9f 93       	push	r25
    274e:	af 93       	push	r26
    2750:	bf 93       	push	r27
    2752:	ef 93       	push	r30
    2754:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    2756:	e0 91 f2 21 	lds	r30, 0x21F2
    275a:	f0 91 f3 21 	lds	r31, 0x21F3
    275e:	30 97       	sbiw	r30, 0x00	; 0
    2760:	09 f0       	breq	.+2      	; 0x2764 <__vector_23+0x30>
		tc_tcc1_ccb_callback();
    2762:	09 95       	icall
	}
}
    2764:	ff 91       	pop	r31
    2766:	ef 91       	pop	r30
    2768:	bf 91       	pop	r27
    276a:	af 91       	pop	r26
    276c:	9f 91       	pop	r25
    276e:	8f 91       	pop	r24
    2770:	7f 91       	pop	r23
    2772:	6f 91       	pop	r22
    2774:	5f 91       	pop	r21
    2776:	4f 91       	pop	r20
    2778:	3f 91       	pop	r19
    277a:	2f 91       	pop	r18
    277c:	0f 90       	pop	r0
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	0f 90       	pop	r0
    2782:	1f 90       	pop	r1
    2784:	18 95       	reti

00002786 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    2786:	1f 92       	push	r1
    2788:	0f 92       	push	r0
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	0f 92       	push	r0
    278e:	11 24       	eor	r1, r1
    2790:	2f 93       	push	r18
    2792:	3f 93       	push	r19
    2794:	4f 93       	push	r20
    2796:	5f 93       	push	r21
    2798:	6f 93       	push	r22
    279a:	7f 93       	push	r23
    279c:	8f 93       	push	r24
    279e:	9f 93       	push	r25
    27a0:	af 93       	push	r26
    27a2:	bf 93       	push	r27
    27a4:	ef 93       	push	r30
    27a6:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    27a8:	e0 91 f4 21 	lds	r30, 0x21F4
    27ac:	f0 91 f5 21 	lds	r31, 0x21F5
    27b0:	30 97       	sbiw	r30, 0x00	; 0
    27b2:	09 f0       	breq	.+2      	; 0x27b6 <__vector_77+0x30>
		tc_tcd0_ovf_callback();
    27b4:	09 95       	icall
	}
}
    27b6:	ff 91       	pop	r31
    27b8:	ef 91       	pop	r30
    27ba:	bf 91       	pop	r27
    27bc:	af 91       	pop	r26
    27be:	9f 91       	pop	r25
    27c0:	8f 91       	pop	r24
    27c2:	7f 91       	pop	r23
    27c4:	6f 91       	pop	r22
    27c6:	5f 91       	pop	r21
    27c8:	4f 91       	pop	r20
    27ca:	3f 91       	pop	r19
    27cc:	2f 91       	pop	r18
    27ce:	0f 90       	pop	r0
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	0f 90       	pop	r0
    27d4:	1f 90       	pop	r1
    27d6:	18 95       	reti

000027d8 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    27d8:	1f 92       	push	r1
    27da:	0f 92       	push	r0
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	0f 92       	push	r0
    27e0:	11 24       	eor	r1, r1
    27e2:	2f 93       	push	r18
    27e4:	3f 93       	push	r19
    27e6:	4f 93       	push	r20
    27e8:	5f 93       	push	r21
    27ea:	6f 93       	push	r22
    27ec:	7f 93       	push	r23
    27ee:	8f 93       	push	r24
    27f0:	9f 93       	push	r25
    27f2:	af 93       	push	r26
    27f4:	bf 93       	push	r27
    27f6:	ef 93       	push	r30
    27f8:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    27fa:	e0 91 f6 21 	lds	r30, 0x21F6
    27fe:	f0 91 f7 21 	lds	r31, 0x21F7
    2802:	30 97       	sbiw	r30, 0x00	; 0
    2804:	09 f0       	breq	.+2      	; 0x2808 <__vector_78+0x30>
		tc_tcd0_err_callback();
    2806:	09 95       	icall
	}
}
    2808:	ff 91       	pop	r31
    280a:	ef 91       	pop	r30
    280c:	bf 91       	pop	r27
    280e:	af 91       	pop	r26
    2810:	9f 91       	pop	r25
    2812:	8f 91       	pop	r24
    2814:	7f 91       	pop	r23
    2816:	6f 91       	pop	r22
    2818:	5f 91       	pop	r21
    281a:	4f 91       	pop	r20
    281c:	3f 91       	pop	r19
    281e:	2f 91       	pop	r18
    2820:	0f 90       	pop	r0
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	0f 90       	pop	r0
    2826:	1f 90       	pop	r1
    2828:	18 95       	reti

0000282a <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    282a:	1f 92       	push	r1
    282c:	0f 92       	push	r0
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	0f 92       	push	r0
    2832:	11 24       	eor	r1, r1
    2834:	2f 93       	push	r18
    2836:	3f 93       	push	r19
    2838:	4f 93       	push	r20
    283a:	5f 93       	push	r21
    283c:	6f 93       	push	r22
    283e:	7f 93       	push	r23
    2840:	8f 93       	push	r24
    2842:	9f 93       	push	r25
    2844:	af 93       	push	r26
    2846:	bf 93       	push	r27
    2848:	ef 93       	push	r30
    284a:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    284c:	e0 91 f8 21 	lds	r30, 0x21F8
    2850:	f0 91 f9 21 	lds	r31, 0x21F9
    2854:	30 97       	sbiw	r30, 0x00	; 0
    2856:	09 f0       	breq	.+2      	; 0x285a <__vector_79+0x30>
		tc_tcd0_cca_callback();
    2858:	09 95       	icall
	}
}
    285a:	ff 91       	pop	r31
    285c:	ef 91       	pop	r30
    285e:	bf 91       	pop	r27
    2860:	af 91       	pop	r26
    2862:	9f 91       	pop	r25
    2864:	8f 91       	pop	r24
    2866:	7f 91       	pop	r23
    2868:	6f 91       	pop	r22
    286a:	5f 91       	pop	r21
    286c:	4f 91       	pop	r20
    286e:	3f 91       	pop	r19
    2870:	2f 91       	pop	r18
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	0f 90       	pop	r0
    2878:	1f 90       	pop	r1
    287a:	18 95       	reti

0000287c <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    287c:	1f 92       	push	r1
    287e:	0f 92       	push	r0
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	0f 92       	push	r0
    2884:	11 24       	eor	r1, r1
    2886:	2f 93       	push	r18
    2888:	3f 93       	push	r19
    288a:	4f 93       	push	r20
    288c:	5f 93       	push	r21
    288e:	6f 93       	push	r22
    2890:	7f 93       	push	r23
    2892:	8f 93       	push	r24
    2894:	9f 93       	push	r25
    2896:	af 93       	push	r26
    2898:	bf 93       	push	r27
    289a:	ef 93       	push	r30
    289c:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    289e:	e0 91 fa 21 	lds	r30, 0x21FA
    28a2:	f0 91 fb 21 	lds	r31, 0x21FB
    28a6:	30 97       	sbiw	r30, 0x00	; 0
    28a8:	09 f0       	breq	.+2      	; 0x28ac <__vector_80+0x30>
		tc_tcd0_ccb_callback();
    28aa:	09 95       	icall
	}
}
    28ac:	ff 91       	pop	r31
    28ae:	ef 91       	pop	r30
    28b0:	bf 91       	pop	r27
    28b2:	af 91       	pop	r26
    28b4:	9f 91       	pop	r25
    28b6:	8f 91       	pop	r24
    28b8:	7f 91       	pop	r23
    28ba:	6f 91       	pop	r22
    28bc:	5f 91       	pop	r21
    28be:	4f 91       	pop	r20
    28c0:	3f 91       	pop	r19
    28c2:	2f 91       	pop	r18
    28c4:	0f 90       	pop	r0
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	0f 90       	pop	r0
    28ca:	1f 90       	pop	r1
    28cc:	18 95       	reti

000028ce <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    28ce:	1f 92       	push	r1
    28d0:	0f 92       	push	r0
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	0f 92       	push	r0
    28d6:	11 24       	eor	r1, r1
    28d8:	2f 93       	push	r18
    28da:	3f 93       	push	r19
    28dc:	4f 93       	push	r20
    28de:	5f 93       	push	r21
    28e0:	6f 93       	push	r22
    28e2:	7f 93       	push	r23
    28e4:	8f 93       	push	r24
    28e6:	9f 93       	push	r25
    28e8:	af 93       	push	r26
    28ea:	bf 93       	push	r27
    28ec:	ef 93       	push	r30
    28ee:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    28f0:	e0 91 fc 21 	lds	r30, 0x21FC
    28f4:	f0 91 fd 21 	lds	r31, 0x21FD
    28f8:	30 97       	sbiw	r30, 0x00	; 0
    28fa:	09 f0       	breq	.+2      	; 0x28fe <__vector_81+0x30>
		tc_tcd0_ccc_callback();
    28fc:	09 95       	icall
	}
}
    28fe:	ff 91       	pop	r31
    2900:	ef 91       	pop	r30
    2902:	bf 91       	pop	r27
    2904:	af 91       	pop	r26
    2906:	9f 91       	pop	r25
    2908:	8f 91       	pop	r24
    290a:	7f 91       	pop	r23
    290c:	6f 91       	pop	r22
    290e:	5f 91       	pop	r21
    2910:	4f 91       	pop	r20
    2912:	3f 91       	pop	r19
    2914:	2f 91       	pop	r18
    2916:	0f 90       	pop	r0
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	0f 90       	pop	r0
    291c:	1f 90       	pop	r1
    291e:	18 95       	reti

00002920 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    2920:	1f 92       	push	r1
    2922:	0f 92       	push	r0
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	0f 92       	push	r0
    2928:	11 24       	eor	r1, r1
    292a:	2f 93       	push	r18
    292c:	3f 93       	push	r19
    292e:	4f 93       	push	r20
    2930:	5f 93       	push	r21
    2932:	6f 93       	push	r22
    2934:	7f 93       	push	r23
    2936:	8f 93       	push	r24
    2938:	9f 93       	push	r25
    293a:	af 93       	push	r26
    293c:	bf 93       	push	r27
    293e:	ef 93       	push	r30
    2940:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    2942:	e0 91 fe 21 	lds	r30, 0x21FE
    2946:	f0 91 ff 21 	lds	r31, 0x21FF
    294a:	30 97       	sbiw	r30, 0x00	; 0
    294c:	09 f0       	breq	.+2      	; 0x2950 <__vector_82+0x30>
		tc_tcd0_ccd_callback();
    294e:	09 95       	icall
	}
}
    2950:	ff 91       	pop	r31
    2952:	ef 91       	pop	r30
    2954:	bf 91       	pop	r27
    2956:	af 91       	pop	r26
    2958:	9f 91       	pop	r25
    295a:	8f 91       	pop	r24
    295c:	7f 91       	pop	r23
    295e:	6f 91       	pop	r22
    2960:	5f 91       	pop	r21
    2962:	4f 91       	pop	r20
    2964:	3f 91       	pop	r19
    2966:	2f 91       	pop	r18
    2968:	0f 90       	pop	r0
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	0f 90       	pop	r0
    296e:	1f 90       	pop	r1
    2970:	18 95       	reti

00002972 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    2972:	1f 92       	push	r1
    2974:	0f 92       	push	r0
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	0f 92       	push	r0
    297a:	11 24       	eor	r1, r1
    297c:	2f 93       	push	r18
    297e:	3f 93       	push	r19
    2980:	4f 93       	push	r20
    2982:	5f 93       	push	r21
    2984:	6f 93       	push	r22
    2986:	7f 93       	push	r23
    2988:	8f 93       	push	r24
    298a:	9f 93       	push	r25
    298c:	af 93       	push	r26
    298e:	bf 93       	push	r27
    2990:	ef 93       	push	r30
    2992:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    2994:	e0 91 00 22 	lds	r30, 0x2200
    2998:	f0 91 01 22 	lds	r31, 0x2201
    299c:	30 97       	sbiw	r30, 0x00	; 0
    299e:	09 f0       	breq	.+2      	; 0x29a2 <__vector_83+0x30>
		tc_tcd1_ovf_callback();
    29a0:	09 95       	icall
	}
}
    29a2:	ff 91       	pop	r31
    29a4:	ef 91       	pop	r30
    29a6:	bf 91       	pop	r27
    29a8:	af 91       	pop	r26
    29aa:	9f 91       	pop	r25
    29ac:	8f 91       	pop	r24
    29ae:	7f 91       	pop	r23
    29b0:	6f 91       	pop	r22
    29b2:	5f 91       	pop	r21
    29b4:	4f 91       	pop	r20
    29b6:	3f 91       	pop	r19
    29b8:	2f 91       	pop	r18
    29ba:	0f 90       	pop	r0
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	0f 90       	pop	r0
    29c0:	1f 90       	pop	r1
    29c2:	18 95       	reti

000029c4 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    29c4:	1f 92       	push	r1
    29c6:	0f 92       	push	r0
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	0f 92       	push	r0
    29cc:	11 24       	eor	r1, r1
    29ce:	2f 93       	push	r18
    29d0:	3f 93       	push	r19
    29d2:	4f 93       	push	r20
    29d4:	5f 93       	push	r21
    29d6:	6f 93       	push	r22
    29d8:	7f 93       	push	r23
    29da:	8f 93       	push	r24
    29dc:	9f 93       	push	r25
    29de:	af 93       	push	r26
    29e0:	bf 93       	push	r27
    29e2:	ef 93       	push	r30
    29e4:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    29e6:	e0 91 02 22 	lds	r30, 0x2202
    29ea:	f0 91 03 22 	lds	r31, 0x2203
    29ee:	30 97       	sbiw	r30, 0x00	; 0
    29f0:	09 f0       	breq	.+2      	; 0x29f4 <__vector_84+0x30>
		tc_tcd1_err_callback();
    29f2:	09 95       	icall
	}
}
    29f4:	ff 91       	pop	r31
    29f6:	ef 91       	pop	r30
    29f8:	bf 91       	pop	r27
    29fa:	af 91       	pop	r26
    29fc:	9f 91       	pop	r25
    29fe:	8f 91       	pop	r24
    2a00:	7f 91       	pop	r23
    2a02:	6f 91       	pop	r22
    2a04:	5f 91       	pop	r21
    2a06:	4f 91       	pop	r20
    2a08:	3f 91       	pop	r19
    2a0a:	2f 91       	pop	r18
    2a0c:	0f 90       	pop	r0
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	0f 90       	pop	r0
    2a12:	1f 90       	pop	r1
    2a14:	18 95       	reti

00002a16 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    2a16:	1f 92       	push	r1
    2a18:	0f 92       	push	r0
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	0f 92       	push	r0
    2a1e:	11 24       	eor	r1, r1
    2a20:	2f 93       	push	r18
    2a22:	3f 93       	push	r19
    2a24:	4f 93       	push	r20
    2a26:	5f 93       	push	r21
    2a28:	6f 93       	push	r22
    2a2a:	7f 93       	push	r23
    2a2c:	8f 93       	push	r24
    2a2e:	9f 93       	push	r25
    2a30:	af 93       	push	r26
    2a32:	bf 93       	push	r27
    2a34:	ef 93       	push	r30
    2a36:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    2a38:	e0 91 04 22 	lds	r30, 0x2204
    2a3c:	f0 91 05 22 	lds	r31, 0x2205
    2a40:	30 97       	sbiw	r30, 0x00	; 0
    2a42:	09 f0       	breq	.+2      	; 0x2a46 <__vector_85+0x30>
		tc_tcd1_cca_callback();
    2a44:	09 95       	icall
	}
}
    2a46:	ff 91       	pop	r31
    2a48:	ef 91       	pop	r30
    2a4a:	bf 91       	pop	r27
    2a4c:	af 91       	pop	r26
    2a4e:	9f 91       	pop	r25
    2a50:	8f 91       	pop	r24
    2a52:	7f 91       	pop	r23
    2a54:	6f 91       	pop	r22
    2a56:	5f 91       	pop	r21
    2a58:	4f 91       	pop	r20
    2a5a:	3f 91       	pop	r19
    2a5c:	2f 91       	pop	r18
    2a5e:	0f 90       	pop	r0
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	0f 90       	pop	r0
    2a64:	1f 90       	pop	r1
    2a66:	18 95       	reti

00002a68 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    2a68:	1f 92       	push	r1
    2a6a:	0f 92       	push	r0
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	0f 92       	push	r0
    2a70:	11 24       	eor	r1, r1
    2a72:	2f 93       	push	r18
    2a74:	3f 93       	push	r19
    2a76:	4f 93       	push	r20
    2a78:	5f 93       	push	r21
    2a7a:	6f 93       	push	r22
    2a7c:	7f 93       	push	r23
    2a7e:	8f 93       	push	r24
    2a80:	9f 93       	push	r25
    2a82:	af 93       	push	r26
    2a84:	bf 93       	push	r27
    2a86:	ef 93       	push	r30
    2a88:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    2a8a:	e0 91 06 22 	lds	r30, 0x2206
    2a8e:	f0 91 07 22 	lds	r31, 0x2207
    2a92:	30 97       	sbiw	r30, 0x00	; 0
    2a94:	09 f0       	breq	.+2      	; 0x2a98 <__vector_86+0x30>
		tc_tcd1_ccb_callback();
    2a96:	09 95       	icall
	}
}
    2a98:	ff 91       	pop	r31
    2a9a:	ef 91       	pop	r30
    2a9c:	bf 91       	pop	r27
    2a9e:	af 91       	pop	r26
    2aa0:	9f 91       	pop	r25
    2aa2:	8f 91       	pop	r24
    2aa4:	7f 91       	pop	r23
    2aa6:	6f 91       	pop	r22
    2aa8:	5f 91       	pop	r21
    2aaa:	4f 91       	pop	r20
    2aac:	3f 91       	pop	r19
    2aae:	2f 91       	pop	r18
    2ab0:	0f 90       	pop	r0
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	0f 90       	pop	r0
    2ab6:	1f 90       	pop	r1
    2ab8:	18 95       	reti

00002aba <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    2aba:	1f 92       	push	r1
    2abc:	0f 92       	push	r0
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	0f 92       	push	r0
    2ac2:	11 24       	eor	r1, r1
    2ac4:	2f 93       	push	r18
    2ac6:	3f 93       	push	r19
    2ac8:	4f 93       	push	r20
    2aca:	5f 93       	push	r21
    2acc:	6f 93       	push	r22
    2ace:	7f 93       	push	r23
    2ad0:	8f 93       	push	r24
    2ad2:	9f 93       	push	r25
    2ad4:	af 93       	push	r26
    2ad6:	bf 93       	push	r27
    2ad8:	ef 93       	push	r30
    2ada:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    2adc:	e0 91 08 22 	lds	r30, 0x2208
    2ae0:	f0 91 09 22 	lds	r31, 0x2209
    2ae4:	30 97       	sbiw	r30, 0x00	; 0
    2ae6:	09 f0       	breq	.+2      	; 0x2aea <__vector_47+0x30>
		tc_tce0_ovf_callback();
    2ae8:	09 95       	icall
	}
}
    2aea:	ff 91       	pop	r31
    2aec:	ef 91       	pop	r30
    2aee:	bf 91       	pop	r27
    2af0:	af 91       	pop	r26
    2af2:	9f 91       	pop	r25
    2af4:	8f 91       	pop	r24
    2af6:	7f 91       	pop	r23
    2af8:	6f 91       	pop	r22
    2afa:	5f 91       	pop	r21
    2afc:	4f 91       	pop	r20
    2afe:	3f 91       	pop	r19
    2b00:	2f 91       	pop	r18
    2b02:	0f 90       	pop	r0
    2b04:	0f be       	out	0x3f, r0	; 63
    2b06:	0f 90       	pop	r0
    2b08:	1f 90       	pop	r1
    2b0a:	18 95       	reti

00002b0c <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    2b0c:	1f 92       	push	r1
    2b0e:	0f 92       	push	r0
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	0f 92       	push	r0
    2b14:	11 24       	eor	r1, r1
    2b16:	2f 93       	push	r18
    2b18:	3f 93       	push	r19
    2b1a:	4f 93       	push	r20
    2b1c:	5f 93       	push	r21
    2b1e:	6f 93       	push	r22
    2b20:	7f 93       	push	r23
    2b22:	8f 93       	push	r24
    2b24:	9f 93       	push	r25
    2b26:	af 93       	push	r26
    2b28:	bf 93       	push	r27
    2b2a:	ef 93       	push	r30
    2b2c:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    2b2e:	e0 91 0a 22 	lds	r30, 0x220A
    2b32:	f0 91 0b 22 	lds	r31, 0x220B
    2b36:	30 97       	sbiw	r30, 0x00	; 0
    2b38:	09 f0       	breq	.+2      	; 0x2b3c <__vector_48+0x30>
		tc_tce0_err_callback();
    2b3a:	09 95       	icall
	}
}
    2b3c:	ff 91       	pop	r31
    2b3e:	ef 91       	pop	r30
    2b40:	bf 91       	pop	r27
    2b42:	af 91       	pop	r26
    2b44:	9f 91       	pop	r25
    2b46:	8f 91       	pop	r24
    2b48:	7f 91       	pop	r23
    2b4a:	6f 91       	pop	r22
    2b4c:	5f 91       	pop	r21
    2b4e:	4f 91       	pop	r20
    2b50:	3f 91       	pop	r19
    2b52:	2f 91       	pop	r18
    2b54:	0f 90       	pop	r0
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	0f 90       	pop	r0
    2b5a:	1f 90       	pop	r1
    2b5c:	18 95       	reti

00002b5e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    2b5e:	1f 92       	push	r1
    2b60:	0f 92       	push	r0
    2b62:	0f b6       	in	r0, 0x3f	; 63
    2b64:	0f 92       	push	r0
    2b66:	11 24       	eor	r1, r1
    2b68:	2f 93       	push	r18
    2b6a:	3f 93       	push	r19
    2b6c:	4f 93       	push	r20
    2b6e:	5f 93       	push	r21
    2b70:	6f 93       	push	r22
    2b72:	7f 93       	push	r23
    2b74:	8f 93       	push	r24
    2b76:	9f 93       	push	r25
    2b78:	af 93       	push	r26
    2b7a:	bf 93       	push	r27
    2b7c:	ef 93       	push	r30
    2b7e:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    2b80:	e0 91 0c 22 	lds	r30, 0x220C
    2b84:	f0 91 0d 22 	lds	r31, 0x220D
    2b88:	30 97       	sbiw	r30, 0x00	; 0
    2b8a:	09 f0       	breq	.+2      	; 0x2b8e <__vector_49+0x30>
		tc_tce0_cca_callback();
    2b8c:	09 95       	icall
	}
}
    2b8e:	ff 91       	pop	r31
    2b90:	ef 91       	pop	r30
    2b92:	bf 91       	pop	r27
    2b94:	af 91       	pop	r26
    2b96:	9f 91       	pop	r25
    2b98:	8f 91       	pop	r24
    2b9a:	7f 91       	pop	r23
    2b9c:	6f 91       	pop	r22
    2b9e:	5f 91       	pop	r21
    2ba0:	4f 91       	pop	r20
    2ba2:	3f 91       	pop	r19
    2ba4:	2f 91       	pop	r18
    2ba6:	0f 90       	pop	r0
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	0f 90       	pop	r0
    2bac:	1f 90       	pop	r1
    2bae:	18 95       	reti

00002bb0 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    2bb0:	1f 92       	push	r1
    2bb2:	0f 92       	push	r0
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	0f 92       	push	r0
    2bb8:	11 24       	eor	r1, r1
    2bba:	2f 93       	push	r18
    2bbc:	3f 93       	push	r19
    2bbe:	4f 93       	push	r20
    2bc0:	5f 93       	push	r21
    2bc2:	6f 93       	push	r22
    2bc4:	7f 93       	push	r23
    2bc6:	8f 93       	push	r24
    2bc8:	9f 93       	push	r25
    2bca:	af 93       	push	r26
    2bcc:	bf 93       	push	r27
    2bce:	ef 93       	push	r30
    2bd0:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    2bd2:	e0 91 0e 22 	lds	r30, 0x220E
    2bd6:	f0 91 0f 22 	lds	r31, 0x220F
    2bda:	30 97       	sbiw	r30, 0x00	; 0
    2bdc:	09 f0       	breq	.+2      	; 0x2be0 <__vector_50+0x30>
		tc_tce0_ccb_callback();
    2bde:	09 95       	icall
	}
}
    2be0:	ff 91       	pop	r31
    2be2:	ef 91       	pop	r30
    2be4:	bf 91       	pop	r27
    2be6:	af 91       	pop	r26
    2be8:	9f 91       	pop	r25
    2bea:	8f 91       	pop	r24
    2bec:	7f 91       	pop	r23
    2bee:	6f 91       	pop	r22
    2bf0:	5f 91       	pop	r21
    2bf2:	4f 91       	pop	r20
    2bf4:	3f 91       	pop	r19
    2bf6:	2f 91       	pop	r18
    2bf8:	0f 90       	pop	r0
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	0f 90       	pop	r0
    2bfe:	1f 90       	pop	r1
    2c00:	18 95       	reti

00002c02 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    2c02:	1f 92       	push	r1
    2c04:	0f 92       	push	r0
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	0f 92       	push	r0
    2c0a:	11 24       	eor	r1, r1
    2c0c:	2f 93       	push	r18
    2c0e:	3f 93       	push	r19
    2c10:	4f 93       	push	r20
    2c12:	5f 93       	push	r21
    2c14:	6f 93       	push	r22
    2c16:	7f 93       	push	r23
    2c18:	8f 93       	push	r24
    2c1a:	9f 93       	push	r25
    2c1c:	af 93       	push	r26
    2c1e:	bf 93       	push	r27
    2c20:	ef 93       	push	r30
    2c22:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    2c24:	e0 91 10 22 	lds	r30, 0x2210
    2c28:	f0 91 11 22 	lds	r31, 0x2211
    2c2c:	30 97       	sbiw	r30, 0x00	; 0
    2c2e:	09 f0       	breq	.+2      	; 0x2c32 <__vector_51+0x30>
		tc_tce0_ccc_callback();
    2c30:	09 95       	icall
	}
}
    2c32:	ff 91       	pop	r31
    2c34:	ef 91       	pop	r30
    2c36:	bf 91       	pop	r27
    2c38:	af 91       	pop	r26
    2c3a:	9f 91       	pop	r25
    2c3c:	8f 91       	pop	r24
    2c3e:	7f 91       	pop	r23
    2c40:	6f 91       	pop	r22
    2c42:	5f 91       	pop	r21
    2c44:	4f 91       	pop	r20
    2c46:	3f 91       	pop	r19
    2c48:	2f 91       	pop	r18
    2c4a:	0f 90       	pop	r0
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	0f 90       	pop	r0
    2c50:	1f 90       	pop	r1
    2c52:	18 95       	reti

00002c54 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    2c54:	1f 92       	push	r1
    2c56:	0f 92       	push	r0
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	0f 92       	push	r0
    2c5c:	11 24       	eor	r1, r1
    2c5e:	2f 93       	push	r18
    2c60:	3f 93       	push	r19
    2c62:	4f 93       	push	r20
    2c64:	5f 93       	push	r21
    2c66:	6f 93       	push	r22
    2c68:	7f 93       	push	r23
    2c6a:	8f 93       	push	r24
    2c6c:	9f 93       	push	r25
    2c6e:	af 93       	push	r26
    2c70:	bf 93       	push	r27
    2c72:	ef 93       	push	r30
    2c74:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    2c76:	e0 91 12 22 	lds	r30, 0x2212
    2c7a:	f0 91 13 22 	lds	r31, 0x2213
    2c7e:	30 97       	sbiw	r30, 0x00	; 0
    2c80:	09 f0       	breq	.+2      	; 0x2c84 <__vector_52+0x30>
		tc_tce0_ccd_callback();
    2c82:	09 95       	icall
	}
}
    2c84:	ff 91       	pop	r31
    2c86:	ef 91       	pop	r30
    2c88:	bf 91       	pop	r27
    2c8a:	af 91       	pop	r26
    2c8c:	9f 91       	pop	r25
    2c8e:	8f 91       	pop	r24
    2c90:	7f 91       	pop	r23
    2c92:	6f 91       	pop	r22
    2c94:	5f 91       	pop	r21
    2c96:	4f 91       	pop	r20
    2c98:	3f 91       	pop	r19
    2c9a:	2f 91       	pop	r18
    2c9c:	0f 90       	pop	r0
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	0f 90       	pop	r0
    2ca2:	1f 90       	pop	r1
    2ca4:	18 95       	reti

00002ca6 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    2ca6:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2ca8:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    2caa:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    2cac:	81 15       	cp	r24, r1
    2cae:	28 e0       	ldi	r18, 0x08	; 8
    2cb0:	92 07       	cpc	r25, r18
    2cb2:	59 f4       	brne	.+22     	; 0x2cca <tc_enable+0x24>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2cb4:	61 e0       	ldi	r22, 0x01	; 1
    2cb6:	83 e0       	ldi	r24, 0x03	; 3
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2cbe:	64 e0       	ldi	r22, 0x04	; 4
    2cc0:	83 e0       	ldi	r24, 0x03	; 3
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    2cc8:	3d c0       	rjmp	.+122    	; 0x2d44 <tc_enable+0x9e>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    2cca:	80 34       	cpi	r24, 0x40	; 64
    2ccc:	28 e0       	ldi	r18, 0x08	; 8
    2cce:	92 07       	cpc	r25, r18
    2cd0:	59 f4       	brne	.+22     	; 0x2ce8 <tc_enable+0x42>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2cd2:	62 e0       	ldi	r22, 0x02	; 2
    2cd4:	83 e0       	ldi	r24, 0x03	; 3
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2cdc:	64 e0       	ldi	r22, 0x04	; 4
    2cde:	83 e0       	ldi	r24, 0x03	; 3
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    2ce6:	2e c0       	rjmp	.+92     	; 0x2d44 <tc_enable+0x9e>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    2ce8:	81 15       	cp	r24, r1
    2cea:	29 e0       	ldi	r18, 0x09	; 9
    2cec:	92 07       	cpc	r25, r18
    2cee:	59 f4       	brne	.+22     	; 0x2d06 <tc_enable+0x60>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2cf0:	61 e0       	ldi	r22, 0x01	; 1
    2cf2:	84 e0       	ldi	r24, 0x04	; 4
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2cfa:	64 e0       	ldi	r22, 0x04	; 4
    2cfc:	84 e0       	ldi	r24, 0x04	; 4
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    2d04:	1f c0       	rjmp	.+62     	; 0x2d44 <tc_enable+0x9e>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    2d06:	80 34       	cpi	r24, 0x40	; 64
    2d08:	29 e0       	ldi	r18, 0x09	; 9
    2d0a:	92 07       	cpc	r25, r18
    2d0c:	59 f4       	brne	.+22     	; 0x2d24 <tc_enable+0x7e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2d0e:	62 e0       	ldi	r22, 0x02	; 2
    2d10:	84 e0       	ldi	r24, 0x04	; 4
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2d18:	64 e0       	ldi	r22, 0x04	; 4
    2d1a:	84 e0       	ldi	r24, 0x04	; 4
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    2d22:	10 c0       	rjmp	.+32     	; 0x2d44 <tc_enable+0x9e>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    2d24:	81 15       	cp	r24, r1
    2d26:	9a 40       	sbci	r25, 0x0A	; 10
    2d28:	59 f4       	brne	.+22     	; 0x2d40 <tc_enable+0x9a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    2d2a:	61 e0       	ldi	r22, 0x01	; 1
    2d2c:	85 e0       	ldi	r24, 0x05	; 5
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2d34:	64 e0       	ldi	r22, 0x04	; 4
    2d36:	85 e0       	ldi	r24, 0x05	; 5
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    2d3e:	02 c0       	rjmp	.+4      	; 0x2d44 <tc_enable+0x9e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d40:	cf bf       	out	0x3f, r28	; 63
    2d42:	09 c0       	rjmp	.+18     	; 0x2d56 <tc_enable+0xb0>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2d44:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2d46:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2d48:	e1 e9       	ldi	r30, 0x91	; 145
    2d4a:	f3 e2       	ldi	r31, 0x23	; 35
    2d4c:	90 81       	ld	r25, Z
    2d4e:	9f 5f       	subi	r25, 0xFF	; 255
    2d50:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d52:	8f bf       	out	0x3f, r24	; 63
    2d54:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    2d56:	cf 91       	pop	r28
    2d58:	08 95       	ret

00002d5a <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	81 81       	ldd	r24, Z+1	; 0x01
    2d5e:	85 ff       	sbrs	r24, 5
    2d60:	fd cf       	rjmp	.-6      	; 0x2d5c <usart_putchar+0x2>
    2d62:	60 83       	st	Z, r22
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	08 95       	ret

00002d6a <usart_getchar>:
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	81 81       	ldd	r24, Z+1	; 0x01
    2d6e:	88 23       	and	r24, r24
    2d70:	ec f7       	brge	.-6      	; 0x2d6c <usart_getchar+0x2>
    2d72:	80 81       	ld	r24, Z
    2d74:	08 95       	ret

00002d76 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    2d76:	4f 92       	push	r4
    2d78:	5f 92       	push	r5
    2d7a:	6f 92       	push	r6
    2d7c:	7f 92       	push	r7
    2d7e:	8f 92       	push	r8
    2d80:	9f 92       	push	r9
    2d82:	af 92       	push	r10
    2d84:	bf 92       	push	r11
    2d86:	cf 92       	push	r12
    2d88:	df 92       	push	r13
    2d8a:	ef 92       	push	r14
    2d8c:	ff 92       	push	r15
    2d8e:	0f 93       	push	r16
    2d90:	1f 93       	push	r17
    2d92:	cf 93       	push	r28
    2d94:	df 93       	push	r29
    2d96:	ec 01       	movw	r28, r24
    2d98:	4a 01       	movw	r8, r20
    2d9a:	5b 01       	movw	r10, r22
    2d9c:	28 01       	movw	r4, r16
    2d9e:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    2da0:	d9 01       	movw	r26, r18
    2da2:	c8 01       	movw	r24, r16
    2da4:	68 94       	set
    2da6:	12 f8       	bld	r1, 2
    2da8:	b6 95       	lsr	r27
    2daa:	a7 95       	ror	r26
    2dac:	97 95       	ror	r25
    2dae:	87 95       	ror	r24
    2db0:	16 94       	lsr	r1
    2db2:	d1 f7       	brne	.-12     	; 0x2da8 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    2db4:	b9 01       	movw	r22, r18
    2db6:	a8 01       	movw	r20, r16
    2db8:	03 2e       	mov	r0, r19
    2dba:	36 e1       	ldi	r19, 0x16	; 22
    2dbc:	76 95       	lsr	r23
    2dbe:	67 95       	ror	r22
    2dc0:	57 95       	ror	r21
    2dc2:	47 95       	ror	r20
    2dc4:	3a 95       	dec	r19
    2dc6:	d1 f7       	brne	.-12     	; 0x2dbc <usart_set_baudrate+0x46>
    2dc8:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    2dca:	2c 81       	ldd	r18, Y+4	; 0x04
    2dcc:	22 fd       	sbrc	r18, 2
    2dce:	08 c0       	rjmp	.+16     	; 0x2de0 <usart_set_baudrate+0x6a>
		max_rate /= 2;
    2dd0:	b6 95       	lsr	r27
    2dd2:	a7 95       	ror	r26
    2dd4:	97 95       	ror	r25
    2dd6:	87 95       	ror	r24
		min_rate /= 2;
    2dd8:	76 95       	lsr	r23
    2dda:	67 95       	ror	r22
    2ddc:	57 95       	ror	r21
    2dde:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    2de0:	88 15       	cp	r24, r8
    2de2:	99 05       	cpc	r25, r9
    2de4:	aa 05       	cpc	r26, r10
    2de6:	bb 05       	cpc	r27, r11
    2de8:	08 f4       	brcc	.+2      	; 0x2dec <usart_set_baudrate+0x76>
    2dea:	ae c0       	rjmp	.+348    	; 0x2f48 <usart_set_baudrate+0x1d2>
    2dec:	84 16       	cp	r8, r20
    2dee:	95 06       	cpc	r9, r21
    2df0:	a6 06       	cpc	r10, r22
    2df2:	b7 06       	cpc	r11, r23
    2df4:	08 f4       	brcc	.+2      	; 0x2df8 <usart_set_baudrate+0x82>
    2df6:	aa c0       	rjmp	.+340    	; 0x2f4c <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    2df8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dfa:	82 fd       	sbrc	r24, 2
    2dfc:	04 c0       	rjmp	.+8      	; 0x2e06 <usart_set_baudrate+0x90>
		baud *= 2;
    2dfe:	88 0c       	add	r8, r8
    2e00:	99 1c       	adc	r9, r9
    2e02:	aa 1c       	adc	r10, r10
    2e04:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    2e06:	c3 01       	movw	r24, r6
    2e08:	b2 01       	movw	r22, r4
    2e0a:	a5 01       	movw	r20, r10
    2e0c:	94 01       	movw	r18, r8
    2e0e:	0e 94 c4 24 	call	0x4988	; 0x4988 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    2e12:	2f 3f       	cpi	r18, 0xFF	; 255
    2e14:	31 05       	cpc	r19, r1
    2e16:	41 05       	cpc	r20, r1
    2e18:	51 05       	cpc	r21, r1
    2e1a:	08 f4       	brcc	.+2      	; 0x2e1e <usart_set_baudrate+0xa8>
    2e1c:	99 c0       	rjmp	.+306    	; 0x2f50 <usart_set_baudrate+0x1da>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    2e1e:	c1 2c       	mov	r12, r1
    2e20:	d1 2c       	mov	r13, r1
    2e22:	76 01       	movw	r14, r12
    2e24:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    2e26:	19 ef       	ldi	r17, 0xF9	; 249
    2e28:	05 c0       	rjmp	.+10     	; 0x2e34 <usart_set_baudrate+0xbe>
		if (ratio < limit) {
    2e2a:	2c 15       	cp	r18, r12
    2e2c:	3d 05       	cpc	r19, r13
    2e2e:	4e 05       	cpc	r20, r14
    2e30:	5f 05       	cpc	r21, r15
    2e32:	68 f0       	brcs	.+26     	; 0x2e4e <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
    2e34:	cc 0c       	add	r12, r12
    2e36:	dd 1c       	adc	r13, r13
    2e38:	ee 1c       	adc	r14, r14
    2e3a:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    2e3c:	1d 3f       	cpi	r17, 0xFD	; 253
    2e3e:	14 f4       	brge	.+4      	; 0x2e44 <usart_set_baudrate+0xce>
			limit |= 1;
    2e40:	68 94       	set
    2e42:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    2e44:	1f 5f       	subi	r17, 0xFF	; 255
    2e46:	17 30       	cpi	r17, 0x07	; 7
    2e48:	81 f7       	brne	.-32     	; 0x2e2a <usart_set_baudrate+0xb4>
    2e4a:	21 2f       	mov	r18, r17
    2e4c:	54 c0       	rjmp	.+168    	; 0x2ef6 <usart_set_baudrate+0x180>
    2e4e:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    2e50:	11 23       	and	r17, r17
    2e52:	0c f0       	brlt	.+2      	; 0x2e56 <usart_set_baudrate+0xe0>
    2e54:	50 c0       	rjmp	.+160    	; 0x2ef6 <usart_set_baudrate+0x180>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    2e56:	d5 01       	movw	r26, r10
    2e58:	c4 01       	movw	r24, r8
    2e5a:	88 0f       	add	r24, r24
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	aa 1f       	adc	r26, r26
    2e60:	bb 1f       	adc	r27, r27
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	aa 1f       	adc	r26, r26
    2e68:	bb 1f       	adc	r27, r27
    2e6a:	88 0f       	add	r24, r24
    2e6c:	99 1f       	adc	r25, r25
    2e6e:	aa 1f       	adc	r26, r26
    2e70:	bb 1f       	adc	r27, r27
    2e72:	48 1a       	sub	r4, r24
    2e74:	59 0a       	sbc	r5, r25
    2e76:	6a 0a       	sbc	r6, r26
    2e78:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    2e7a:	1e 3f       	cpi	r17, 0xFE	; 254
    2e7c:	f4 f4       	brge	.+60     	; 0x2eba <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    2e7e:	6d ef       	ldi	r22, 0xFD	; 253
    2e80:	7f ef       	ldi	r23, 0xFF	; 255
    2e82:	61 1b       	sub	r22, r17
    2e84:	71 09       	sbc	r23, r1
    2e86:	17 fd       	sbrc	r17, 7
    2e88:	73 95       	inc	r23
    2e8a:	04 c0       	rjmp	.+8      	; 0x2e94 <usart_set_baudrate+0x11e>
    2e8c:	44 0c       	add	r4, r4
    2e8e:	55 1c       	adc	r5, r5
    2e90:	66 1c       	adc	r6, r6
    2e92:	77 1c       	adc	r7, r7
    2e94:	6a 95       	dec	r22
    2e96:	d2 f7       	brpl	.-12     	; 0x2e8c <usart_set_baudrate+0x116>
    2e98:	d5 01       	movw	r26, r10
    2e9a:	c4 01       	movw	r24, r8
    2e9c:	b6 95       	lsr	r27
    2e9e:	a7 95       	ror	r26
    2ea0:	97 95       	ror	r25
    2ea2:	87 95       	ror	r24
    2ea4:	bc 01       	movw	r22, r24
    2ea6:	cd 01       	movw	r24, r26
    2ea8:	64 0d       	add	r22, r4
    2eaa:	75 1d       	adc	r23, r5
    2eac:	86 1d       	adc	r24, r6
    2eae:	97 1d       	adc	r25, r7
    2eb0:	a5 01       	movw	r20, r10
    2eb2:	94 01       	movw	r18, r8
    2eb4:	0e 94 c4 24 	call	0x4988	; 0x4988 <__udivmodsi4>
    2eb8:	3e c0       	rjmp	.+124    	; 0x2f36 <usart_set_baudrate+0x1c0>
		} else {
			baud <<= exp + 3;
    2eba:	21 2f       	mov	r18, r17
    2ebc:	33 27       	eor	r19, r19
    2ebe:	27 fd       	sbrc	r18, 7
    2ec0:	30 95       	com	r19
    2ec2:	2d 5f       	subi	r18, 0xFD	; 253
    2ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec6:	d5 01       	movw	r26, r10
    2ec8:	c4 01       	movw	r24, r8
    2eca:	04 c0       	rjmp	.+8      	; 0x2ed4 <usart_set_baudrate+0x15e>
    2ecc:	88 0f       	add	r24, r24
    2ece:	99 1f       	adc	r25, r25
    2ed0:	aa 1f       	adc	r26, r26
    2ed2:	bb 1f       	adc	r27, r27
    2ed4:	2a 95       	dec	r18
    2ed6:	d2 f7       	brpl	.-12     	; 0x2ecc <usart_set_baudrate+0x156>
    2ed8:	9c 01       	movw	r18, r24
    2eda:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    2edc:	b6 95       	lsr	r27
    2ede:	a7 95       	ror	r26
    2ee0:	97 95       	ror	r25
    2ee2:	87 95       	ror	r24
    2ee4:	bc 01       	movw	r22, r24
    2ee6:	cd 01       	movw	r24, r26
    2ee8:	64 0d       	add	r22, r4
    2eea:	75 1d       	adc	r23, r5
    2eec:	86 1d       	adc	r24, r6
    2eee:	97 1d       	adc	r25, r7
    2ef0:	0e 94 c4 24 	call	0x4988	; 0x4988 <__udivmodsi4>
    2ef4:	20 c0       	rjmp	.+64     	; 0x2f36 <usart_set_baudrate+0x1c0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    2ef6:	33 27       	eor	r19, r19
    2ef8:	27 fd       	sbrc	r18, 7
    2efa:	30 95       	com	r19
    2efc:	2d 5f       	subi	r18, 0xFD	; 253
    2efe:	3f 4f       	sbci	r19, 0xFF	; 255
    2f00:	d5 01       	movw	r26, r10
    2f02:	c4 01       	movw	r24, r8
    2f04:	04 c0       	rjmp	.+8      	; 0x2f0e <usart_set_baudrate+0x198>
    2f06:	88 0f       	add	r24, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	aa 1f       	adc	r26, r26
    2f0c:	bb 1f       	adc	r27, r27
    2f0e:	2a 95       	dec	r18
    2f10:	d2 f7       	brpl	.-12     	; 0x2f06 <usart_set_baudrate+0x190>
    2f12:	9c 01       	movw	r18, r24
    2f14:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    2f16:	b6 95       	lsr	r27
    2f18:	a7 95       	ror	r26
    2f1a:	97 95       	ror	r25
    2f1c:	87 95       	ror	r24
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cd 01       	movw	r24, r26
    2f22:	64 0d       	add	r22, r4
    2f24:	75 1d       	adc	r23, r5
    2f26:	86 1d       	adc	r24, r6
    2f28:	97 1d       	adc	r25, r7
    2f2a:	0e 94 c4 24 	call	0x4988	; 0x4988 <__udivmodsi4>
    2f2e:	21 50       	subi	r18, 0x01	; 1
    2f30:	31 09       	sbc	r19, r1
    2f32:	41 09       	sbc	r20, r1
    2f34:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    2f36:	83 2f       	mov	r24, r19
    2f38:	8f 70       	andi	r24, 0x0F	; 15
    2f3a:	12 95       	swap	r17
    2f3c:	10 7f       	andi	r17, 0xF0	; 240
    2f3e:	18 2b       	or	r17, r24
    2f40:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    2f42:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	18 c0       	rjmp	.+48     	; 0x2f78 <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	16 c0       	rjmp	.+44     	; 0x2f78 <usart_set_baudrate+0x202>
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	14 c0       	rjmp	.+40     	; 0x2f78 <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    2f50:	d5 01       	movw	r26, r10
    2f52:	c4 01       	movw	r24, r8
    2f54:	88 0f       	add	r24, r24
    2f56:	99 1f       	adc	r25, r25
    2f58:	aa 1f       	adc	r26, r26
    2f5a:	bb 1f       	adc	r27, r27
    2f5c:	88 0f       	add	r24, r24
    2f5e:	99 1f       	adc	r25, r25
    2f60:	aa 1f       	adc	r26, r26
    2f62:	bb 1f       	adc	r27, r27
    2f64:	88 0f       	add	r24, r24
    2f66:	99 1f       	adc	r25, r25
    2f68:	aa 1f       	adc	r26, r26
    2f6a:	bb 1f       	adc	r27, r27
    2f6c:	48 1a       	sub	r4, r24
    2f6e:	59 0a       	sbc	r5, r25
    2f70:	6a 0a       	sbc	r6, r26
    2f72:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    2f74:	19 ef       	ldi	r17, 0xF9	; 249
    2f76:	83 cf       	rjmp	.-250    	; 0x2e7e <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	1f 91       	pop	r17
    2f7e:	0f 91       	pop	r16
    2f80:	ff 90       	pop	r15
    2f82:	ef 90       	pop	r14
    2f84:	df 90       	pop	r13
    2f86:	cf 90       	pop	r12
    2f88:	bf 90       	pop	r11
    2f8a:	af 90       	pop	r10
    2f8c:	9f 90       	pop	r9
    2f8e:	8f 90       	pop	r8
    2f90:	7f 90       	pop	r7
    2f92:	6f 90       	pop	r6
    2f94:	5f 90       	pop	r5
    2f96:	4f 90       	pop	r4
    2f98:	08 95       	ret

00002f9a <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    2f9a:	0f 93       	push	r16
    2f9c:	1f 93       	push	r17
    2f9e:	cf 93       	push	r28
    2fa0:	df 93       	push	r29
    2fa2:	ec 01       	movw	r28, r24
    2fa4:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <usart_init_rs232+0x12>
    2faa:	ee c0       	rjmp	.+476    	; 0x3188 <__stack+0x189>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    2fac:	80 3c       	cpi	r24, 0xC0	; 192
    2fae:	91 05       	cpc	r25, r1
    2fb0:	31 f4       	brne	.+12     	; 0x2fbe <usart_init_rs232+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    2fb2:	60 e1       	ldi	r22, 0x10	; 16
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    2fbc:	e5 c0       	rjmp	.+458    	; 0x3188 <__stack+0x189>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    2fbe:	c1 15       	cp	r28, r1
    2fc0:	84 e0       	ldi	r24, 0x04	; 4
    2fc2:	d8 07       	cpc	r29, r24
    2fc4:	31 f4       	brne	.+12     	; 0x2fd2 <usart_init_rs232+0x38>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2fc6:	64 e0       	ldi	r22, 0x04	; 4
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    2fd0:	db c0       	rjmp	.+438    	; 0x3188 <__stack+0x189>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2fd2:	c0 38       	cpi	r28, 0x80	; 128
    2fd4:	e1 e0       	ldi	r30, 0x01	; 1
    2fd6:	de 07       	cpc	r29, r30
    2fd8:	31 f4       	brne	.+12     	; 0x2fe6 <usart_init_rs232+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2fda:	62 e0       	ldi	r22, 0x02	; 2
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    2fe4:	d1 c0       	rjmp	.+418    	; 0x3188 <__stack+0x189>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    2fe6:	c1 15       	cp	r28, r1
    2fe8:	f1 e0       	ldi	r31, 0x01	; 1
    2fea:	df 07       	cpc	r29, r31
    2fec:	31 f4       	brne	.+12     	; 0x2ffa <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2fee:	61 e0       	ldi	r22, 0x01	; 1
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    2ff8:	c7 c0       	rjmp	.+398    	; 0x3188 <__stack+0x189>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    2ffa:	c0 38       	cpi	r28, 0x80	; 128
    2ffc:	83 e0       	ldi	r24, 0x03	; 3
    2ffe:	d8 07       	cpc	r29, r24
    3000:	31 f4       	brne	.+12     	; 0x300e <__stack+0xf>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    3002:	61 e0       	ldi	r22, 0x01	; 1
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    300c:	bd c0       	rjmp	.+378    	; 0x3188 <__stack+0x189>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    300e:	c1 15       	cp	r28, r1
    3010:	e2 e0       	ldi	r30, 0x02	; 2
    3012:	de 07       	cpc	r29, r30
    3014:	31 f4       	brne	.+12     	; 0x3022 <__stack+0x23>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    3016:	62 e0       	ldi	r22, 0x02	; 2
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    3020:	b3 c0       	rjmp	.+358    	; 0x3188 <__stack+0x189>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    3022:	c0 32       	cpi	r28, 0x20	; 32
    3024:	f3 e0       	ldi	r31, 0x03	; 3
    3026:	df 07       	cpc	r29, r31
    3028:	31 f4       	brne	.+12     	; 0x3036 <__stack+0x37>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    302a:	64 e0       	ldi	r22, 0x04	; 4
    302c:	82 e0       	ldi	r24, 0x02	; 2
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    3034:	a9 c0       	rjmp	.+338    	; 0x3188 <__stack+0x189>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    3036:	c1 15       	cp	r28, r1
    3038:	88 e0       	ldi	r24, 0x08	; 8
    303a:	d8 07       	cpc	r29, r24
    303c:	31 f4       	brne	.+12     	; 0x304a <__stack+0x4b>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    303e:	61 e0       	ldi	r22, 0x01	; 1
    3040:	83 e0       	ldi	r24, 0x03	; 3
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    3048:	9f c0       	rjmp	.+318    	; 0x3188 <__stack+0x189>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    304a:	c1 15       	cp	r28, r1
    304c:	e9 e0       	ldi	r30, 0x09	; 9
    304e:	de 07       	cpc	r29, r30
    3050:	31 f4       	brne	.+12     	; 0x305e <__stack+0x5f>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    3052:	61 e0       	ldi	r22, 0x01	; 1
    3054:	84 e0       	ldi	r24, 0x04	; 4
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    305c:	95 c0       	rjmp	.+298    	; 0x3188 <__stack+0x189>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    305e:	c1 15       	cp	r28, r1
    3060:	fa e0       	ldi	r31, 0x0A	; 10
    3062:	df 07       	cpc	r29, r31
    3064:	31 f4       	brne	.+12     	; 0x3072 <__stack+0x73>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    3066:	61 e0       	ldi	r22, 0x01	; 1
    3068:	85 e0       	ldi	r24, 0x05	; 5
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    3070:	8b c0       	rjmp	.+278    	; 0x3188 <__stack+0x189>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    3072:	c0 34       	cpi	r28, 0x40	; 64
    3074:	88 e0       	ldi	r24, 0x08	; 8
    3076:	d8 07       	cpc	r29, r24
    3078:	31 f4       	brne	.+12     	; 0x3086 <__stack+0x87>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    307a:	62 e0       	ldi	r22, 0x02	; 2
    307c:	83 e0       	ldi	r24, 0x03	; 3
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    3084:	81 c0       	rjmp	.+258    	; 0x3188 <__stack+0x189>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    3086:	c0 34       	cpi	r28, 0x40	; 64
    3088:	e9 e0       	ldi	r30, 0x09	; 9
    308a:	de 07       	cpc	r29, r30
    308c:	31 f4       	brne	.+12     	; 0x309a <__stack+0x9b>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    308e:	62 e0       	ldi	r22, 0x02	; 2
    3090:	84 e0       	ldi	r24, 0x04	; 4
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    3098:	77 c0       	rjmp	.+238    	; 0x3188 <__stack+0x189>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    309a:	c0 39       	cpi	r28, 0x90	; 144
    309c:	f8 e0       	ldi	r31, 0x08	; 8
    309e:	df 07       	cpc	r29, r31
    30a0:	31 f4       	brne	.+12     	; 0x30ae <__stack+0xaf>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    30a2:	64 e0       	ldi	r22, 0x04	; 4
    30a4:	83 e0       	ldi	r24, 0x03	; 3
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    30ac:	6d c0       	rjmp	.+218    	; 0x3188 <__stack+0x189>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    30ae:	c0 39       	cpi	r28, 0x90	; 144
    30b0:	89 e0       	ldi	r24, 0x09	; 9
    30b2:	d8 07       	cpc	r29, r24
    30b4:	31 f4       	brne	.+12     	; 0x30c2 <__stack+0xc3>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    30b6:	64 e0       	ldi	r22, 0x04	; 4
    30b8:	84 e0       	ldi	r24, 0x04	; 4
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    30c0:	63 c0       	rjmp	.+198    	; 0x3188 <__stack+0x189>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    30c2:	c0 39       	cpi	r28, 0x90	; 144
    30c4:	ea e0       	ldi	r30, 0x0A	; 10
    30c6:	de 07       	cpc	r29, r30
    30c8:	31 f4       	brne	.+12     	; 0x30d6 <__stack+0xd7>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    30ca:	64 e0       	ldi	r22, 0x04	; 4
    30cc:	85 e0       	ldi	r24, 0x05	; 5
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    30d4:	59 c0       	rjmp	.+178    	; 0x3188 <__stack+0x189>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    30d6:	c0 3c       	cpi	r28, 0xC0	; 192
    30d8:	f8 e0       	ldi	r31, 0x08	; 8
    30da:	df 07       	cpc	r29, r31
    30dc:	31 f4       	brne	.+12     	; 0x30ea <__stack+0xeb>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    30de:	68 e0       	ldi	r22, 0x08	; 8
    30e0:	83 e0       	ldi	r24, 0x03	; 3
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    30e8:	4f c0       	rjmp	.+158    	; 0x3188 <__stack+0x189>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    30ea:	c0 3c       	cpi	r28, 0xC0	; 192
    30ec:	89 e0       	ldi	r24, 0x09	; 9
    30ee:	d8 07       	cpc	r29, r24
    30f0:	31 f4       	brne	.+12     	; 0x30fe <__stack+0xff>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    30f2:	68 e0       	ldi	r22, 0x08	; 8
    30f4:	84 e0       	ldi	r24, 0x04	; 4
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    30fc:	45 c0       	rjmp	.+138    	; 0x3188 <__stack+0x189>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    30fe:	c0 3a       	cpi	r28, 0xA0	; 160
    3100:	e8 e0       	ldi	r30, 0x08	; 8
    3102:	de 07       	cpc	r29, r30
    3104:	31 f4       	brne	.+12     	; 0x3112 <__stack+0x113>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    3106:	60 e1       	ldi	r22, 0x10	; 16
    3108:	83 e0       	ldi	r24, 0x03	; 3
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    3110:	3b c0       	rjmp	.+118    	; 0x3188 <__stack+0x189>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    3112:	c0 3a       	cpi	r28, 0xA0	; 160
    3114:	f9 e0       	ldi	r31, 0x09	; 9
    3116:	df 07       	cpc	r29, r31
    3118:	31 f4       	brne	.+12     	; 0x3126 <__stack+0x127>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    311a:	60 e1       	ldi	r22, 0x10	; 16
    311c:	84 e0       	ldi	r24, 0x04	; 4
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    3124:	31 c0       	rjmp	.+98     	; 0x3188 <__stack+0x189>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    3126:	c0 3a       	cpi	r28, 0xA0	; 160
    3128:	8a e0       	ldi	r24, 0x0A	; 10
    312a:	d8 07       	cpc	r29, r24
    312c:	31 f4       	brne	.+12     	; 0x313a <__stack+0x13b>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    312e:	60 e1       	ldi	r22, 0x10	; 16
    3130:	85 e0       	ldi	r24, 0x05	; 5
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    3138:	27 c0       	rjmp	.+78     	; 0x3188 <__stack+0x189>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    313a:	c0 3b       	cpi	r28, 0xB0	; 176
    313c:	e8 e0       	ldi	r30, 0x08	; 8
    313e:	de 07       	cpc	r29, r30
    3140:	31 f4       	brne	.+12     	; 0x314e <__stack+0x14f>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    3142:	60 e2       	ldi	r22, 0x20	; 32
    3144:	83 e0       	ldi	r24, 0x03	; 3
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    314c:	1d c0       	rjmp	.+58     	; 0x3188 <__stack+0x189>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    314e:	c0 3b       	cpi	r28, 0xB0	; 176
    3150:	f9 e0       	ldi	r31, 0x09	; 9
    3152:	df 07       	cpc	r29, r31
    3154:	31 f4       	brne	.+12     	; 0x3162 <__stack+0x163>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    3156:	60 e2       	ldi	r22, 0x20	; 32
    3158:	84 e0       	ldi	r24, 0x04	; 4
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    3160:	13 c0       	rjmp	.+38     	; 0x3188 <__stack+0x189>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    3162:	c0 38       	cpi	r28, 0x80	; 128
    3164:	84 e0       	ldi	r24, 0x04	; 4
    3166:	d8 07       	cpc	r29, r24
    3168:	31 f4       	brne	.+12     	; 0x3176 <__stack+0x177>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    316a:	60 e4       	ldi	r22, 0x40	; 64
    316c:	83 e0       	ldi	r24, 0x03	; 3
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
    3174:	09 c0       	rjmp	.+18     	; 0x3188 <__stack+0x189>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    3176:	c0 3a       	cpi	r28, 0xA0	; 160
    3178:	e4 e0       	ldi	r30, 0x04	; 4
    317a:	de 07       	cpc	r29, r30
    317c:	29 f4       	brne	.+10     	; 0x3188 <__stack+0x189>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    317e:	60 e4       	ldi	r22, 0x40	; 64
    3180:	85 e0       	ldi	r24, 0x05	; 5
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	0e 94 13 0c 	call	0x1826	; 0x1826 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    3188:	8d 81       	ldd	r24, Y+5	; 0x05
    318a:	8f 73       	andi	r24, 0x3F	; 63
    318c:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    318e:	f8 01       	movw	r30, r16
    3190:	96 81       	ldd	r25, Z+6	; 0x06
    3192:	84 81       	ldd	r24, Z+4	; 0x04
    3194:	89 2b       	or	r24, r25
    3196:	90 85       	ldd	r25, Z+8	; 0x08
    3198:	99 23       	and	r25, r25
    319a:	11 f0       	breq	.+4      	; 0x31a0 <__stack+0x1a1>
    319c:	98 e0       	ldi	r25, 0x08	; 8
    319e:	01 c0       	rjmp	.+2      	; 0x31a2 <__stack+0x1a3>
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	89 2b       	or	r24, r25
    31a4:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    31a6:	f8 01       	movw	r30, r16
    31a8:	40 81       	ld	r20, Z
    31aa:	51 81       	ldd	r21, Z+1	; 0x01
    31ac:	62 81       	ldd	r22, Z+2	; 0x02
    31ae:	73 81       	ldd	r23, Z+3	; 0x03
    31b0:	00 e0       	ldi	r16, 0x00	; 0
    31b2:	1c e6       	ldi	r17, 0x6C	; 108
    31b4:	2c ed       	ldi	r18, 0xDC	; 220
    31b6:	32 e0       	ldi	r19, 0x02	; 2
    31b8:	ce 01       	movw	r24, r28
    31ba:	dd dd       	rcall	.-1094   	; 0x2d76 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    31bc:	9c 81       	ldd	r25, Y+4	; 0x04
    31be:	98 60       	ori	r25, 0x08	; 8
    31c0:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    31c2:	9c 81       	ldd	r25, Y+4	; 0x04
    31c4:	90 61       	ori	r25, 0x10	; 16
    31c6:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    31c8:	df 91       	pop	r29
    31ca:	cf 91       	pop	r28
    31cc:	1f 91       	pop	r17
    31ce:	0f 91       	pop	r16
    31d0:	08 95       	ret

000031d2 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    31d2:	81 11       	cpse	r24, r1
    31d4:	18 c0       	rjmp	.+48     	; 0x3206 <udd_sleep_mode+0x34>
    31d6:	90 91 78 22 	lds	r25, 0x2278
    31da:	99 23       	and	r25, r25
    31dc:	89 f0       	breq	.+34     	; 0x3200 <udd_sleep_mode+0x2e>
    31de:	9f b7       	in	r25, 0x3f	; 63
    31e0:	f8 94       	cli
    31e2:	e1 e9       	ldi	r30, 0x91	; 145
    31e4:	f3 e2       	ldi	r31, 0x23	; 35
    31e6:	20 81       	ld	r18, Z
    31e8:	21 50       	subi	r18, 0x01	; 1
    31ea:	20 83       	st	Z, r18
    31ec:	9f bf       	out	0x3f, r25	; 63
    31ee:	08 c0       	rjmp	.+16     	; 0x3200 <udd_sleep_mode+0x2e>
    31f0:	9f b7       	in	r25, 0x3f	; 63
    31f2:	f8 94       	cli
    31f4:	e1 e9       	ldi	r30, 0x91	; 145
    31f6:	f3 e2       	ldi	r31, 0x23	; 35
    31f8:	20 81       	ld	r18, Z
    31fa:	2f 5f       	subi	r18, 0xFF	; 255
    31fc:	20 83       	st	Z, r18
    31fe:	9f bf       	out	0x3f, r25	; 63
    3200:	80 93 78 22 	sts	0x2278, r24
    3204:	08 95       	ret
    3206:	90 91 78 22 	lds	r25, 0x2278
    320a:	99 23       	and	r25, r25
    320c:	89 f3       	breq	.-30     	; 0x31f0 <udd_sleep_mode+0x1e>
    320e:	f8 cf       	rjmp	.-16     	; 0x3200 <udd_sleep_mode+0x2e>

00003210 <udd_ep_get_ctrl>:
    3210:	28 2f       	mov	r18, r24
    3212:	2f 70       	andi	r18, 0x0F	; 15
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	22 0f       	add	r18, r18
    3218:	33 1f       	adc	r19, r19
    321a:	99 27       	eor	r25, r25
    321c:	87 fd       	sbrc	r24, 7
    321e:	90 95       	com	r25
    3220:	88 27       	eor	r24, r24
    3222:	99 0f       	add	r25, r25
    3224:	88 1f       	adc	r24, r24
    3226:	99 27       	eor	r25, r25
    3228:	28 0f       	add	r18, r24
    322a:	39 1f       	adc	r19, r25
    322c:	22 0f       	add	r18, r18
    322e:	33 1f       	adc	r19, r19
    3230:	22 0f       	add	r18, r18
    3232:	33 1f       	adc	r19, r19
    3234:	22 0f       	add	r18, r18
    3236:	33 1f       	adc	r19, r19
    3238:	20 5e       	subi	r18, 0xE0	; 224
    323a:	3d 4d       	sbci	r19, 0xDD	; 221
    323c:	82 2f       	mov	r24, r18
    323e:	93 2f       	mov	r25, r19
    3240:	08 95       	ret

00003242 <udd_ep_init>:
    3242:	0f 93       	push	r16
    3244:	1f 93       	push	r17
    3246:	cf 93       	push	r28
    3248:	df 93       	push	r29
    324a:	63 70       	andi	r22, 0x03	; 3
    324c:	61 30       	cpi	r22, 0x01	; 1
    324e:	39 f0       	breq	.+14     	; 0x325e <udd_ep_init+0x1c>
    3250:	18 f4       	brcc	.+6      	; 0x3258 <udd_ep_init+0x16>
    3252:	c0 e4       	ldi	r28, 0x40	; 64
    3254:	d0 e0       	ldi	r29, 0x00	; 0
    3256:	05 c0       	rjmp	.+10     	; 0x3262 <udd_ep_init+0x20>
    3258:	c0 e8       	ldi	r28, 0x80	; 128
    325a:	d0 e0       	ldi	r29, 0x00	; 0
    325c:	02 c0       	rjmp	.+4      	; 0x3262 <udd_ep_init+0x20>
    325e:	c0 ec       	ldi	r28, 0xC0	; 192
    3260:	d0 e0       	ldi	r29, 0x00	; 0
    3262:	40 38       	cpi	r20, 0x80	; 128
    3264:	51 05       	cpc	r21, r1
    3266:	f9 f0       	breq	.+62     	; 0x32a6 <udd_ep_init+0x64>
    3268:	50 f4       	brcc	.+20     	; 0x327e <udd_ep_init+0x3c>
    326a:	40 32       	cpi	r20, 0x20	; 32
    326c:	51 05       	cpc	r21, r1
    326e:	a9 f0       	breq	.+42     	; 0x329a <udd_ep_init+0x58>
    3270:	40 34       	cpi	r20, 0x40	; 64
    3272:	51 05       	cpc	r21, r1
    3274:	a9 f0       	breq	.+42     	; 0x32a0 <udd_ep_init+0x5e>
    3276:	40 31       	cpi	r20, 0x10	; 16
    3278:	51 05       	cpc	r21, r1
    327a:	61 f4       	brne	.+24     	; 0x3294 <udd_ep_init+0x52>
    327c:	20 c0       	rjmp	.+64     	; 0x32be <udd_ep_init+0x7c>
    327e:	41 15       	cp	r20, r1
    3280:	92 e0       	ldi	r25, 0x02	; 2
    3282:	59 07       	cpc	r21, r25
    3284:	b1 f0       	breq	.+44     	; 0x32b2 <udd_ep_init+0x70>
    3286:	4f 3f       	cpi	r20, 0xFF	; 255
    3288:	93 e0       	ldi	r25, 0x03	; 3
    328a:	59 07       	cpc	r21, r25
    328c:	a9 f0       	breq	.+42     	; 0x32b8 <udd_ep_init+0x76>
    328e:	41 15       	cp	r20, r1
    3290:	51 40       	sbci	r21, 0x01	; 1
    3292:	61 f0       	breq	.+24     	; 0x32ac <udd_ep_init+0x6a>
    3294:	00 e0       	ldi	r16, 0x00	; 0
    3296:	10 e0       	ldi	r17, 0x00	; 0
    3298:	14 c0       	rjmp	.+40     	; 0x32c2 <udd_ep_init+0x80>
    329a:	02 e0       	ldi	r16, 0x02	; 2
    329c:	10 e0       	ldi	r17, 0x00	; 0
    329e:	11 c0       	rjmp	.+34     	; 0x32c2 <udd_ep_init+0x80>
    32a0:	03 e0       	ldi	r16, 0x03	; 3
    32a2:	10 e0       	ldi	r17, 0x00	; 0
    32a4:	0e c0       	rjmp	.+28     	; 0x32c2 <udd_ep_init+0x80>
    32a6:	04 e0       	ldi	r16, 0x04	; 4
    32a8:	10 e0       	ldi	r17, 0x00	; 0
    32aa:	0b c0       	rjmp	.+22     	; 0x32c2 <udd_ep_init+0x80>
    32ac:	05 e0       	ldi	r16, 0x05	; 5
    32ae:	10 e0       	ldi	r17, 0x00	; 0
    32b0:	08 c0       	rjmp	.+16     	; 0x32c2 <udd_ep_init+0x80>
    32b2:	06 e0       	ldi	r16, 0x06	; 6
    32b4:	10 e0       	ldi	r17, 0x00	; 0
    32b6:	05 c0       	rjmp	.+10     	; 0x32c2 <udd_ep_init+0x80>
    32b8:	07 e0       	ldi	r16, 0x07	; 7
    32ba:	10 e0       	ldi	r17, 0x00	; 0
    32bc:	02 c0       	rjmp	.+4      	; 0x32c2 <udd_ep_init+0x80>
    32be:	01 e0       	ldi	r16, 0x01	; 1
    32c0:	10 e0       	ldi	r17, 0x00	; 0
    32c2:	a6 df       	rcall	.-180    	; 0x3210 <udd_ep_get_ctrl>
    32c4:	fc 01       	movw	r30, r24
    32c6:	11 82       	std	Z+1, r1	; 0x01
    32c8:	86 e0       	ldi	r24, 0x06	; 6
    32ca:	80 83       	st	Z, r24
    32cc:	c0 2b       	or	r28, r16
    32ce:	c1 83       	std	Z+1, r28	; 0x01
    32d0:	df 91       	pop	r29
    32d2:	cf 91       	pop	r28
    32d4:	1f 91       	pop	r17
    32d6:	0f 91       	pop	r16
    32d8:	08 95       	ret

000032da <udd_ctrl_init>:
    32da:	0f 93       	push	r16
    32dc:	e8 ec       	ldi	r30, 0xC8	; 200
    32de:	f4 e0       	ldi	r31, 0x04	; 4
    32e0:	80 81       	ld	r24, Z
    32e2:	8f 7d       	andi	r24, 0xDF	; 223
    32e4:	80 83       	st	Z, r24
    32e6:	80 81       	ld	r24, Z
    32e8:	8f 7d       	andi	r24, 0xDF	; 223
    32ea:	80 83       	st	Z, r24
    32ec:	e8 e2       	ldi	r30, 0x28	; 40
    32ee:	f2 e2       	ldi	r31, 0x22	; 34
    32f0:	02 e0       	ldi	r16, 0x02	; 2
    32f2:	05 93       	las	Z, r16
    32f4:	10 92 2a 22 	sts	0x222A, r1
    32f8:	10 92 2b 22 	sts	0x222B, r1
    32fc:	00 e2       	ldi	r16, 0x20	; 32
    32fe:	06 93       	lac	Z, r16
    3300:	00 e4       	ldi	r16, 0x40	; 64
    3302:	06 93       	lac	Z, r16
    3304:	e0 e2       	ldi	r30, 0x20	; 32
    3306:	f2 e2       	ldi	r31, 0x22	; 34
    3308:	00 e2       	ldi	r16, 0x20	; 32
    330a:	06 93       	lac	Z, r16
    330c:	00 e4       	ldi	r16, 0x40	; 64
    330e:	06 93       	lac	Z, r16
    3310:	10 92 a2 23 	sts	0x23A2, r1
    3314:	10 92 a3 23 	sts	0x23A3, r1
    3318:	10 92 a4 23 	sts	0x23A4, r1
    331c:	10 92 a5 23 	sts	0x23A5, r1
    3320:	10 92 a0 23 	sts	0x23A0, r1
    3324:	10 92 a1 23 	sts	0x23A1, r1
    3328:	10 92 39 23 	sts	0x2339, r1
    332c:	10 92 3a 23 	sts	0x233A, r1
    3330:	0f 91       	pop	r16
    3332:	08 95       	ret

00003334 <udd_ctrl_stall_data>:
    3334:	0f 93       	push	r16
    3336:	85 e0       	ldi	r24, 0x05	; 5
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	80 93 39 23 	sts	0x2339, r24
    333e:	90 93 3a 23 	sts	0x233A, r25
    3342:	e9 e2       	ldi	r30, 0x29	; 41
    3344:	f2 e2       	ldi	r31, 0x22	; 34
    3346:	04 e0       	ldi	r16, 0x04	; 4
    3348:	05 93       	las	Z, r16
    334a:	e1 e2       	ldi	r30, 0x21	; 33
    334c:	f2 e2       	ldi	r31, 0x22	; 34
    334e:	04 e0       	ldi	r16, 0x04	; 4
    3350:	05 93       	las	Z, r16
    3352:	0f 91       	pop	r16
    3354:	08 95       	ret

00003356 <udd_ctrl_send_zlp_in>:
    3356:	0f 93       	push	r16
    3358:	83 e0       	ldi	r24, 0x03	; 3
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	80 93 39 23 	sts	0x2339, r24
    3360:	90 93 3a 23 	sts	0x233A, r25
    3364:	10 92 2a 22 	sts	0x222A, r1
    3368:	10 92 2b 22 	sts	0x222B, r1
    336c:	e8 e2       	ldi	r30, 0x28	; 40
    336e:	f2 e2       	ldi	r31, 0x22	; 34
    3370:	02 e0       	ldi	r16, 0x02	; 2
    3372:	06 93       	lac	Z, r16
    3374:	0f 91       	pop	r16
    3376:	08 95       	ret

00003378 <udd_ctrl_send_zlp_out>:
    3378:	0f 93       	push	r16
    337a:	84 e0       	ldi	r24, 0x04	; 4
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	80 93 39 23 	sts	0x2339, r24
    3382:	90 93 3a 23 	sts	0x233A, r25
    3386:	e0 e2       	ldi	r30, 0x20	; 32
    3388:	f2 e2       	ldi	r31, 0x22	; 34
    338a:	02 e0       	ldi	r16, 0x02	; 2
    338c:	06 93       	lac	Z, r16
    338e:	0f 91       	pop	r16
    3390:	08 95       	ret

00003392 <udd_ctrl_endofrequest>:
    3392:	e0 91 a2 23 	lds	r30, 0x23A2
    3396:	f0 91 a3 23 	lds	r31, 0x23A3
    339a:	30 97       	sbiw	r30, 0x00	; 0
    339c:	09 f0       	breq	.+2      	; 0x33a0 <udd_ctrl_endofrequest+0xe>
    339e:	09 95       	icall
    33a0:	08 95       	ret

000033a2 <udd_ctrl_in_sent>:
    33a2:	0f 93       	push	r16
    33a4:	cf 93       	push	r28
    33a6:	df 93       	push	r29
    33a8:	80 91 39 23 	lds	r24, 0x2339
    33ac:	90 91 3a 23 	lds	r25, 0x233A
    33b0:	03 97       	sbiw	r24, 0x03	; 3
    33b2:	19 f4       	brne	.+6      	; 0x33ba <udd_ctrl_in_sent+0x18>
    33b4:	ee df       	rcall	.-36     	; 0x3392 <udd_ctrl_endofrequest>
    33b6:	91 df       	rcall	.-222    	; 0x32da <udd_ctrl_init>
    33b8:	5a c0       	rjmp	.+180    	; 0x346e <udd_ctrl_in_sent+0xcc>
    33ba:	80 91 3d 23 	lds	r24, 0x233D
    33be:	90 91 3e 23 	lds	r25, 0x233E
    33c2:	c0 91 a0 23 	lds	r28, 0x23A0
    33c6:	d0 91 a1 23 	lds	r29, 0x23A1
    33ca:	c8 1b       	sub	r28, r24
    33cc:	d9 0b       	sbc	r29, r25
    33ce:	41 f5       	brne	.+80     	; 0x3420 <udd_ctrl_in_sent+0x7e>
    33d0:	20 91 3b 23 	lds	r18, 0x233B
    33d4:	30 91 3c 23 	lds	r19, 0x233C
    33d8:	82 0f       	add	r24, r18
    33da:	93 1f       	adc	r25, r19
    33dc:	80 93 3b 23 	sts	0x233B, r24
    33e0:	90 93 3c 23 	sts	0x233C, r25
    33e4:	20 91 9c 23 	lds	r18, 0x239C
    33e8:	30 91 9d 23 	lds	r19, 0x239D
    33ec:	82 17       	cp	r24, r18
    33ee:	93 07       	cpc	r25, r19
    33f0:	21 f0       	breq	.+8      	; 0x33fa <udd_ctrl_in_sent+0x58>
    33f2:	80 91 3f 23 	lds	r24, 0x233F
    33f6:	88 23       	and	r24, r24
    33f8:	11 f0       	breq	.+4      	; 0x33fe <udd_ctrl_in_sent+0x5c>
    33fa:	be df       	rcall	.-132    	; 0x3378 <udd_ctrl_send_zlp_out>
    33fc:	38 c0       	rjmp	.+112    	; 0x346e <udd_ctrl_in_sent+0xcc>
    33fe:	e0 91 a4 23 	lds	r30, 0x23A4
    3402:	f0 91 a5 23 	lds	r31, 0x23A5
    3406:	30 97       	sbiw	r30, 0x00	; 0
    3408:	99 f0       	breq	.+38     	; 0x3430 <udd_ctrl_in_sent+0x8e>
    340a:	09 95       	icall
    340c:	88 23       	and	r24, r24
    340e:	81 f0       	breq	.+32     	; 0x3430 <udd_ctrl_in_sent+0x8e>
    3410:	10 92 3d 23 	sts	0x233D, r1
    3414:	10 92 3e 23 	sts	0x233E, r1
    3418:	c0 91 a0 23 	lds	r28, 0x23A0
    341c:	d0 91 a1 23 	lds	r29, 0x23A1
    3420:	c0 34       	cpi	r28, 0x40	; 64
    3422:	d1 05       	cpc	r29, r1
    3424:	28 f0       	brcs	.+10     	; 0x3430 <udd_ctrl_in_sent+0x8e>
    3426:	10 92 3f 23 	sts	0x233F, r1
    342a:	c0 e4       	ldi	r28, 0x40	; 64
    342c:	d0 e0       	ldi	r29, 0x00	; 0
    342e:	03 c0       	rjmp	.+6      	; 0x3436 <udd_ctrl_in_sent+0x94>
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	80 93 3f 23 	sts	0x233F, r24
    3436:	c0 93 2a 22 	sts	0x222A, r28
    343a:	d0 93 2b 22 	sts	0x222B, r29
    343e:	80 91 3d 23 	lds	r24, 0x233D
    3442:	90 91 3e 23 	lds	r25, 0x233E
    3446:	20 91 9e 23 	lds	r18, 0x239E
    344a:	30 91 9f 23 	lds	r19, 0x239F
    344e:	28 0f       	add	r18, r24
    3450:	39 1f       	adc	r19, r25
    3452:	20 93 2c 22 	sts	0x222C, r18
    3456:	30 93 2d 22 	sts	0x222D, r19
    345a:	c8 0f       	add	r28, r24
    345c:	d9 1f       	adc	r29, r25
    345e:	c0 93 3d 23 	sts	0x233D, r28
    3462:	d0 93 3e 23 	sts	0x233E, r29
    3466:	e8 e2       	ldi	r30, 0x28	; 40
    3468:	f2 e2       	ldi	r31, 0x22	; 34
    346a:	02 e0       	ldi	r16, 0x02	; 2
    346c:	06 93       	lac	Z, r16
    346e:	df 91       	pop	r29
    3470:	cf 91       	pop	r28
    3472:	0f 91       	pop	r16
    3474:	08 95       	ret

00003476 <udd_ep_get_size>:
    3476:	fc 01       	movw	r30, r24
    3478:	81 81       	ldd	r24, Z+1	; 0x01
    347a:	87 70       	andi	r24, 0x07	; 7
    347c:	84 30       	cpi	r24, 0x04	; 4
    347e:	a9 f0       	breq	.+42     	; 0x34aa <udd_ep_get_size+0x34>
    3480:	30 f4       	brcc	.+12     	; 0x348e <udd_ep_get_size+0x18>
    3482:	82 30       	cpi	r24, 0x02	; 2
    3484:	61 f0       	breq	.+24     	; 0x349e <udd_ep_get_size+0x28>
    3486:	70 f4       	brcc	.+28     	; 0x34a4 <udd_ep_get_size+0x2e>
    3488:	81 30       	cpi	r24, 0x01	; 1
    348a:	31 f4       	brne	.+12     	; 0x3498 <udd_ep_get_size+0x22>
    348c:	1a c0       	rjmp	.+52     	; 0x34c2 <udd_ep_get_size+0x4c>
    348e:	86 30       	cpi	r24, 0x06	; 6
    3490:	91 f0       	breq	.+36     	; 0x34b6 <udd_ep_get_size+0x40>
    3492:	70 f0       	brcs	.+28     	; 0x34b0 <udd_ep_get_size+0x3a>
    3494:	87 30       	cpi	r24, 0x07	; 7
    3496:	91 f0       	breq	.+36     	; 0x34bc <udd_ep_get_size+0x46>
    3498:	28 e0       	ldi	r18, 0x08	; 8
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	14 c0       	rjmp	.+40     	; 0x34c6 <udd_ep_get_size+0x50>
    349e:	20 e2       	ldi	r18, 0x20	; 32
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	11 c0       	rjmp	.+34     	; 0x34c6 <udd_ep_get_size+0x50>
    34a4:	20 e4       	ldi	r18, 0x40	; 64
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	0e c0       	rjmp	.+28     	; 0x34c6 <udd_ep_get_size+0x50>
    34aa:	20 e8       	ldi	r18, 0x80	; 128
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	0b c0       	rjmp	.+22     	; 0x34c6 <udd_ep_get_size+0x50>
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	31 e0       	ldi	r19, 0x01	; 1
    34b4:	08 c0       	rjmp	.+16     	; 0x34c6 <udd_ep_get_size+0x50>
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	32 e0       	ldi	r19, 0x02	; 2
    34ba:	05 c0       	rjmp	.+10     	; 0x34c6 <udd_ep_get_size+0x50>
    34bc:	2f ef       	ldi	r18, 0xFF	; 255
    34be:	33 e0       	ldi	r19, 0x03	; 3
    34c0:	02 c0       	rjmp	.+4      	; 0x34c6 <udd_ep_get_size+0x50>
    34c2:	20 e1       	ldi	r18, 0x10	; 16
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	82 2f       	mov	r24, r18
    34c8:	93 2f       	mov	r25, r19
    34ca:	08 95       	ret

000034cc <udd_ep_get_job>:
    34cc:	28 2f       	mov	r18, r24
    34ce:	2f 70       	andi	r18, 0x0F	; 15
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	22 0f       	add	r18, r18
    34d4:	33 1f       	adc	r19, r19
    34d6:	99 27       	eor	r25, r25
    34d8:	87 fd       	sbrc	r24, 7
    34da:	90 95       	com	r25
    34dc:	88 27       	eor	r24, r24
    34de:	99 0f       	add	r25, r25
    34e0:	88 1f       	adc	r24, r24
    34e2:	99 27       	eor	r25, r25
    34e4:	28 0f       	add	r18, r24
    34e6:	39 1f       	adc	r19, r25
    34e8:	22 50       	subi	r18, 0x02	; 2
    34ea:	31 09       	sbc	r19, r1
    34ec:	c9 01       	movw	r24, r18
    34ee:	88 0f       	add	r24, r24
    34f0:	99 1f       	adc	r25, r25
    34f2:	88 0f       	add	r24, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	88 0f       	add	r24, r24
    34f8:	99 1f       	adc	r25, r25
    34fa:	28 0f       	add	r18, r24
    34fc:	39 1f       	adc	r19, r25
    34fe:	2c 5a       	subi	r18, 0xAC	; 172
    3500:	3d 4d       	sbci	r19, 0xDD	; 221
    3502:	82 2f       	mov	r24, r18
    3504:	93 2f       	mov	r25, r19
    3506:	08 95       	ret

00003508 <udd_ctrl_interrupt_tc_setup>:
    3508:	0f 93       	push	r16
    350a:	80 91 cc 04 	lds	r24, 0x04CC
    350e:	80 ff       	sbrs	r24, 0
    3510:	6d c0       	rjmp	.+218    	; 0x35ec <udd_ctrl_interrupt_tc_setup+0xe4>
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	80 93 cc 04 	sts	0x04CC, r24
    3518:	e0 e2       	ldi	r30, 0x20	; 32
    351a:	f2 e2       	ldi	r31, 0x22	; 34
    351c:	00 e8       	ldi	r16, 0x80	; 128
    351e:	06 93       	lac	Z, r16
    3520:	e8 e2       	ldi	r30, 0x28	; 40
    3522:	f2 e2       	ldi	r31, 0x22	; 34
    3524:	00 e8       	ldi	r16, 0x80	; 128
    3526:	06 93       	lac	Z, r16
    3528:	80 93 ca 04 	sts	0x04CA, r24
    352c:	e0 e2       	ldi	r30, 0x20	; 32
    352e:	f2 e2       	ldi	r31, 0x22	; 34
    3530:	00 e1       	ldi	r16, 0x10	; 16
    3532:	06 93       	lac	Z, r16
    3534:	80 91 39 23 	lds	r24, 0x2339
    3538:	90 91 3a 23 	lds	r25, 0x233A
    353c:	00 97       	sbiw	r24, 0x00	; 0
    353e:	29 f0       	breq	.+10     	; 0x354a <udd_ctrl_interrupt_tc_setup+0x42>
    3540:	03 97       	sbiw	r24, 0x03	; 3
    3542:	02 97       	sbiw	r24, 0x02	; 2
    3544:	08 f4       	brcc	.+2      	; 0x3548 <udd_ctrl_interrupt_tc_setup+0x40>
    3546:	25 df       	rcall	.-438    	; 0x3392 <udd_ctrl_endofrequest>
    3548:	c8 de       	rcall	.-624    	; 0x32da <udd_ctrl_init>
    354a:	80 91 22 22 	lds	r24, 0x2222
    354e:	90 91 23 22 	lds	r25, 0x2223
    3552:	08 97       	sbiw	r24, 0x08	; 8
    3554:	09 f0       	breq	.+2      	; 0x3558 <udd_ctrl_interrupt_tc_setup+0x50>
    3556:	4c c0       	rjmp	.+152    	; 0x35f0 <udd_ctrl_interrupt_tc_setup+0xe8>
    3558:	88 e0       	ldi	r24, 0x08	; 8
    355a:	e9 ef       	ldi	r30, 0xF9	; 249
    355c:	f2 e2       	ldi	r31, 0x22	; 34
    355e:	a6 e9       	ldi	r26, 0x96	; 150
    3560:	b3 e2       	ldi	r27, 0x23	; 35
    3562:	01 90       	ld	r0, Z+
    3564:	0d 92       	st	X+, r0
    3566:	8a 95       	dec	r24
    3568:	e1 f7       	brne	.-8      	; 0x3562 <udd_ctrl_interrupt_tc_setup+0x5a>
    356a:	e8 ec       	ldi	r30, 0xC8	; 200
    356c:	f4 e0       	ldi	r31, 0x04	; 4
    356e:	80 81       	ld	r24, Z
    3570:	80 62       	ori	r24, 0x20	; 32
    3572:	80 83       	st	Z, r24
    3574:	80 81       	ld	r24, Z
    3576:	80 62       	ori	r24, 0x20	; 32
    3578:	80 83       	st	Z, r24
    357a:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <udc_process_setup>
    357e:	81 11       	cpse	r24, r1
    3580:	03 c0       	rjmp	.+6      	; 0x3588 <udd_ctrl_interrupt_tc_setup+0x80>
    3582:	d8 de       	rcall	.-592    	; 0x3334 <udd_ctrl_stall_data>
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	35 c0       	rjmp	.+106    	; 0x35f2 <udd_ctrl_interrupt_tc_setup+0xea>
    3588:	80 91 96 23 	lds	r24, 0x2396
    358c:	88 23       	and	r24, r24
    358e:	8c f4       	brge	.+34     	; 0x35b2 <udd_ctrl_interrupt_tc_setup+0xaa>
    3590:	10 92 3b 23 	sts	0x233B, r1
    3594:	10 92 3c 23 	sts	0x233C, r1
    3598:	10 92 3d 23 	sts	0x233D, r1
    359c:	10 92 3e 23 	sts	0x233E, r1
    35a0:	82 e0       	ldi	r24, 0x02	; 2
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	80 93 39 23 	sts	0x2339, r24
    35a8:	90 93 3a 23 	sts	0x233A, r25
    35ac:	fa de       	rcall	.-524    	; 0x33a2 <udd_ctrl_in_sent>
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	20 c0       	rjmp	.+64     	; 0x35f2 <udd_ctrl_interrupt_tc_setup+0xea>
    35b2:	80 91 9c 23 	lds	r24, 0x239C
    35b6:	90 91 9d 23 	lds	r25, 0x239D
    35ba:	89 2b       	or	r24, r25
    35bc:	19 f4       	brne	.+6      	; 0x35c4 <udd_ctrl_interrupt_tc_setup+0xbc>
    35be:	cb de       	rcall	.-618    	; 0x3356 <udd_ctrl_send_zlp_in>
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	17 c0       	rjmp	.+46     	; 0x35f2 <udd_ctrl_interrupt_tc_setup+0xea>
    35c4:	10 92 3b 23 	sts	0x233B, r1
    35c8:	10 92 3c 23 	sts	0x233C, r1
    35cc:	10 92 3d 23 	sts	0x233D, r1
    35d0:	10 92 3e 23 	sts	0x233E, r1
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	80 93 39 23 	sts	0x2339, r24
    35dc:	90 93 3a 23 	sts	0x233A, r25
    35e0:	e0 e2       	ldi	r30, 0x20	; 32
    35e2:	f2 e2       	ldi	r31, 0x22	; 34
    35e4:	02 e0       	ldi	r16, 0x02	; 2
    35e6:	06 93       	lac	Z, r16
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	03 c0       	rjmp	.+6      	; 0x35f2 <udd_ctrl_interrupt_tc_setup+0xea>
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	01 c0       	rjmp	.+2      	; 0x35f2 <udd_ctrl_interrupt_tc_setup+0xea>
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	0f 91       	pop	r16
    35f4:	08 95       	ret

000035f6 <udd_ep_trans_complet>:
    35f6:	bf 92       	push	r11
    35f8:	cf 92       	push	r12
    35fa:	df 92       	push	r13
    35fc:	ef 92       	push	r14
    35fe:	ff 92       	push	r15
    3600:	0f 93       	push	r16
    3602:	1f 93       	push	r17
    3604:	cf 93       	push	r28
    3606:	df 93       	push	r29
    3608:	b8 2e       	mov	r11, r24
    360a:	60 df       	rcall	.-320    	; 0x34cc <udd_ep_get_job>
    360c:	ec 01       	movw	r28, r24
    360e:	8b 2d       	mov	r24, r11
    3610:	ff dd       	rcall	.-1026   	; 0x3210 <udd_ep_get_ctrl>
    3612:	7c 01       	movw	r14, r24
    3614:	30 df       	rcall	.-416    	; 0x3476 <udd_ep_get_size>
    3616:	6c 01       	movw	r12, r24
    3618:	bb 20       	and	r11, r11
    361a:	0c f0       	brlt	.+2      	; 0x361e <udd_ep_trans_complet+0x28>
    361c:	5f c0       	rjmp	.+190    	; 0x36dc <udd_ep_trans_complet+0xe6>
    361e:	d7 01       	movw	r26, r14
    3620:	16 96       	adiw	r26, 0x06	; 6
    3622:	2d 91       	ld	r18, X+
    3624:	3c 91       	ld	r19, X
    3626:	17 97       	sbiw	r26, 0x07	; 7
    3628:	8d 81       	ldd	r24, Y+5	; 0x05
    362a:	9e 81       	ldd	r25, Y+6	; 0x06
    362c:	28 0f       	add	r18, r24
    362e:	39 1f       	adc	r19, r25
    3630:	2d 83       	std	Y+5, r18	; 0x05
    3632:	3e 83       	std	Y+6, r19	; 0x06
    3634:	8b 81       	ldd	r24, Y+3	; 0x03
    3636:	9c 81       	ldd	r25, Y+4	; 0x04
    3638:	28 17       	cp	r18, r24
    363a:	39 07       	cpc	r19, r25
    363c:	09 f4       	brne	.+2      	; 0x3640 <udd_ep_trans_complet+0x4a>
    363e:	3c c0       	rjmp	.+120    	; 0x36b8 <udd_ep_trans_complet+0xc2>
    3640:	fc 01       	movw	r30, r24
    3642:	e2 1b       	sub	r30, r18
    3644:	f3 0b       	sbc	r31, r19
    3646:	9f 01       	movw	r18, r30
    3648:	21 15       	cp	r18, r1
    364a:	f4 e0       	ldi	r31, 0x04	; 4
    364c:	3f 07       	cpc	r19, r31
    364e:	40 f0       	brcs	.+16     	; 0x3660 <udd_ep_trans_complet+0x6a>
    3650:	2f ef       	ldi	r18, 0xFF	; 255
    3652:	33 e0       	ldi	r19, 0x03	; 3
    3654:	c9 01       	movw	r24, r18
    3656:	b6 01       	movw	r22, r12
    3658:	0e 94 b0 24 	call	0x4960	; 0x4960 <__udivmodhi4>
    365c:	28 1b       	sub	r18, r24
    365e:	39 0b       	sbc	r19, r25
    3660:	88 81       	ld	r24, Y
    3662:	81 ff       	sbrs	r24, 1
    3664:	0c c0       	rjmp	.+24     	; 0x367e <udd_ep_trans_complet+0x88>
    3666:	c9 01       	movw	r24, r18
    3668:	b6 01       	movw	r22, r12
    366a:	0e 94 b0 24 	call	0x4960	; 0x4960 <__udivmodhi4>
    366e:	41 e0       	ldi	r20, 0x01	; 1
    3670:	50 e0       	ldi	r21, 0x00	; 0
    3672:	89 2b       	or	r24, r25
    3674:	11 f0       	breq	.+4      	; 0x367a <udd_ep_trans_complet+0x84>
    3676:	40 e0       	ldi	r20, 0x00	; 0
    3678:	50 e0       	ldi	r21, 0x00	; 0
    367a:	ca 01       	movw	r24, r20
    367c:	02 c0       	rjmp	.+4      	; 0x3682 <udd_ep_trans_complet+0x8c>
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	98 81       	ld	r25, Y
    3684:	80 fb       	bst	r24, 0
    3686:	91 f9       	bld	r25, 1
    3688:	98 83       	st	Y, r25
    368a:	d7 01       	movw	r26, r14
    368c:	16 96       	adiw	r26, 0x06	; 6
    368e:	1d 92       	st	X+, r1
    3690:	1c 92       	st	X, r1
    3692:	17 97       	sbiw	r26, 0x07	; 7
    3694:	12 96       	adiw	r26, 0x02	; 2
    3696:	2d 93       	st	X+, r18
    3698:	3c 93       	st	X, r19
    369a:	13 97       	sbiw	r26, 0x03	; 3
    369c:	29 81       	ldd	r18, Y+1	; 0x01
    369e:	3a 81       	ldd	r19, Y+2	; 0x02
    36a0:	8d 81       	ldd	r24, Y+5	; 0x05
    36a2:	9e 81       	ldd	r25, Y+6	; 0x06
    36a4:	82 0f       	add	r24, r18
    36a6:	93 1f       	adc	r25, r19
    36a8:	14 96       	adiw	r26, 0x04	; 4
    36aa:	8d 93       	st	X+, r24
    36ac:	9c 93       	st	X, r25
    36ae:	15 97       	sbiw	r26, 0x05	; 5
    36b0:	f7 01       	movw	r30, r14
    36b2:	02 e0       	ldi	r16, 0x02	; 2
    36b4:	06 93       	lac	Z, r16
    36b6:	9d c0       	rjmp	.+314    	; 0x37f2 <udd_ep_trans_complet+0x1fc>
    36b8:	88 81       	ld	r24, Y
    36ba:	81 ff       	sbrs	r24, 1
    36bc:	8b c0       	rjmp	.+278    	; 0x37d4 <udd_ep_trans_complet+0x1de>
    36be:	8d 7f       	andi	r24, 0xFD	; 253
    36c0:	88 83       	st	Y, r24
    36c2:	d7 01       	movw	r26, r14
    36c4:	16 96       	adiw	r26, 0x06	; 6
    36c6:	1d 92       	st	X+, r1
    36c8:	1c 92       	st	X, r1
    36ca:	17 97       	sbiw	r26, 0x07	; 7
    36cc:	12 96       	adiw	r26, 0x02	; 2
    36ce:	1d 92       	st	X+, r1
    36d0:	1c 92       	st	X, r1
    36d2:	13 97       	sbiw	r26, 0x03	; 3
    36d4:	f7 01       	movw	r30, r14
    36d6:	02 e0       	ldi	r16, 0x02	; 2
    36d8:	06 93       	lac	Z, r16
    36da:	8b c0       	rjmp	.+278    	; 0x37f2 <udd_ep_trans_complet+0x1fc>
    36dc:	d7 01       	movw	r26, r14
    36de:	12 96       	adiw	r26, 0x02	; 2
    36e0:	0d 91       	ld	r16, X+
    36e2:	1c 91       	ld	r17, X
    36e4:	13 97       	sbiw	r26, 0x03	; 3
    36e6:	88 81       	ld	r24, Y
    36e8:	82 ff       	sbrs	r24, 2
    36ea:	19 c0       	rjmp	.+50     	; 0x371e <udd_ep_trans_complet+0x128>
    36ec:	29 81       	ldd	r18, Y+1	; 0x01
    36ee:	3a 81       	ldd	r19, Y+2	; 0x02
    36f0:	8d 81       	ldd	r24, Y+5	; 0x05
    36f2:	9e 81       	ldd	r25, Y+6	; 0x06
    36f4:	28 0f       	add	r18, r24
    36f6:	39 1f       	adc	r19, r25
    36f8:	8b 81       	ldd	r24, Y+3	; 0x03
    36fa:	9c 81       	ldd	r25, Y+4	; 0x04
    36fc:	b6 01       	movw	r22, r12
    36fe:	0e 94 b0 24 	call	0x4960	; 0x4960 <__udivmodhi4>
    3702:	b0 e4       	ldi	r27, 0x40	; 64
    3704:	bb 9e       	mul	r11, r27
    3706:	f0 01       	movw	r30, r0
    3708:	11 24       	eor	r1, r1
    370a:	e7 5c       	subi	r30, 0xC7	; 199
    370c:	fd 4d       	sbci	r31, 0xDD	; 221
    370e:	48 2f       	mov	r20, r24
    3710:	59 2f       	mov	r21, r25
    3712:	6e 2f       	mov	r22, r30
    3714:	7f 2f       	mov	r23, r31
    3716:	82 2f       	mov	r24, r18
    3718:	93 2f       	mov	r25, r19
    371a:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <memcpy>
    371e:	2d 81       	ldd	r18, Y+5	; 0x05
    3720:	3e 81       	ldd	r19, Y+6	; 0x06
    3722:	20 0f       	add	r18, r16
    3724:	31 1f       	adc	r19, r17
    3726:	2d 83       	std	Y+5, r18	; 0x05
    3728:	3e 83       	std	Y+6, r19	; 0x06
    372a:	eb 81       	ldd	r30, Y+3	; 0x03
    372c:	fc 81       	ldd	r31, Y+4	; 0x04
    372e:	e2 17       	cp	r30, r18
    3730:	f3 07       	cpc	r31, r19
    3732:	10 f4       	brcc	.+4      	; 0x3738 <udd_ep_trans_complet+0x142>
    3734:	ed 83       	std	Y+5, r30	; 0x05
    3736:	fe 83       	std	Y+6, r31	; 0x06
    3738:	d7 01       	movw	r26, r14
    373a:	16 96       	adiw	r26, 0x06	; 6
    373c:	2d 91       	ld	r18, X+
    373e:	3c 91       	ld	r19, X
    3740:	17 97       	sbiw	r26, 0x07	; 7
    3742:	20 17       	cp	r18, r16
    3744:	31 07       	cpc	r19, r17
    3746:	09 f0       	breq	.+2      	; 0x374a <udd_ep_trans_complet+0x154>
    3748:	45 c0       	rjmp	.+138    	; 0x37d4 <udd_ep_trans_complet+0x1de>
    374a:	8d 81       	ldd	r24, Y+5	; 0x05
    374c:	9e 81       	ldd	r25, Y+6	; 0x06
    374e:	e8 17       	cp	r30, r24
    3750:	f9 07       	cpc	r31, r25
    3752:	09 f4       	brne	.+2      	; 0x3756 <udd_ep_trans_complet+0x160>
    3754:	3f c0       	rjmp	.+126    	; 0x37d4 <udd_ep_trans_complet+0x1de>
    3756:	e8 1b       	sub	r30, r24
    3758:	f9 0b       	sbc	r31, r25
    375a:	e1 15       	cp	r30, r1
    375c:	b4 e0       	ldi	r27, 0x04	; 4
    375e:	fb 07       	cpc	r31, r27
    3760:	48 f0       	brcs	.+18     	; 0x3774 <udd_ep_trans_complet+0x17e>
    3762:	ef ef       	ldi	r30, 0xFF	; 255
    3764:	f3 e0       	ldi	r31, 0x03	; 3
    3766:	cf 01       	movw	r24, r30
    3768:	b6 01       	movw	r22, r12
    376a:	0e 94 b0 24 	call	0x4960	; 0x4960 <__udivmodhi4>
    376e:	e8 1b       	sub	r30, r24
    3770:	f9 0b       	sbc	r31, r25
    3772:	06 c0       	rjmp	.+12     	; 0x3780 <udd_ep_trans_complet+0x18a>
    3774:	cf 01       	movw	r24, r30
    3776:	b6 01       	movw	r22, r12
    3778:	0e 94 b0 24 	call	0x4960	; 0x4960 <__udivmodhi4>
    377c:	e8 1b       	sub	r30, r24
    377e:	f9 0b       	sbc	r31, r25
    3780:	d7 01       	movw	r26, r14
    3782:	12 96       	adiw	r26, 0x02	; 2
    3784:	1d 92       	st	X+, r1
    3786:	1c 92       	st	X, r1
    3788:	13 97       	sbiw	r26, 0x03	; 3
    378a:	ec 15       	cp	r30, r12
    378c:	fd 05       	cpc	r31, r13
    378e:	78 f4       	brcc	.+30     	; 0x37ae <udd_ep_trans_complet+0x1b8>
    3790:	88 81       	ld	r24, Y
    3792:	84 60       	ori	r24, 0x04	; 4
    3794:	88 83       	st	Y, r24
    3796:	b0 e4       	ldi	r27, 0x40	; 64
    3798:	bb 9e       	mul	r11, r27
    379a:	c0 01       	movw	r24, r0
    379c:	11 24       	eor	r1, r1
    379e:	87 5c       	subi	r24, 0xC7	; 199
    37a0:	9d 4d       	sbci	r25, 0xDD	; 221
    37a2:	f7 01       	movw	r30, r14
    37a4:	84 83       	std	Z+4, r24	; 0x04
    37a6:	95 83       	std	Z+5, r25	; 0x05
    37a8:	c6 82       	std	Z+6, r12	; 0x06
    37aa:	d7 82       	std	Z+7, r13	; 0x07
    37ac:	0f c0       	rjmp	.+30     	; 0x37cc <udd_ep_trans_complet+0x1d6>
    37ae:	29 81       	ldd	r18, Y+1	; 0x01
    37b0:	3a 81       	ldd	r19, Y+2	; 0x02
    37b2:	8d 81       	ldd	r24, Y+5	; 0x05
    37b4:	9e 81       	ldd	r25, Y+6	; 0x06
    37b6:	82 0f       	add	r24, r18
    37b8:	93 1f       	adc	r25, r19
    37ba:	d7 01       	movw	r26, r14
    37bc:	14 96       	adiw	r26, 0x04	; 4
    37be:	8d 93       	st	X+, r24
    37c0:	9c 93       	st	X, r25
    37c2:	15 97       	sbiw	r26, 0x05	; 5
    37c4:	16 96       	adiw	r26, 0x06	; 6
    37c6:	ed 93       	st	X+, r30
    37c8:	fc 93       	st	X, r31
    37ca:	17 97       	sbiw	r26, 0x07	; 7
    37cc:	f7 01       	movw	r30, r14
    37ce:	02 e0       	ldi	r16, 0x02	; 2
    37d0:	06 93       	lac	Z, r16
    37d2:	0f c0       	rjmp	.+30     	; 0x37f2 <udd_ep_trans_complet+0x1fc>
    37d4:	88 81       	ld	r24, Y
    37d6:	80 ff       	sbrs	r24, 0
    37d8:	0c c0       	rjmp	.+24     	; 0x37f2 <udd_ep_trans_complet+0x1fc>
    37da:	8e 7f       	andi	r24, 0xFE	; 254
    37dc:	88 83       	st	Y, r24
    37de:	ef 81       	ldd	r30, Y+7	; 0x07
    37e0:	f8 85       	ldd	r31, Y+8	; 0x08
    37e2:	30 97       	sbiw	r30, 0x00	; 0
    37e4:	31 f0       	breq	.+12     	; 0x37f2 <udd_ep_trans_complet+0x1fc>
    37e6:	6d 81       	ldd	r22, Y+5	; 0x05
    37e8:	7e 81       	ldd	r23, Y+6	; 0x06
    37ea:	4b 2d       	mov	r20, r11
    37ec:	80 e0       	ldi	r24, 0x00	; 0
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	09 95       	icall
    37f2:	df 91       	pop	r29
    37f4:	cf 91       	pop	r28
    37f6:	1f 91       	pop	r17
    37f8:	0f 91       	pop	r16
    37fa:	ff 90       	pop	r15
    37fc:	ef 90       	pop	r14
    37fe:	df 90       	pop	r13
    3800:	cf 90       	pop	r12
    3802:	bf 90       	pop	r11
    3804:	08 95       	ret

00003806 <udd_is_high_speed>:
    3806:	80 e0       	ldi	r24, 0x00	; 0
    3808:	08 95       	ret

0000380a <udd_set_address>:
    380a:	80 93 c3 04 	sts	0x04C3, r24
    380e:	08 95       	ret

00003810 <udd_getaddress>:
    3810:	80 91 c3 04 	lds	r24, 0x04C3
    3814:	08 95       	ret

00003816 <udd_get_frame_number>:
    3816:	20 91 50 22 	lds	r18, 0x2250
    381a:	30 91 51 22 	lds	r19, 0x2251
    381e:	82 2f       	mov	r24, r18
    3820:	93 2f       	mov	r25, r19
    3822:	08 95       	ret

00003824 <udd_get_micro_frame_number>:
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	08 95       	ret

0000382a <udd_set_setup_payload>:
    382a:	80 93 9e 23 	sts	0x239E, r24
    382e:	90 93 9f 23 	sts	0x239F, r25
    3832:	60 93 a0 23 	sts	0x23A0, r22
    3836:	70 93 a1 23 	sts	0x23A1, r23
    383a:	08 95       	ret

0000383c <udd_ep_alloc>:
    383c:	ef 92       	push	r14
    383e:	ff 92       	push	r15
    3840:	0f 93       	push	r16
    3842:	1f 93       	push	r17
    3844:	cf 93       	push	r28
    3846:	df 93       	push	r29
    3848:	f8 2e       	mov	r15, r24
    384a:	e6 2e       	mov	r14, r22
    384c:	8a 01       	movw	r16, r20
    384e:	e0 dc       	rcall	.-1600   	; 0x3210 <udd_ep_get_ctrl>
    3850:	ec 01       	movw	r28, r24
    3852:	89 81       	ldd	r24, Y+1	; 0x01
    3854:	80 7c       	andi	r24, 0xC0	; 192
    3856:	89 f4       	brne	.+34     	; 0x387a <udd_ep_alloc+0x3e>
    3858:	a8 01       	movw	r20, r16
    385a:	6e 2d       	mov	r22, r14
    385c:	8f 2d       	mov	r24, r15
    385e:	f1 dc       	rcall	.-1566   	; 0x3242 <udd_ep_init>
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	80 7c       	andi	r24, 0xC0	; 192
    3864:	80 3c       	cpi	r24, 0xC0	; 192
    3866:	21 f4       	brne	.+8      	; 0x3870 <udd_ep_alloc+0x34>
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	87 70       	andi	r24, 0x07	; 7
    386c:	87 30       	cpi	r24, 0x07	; 7
    386e:	39 f0       	breq	.+14     	; 0x387e <udd_ep_alloc+0x42>
    3870:	89 81       	ldd	r24, Y+1	; 0x01
    3872:	80 62       	ori	r24, 0x20	; 32
    3874:	89 83       	std	Y+1, r24	; 0x01
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	03 c0       	rjmp	.+6      	; 0x3880 <udd_ep_alloc+0x44>
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	01 c0       	rjmp	.+2      	; 0x3880 <udd_ep_alloc+0x44>
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	df 91       	pop	r29
    3882:	cf 91       	pop	r28
    3884:	1f 91       	pop	r17
    3886:	0f 91       	pop	r16
    3888:	ff 90       	pop	r15
    388a:	ef 90       	pop	r14
    388c:	08 95       	ret

0000388e <udd_ep_is_halted>:
    388e:	c0 dc       	rcall	.-1664   	; 0x3210 <udd_ep_get_ctrl>
    3890:	fc 01       	movw	r30, r24
    3892:	81 81       	ldd	r24, Z+1	; 0x01
    3894:	82 fb       	bst	r24, 2
    3896:	88 27       	eor	r24, r24
    3898:	80 f9       	bld	r24, 0
    389a:	08 95       	ret

0000389c <udd_ep_clear_halt>:
    389c:	cf 93       	push	r28
    389e:	c8 2f       	mov	r28, r24
    38a0:	b7 dc       	rcall	.-1682   	; 0x3210 <udd_ep_get_ctrl>
    38a2:	fc 01       	movw	r30, r24
    38a4:	81 81       	ldd	r24, Z+1	; 0x01
    38a6:	82 ff       	sbrs	r24, 2
    38a8:	0f c0       	rjmp	.+30     	; 0x38c8 <udd_ep_clear_halt+0x2c>
    38aa:	81 81       	ldd	r24, Z+1	; 0x01
    38ac:	8b 7f       	andi	r24, 0xFB	; 251
    38ae:	81 83       	std	Z+1, r24	; 0x01
    38b0:	8c 2f       	mov	r24, r28
    38b2:	0c de       	rcall	.-1000   	; 0x34cc <udd_ep_get_job>
    38b4:	fc 01       	movw	r30, r24
    38b6:	80 81       	ld	r24, Z
    38b8:	80 ff       	sbrs	r24, 0
    38ba:	06 c0       	rjmp	.+12     	; 0x38c8 <udd_ep_clear_halt+0x2c>
    38bc:	8e 7f       	andi	r24, 0xFE	; 254
    38be:	80 83       	st	Z, r24
    38c0:	07 80       	ldd	r0, Z+7	; 0x07
    38c2:	f0 85       	ldd	r31, Z+8	; 0x08
    38c4:	e0 2d       	mov	r30, r0
    38c6:	09 95       	icall
    38c8:	81 e0       	ldi	r24, 0x01	; 1
    38ca:	cf 91       	pop	r28
    38cc:	08 95       	ret

000038ce <udd_ep_run>:
    38ce:	8f 92       	push	r8
    38d0:	9f 92       	push	r9
    38d2:	af 92       	push	r10
    38d4:	bf 92       	push	r11
    38d6:	cf 92       	push	r12
    38d8:	df 92       	push	r13
    38da:	ef 92       	push	r14
    38dc:	ff 92       	push	r15
    38de:	0f 93       	push	r16
    38e0:	1f 93       	push	r17
    38e2:	cf 93       	push	r28
    38e4:	df 93       	push	r29
    38e6:	98 2e       	mov	r9, r24
    38e8:	86 2e       	mov	r8, r22
    38ea:	5a 01       	movw	r10, r20
    38ec:	69 01       	movw	r12, r18
    38ee:	ee dd       	rcall	.-1060   	; 0x34cc <udd_ep_get_job>
    38f0:	7c 01       	movw	r14, r24
    38f2:	89 2d       	mov	r24, r9
    38f4:	8d dc       	rcall	.-1766   	; 0x3210 <udd_ep_get_ctrl>
    38f6:	ec 01       	movw	r28, r24
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	80 7c       	andi	r24, 0xC0	; 192
    38fc:	09 f4       	brne	.+2      	; 0x3900 <udd_ep_run+0x32>
    38fe:	4d c0       	rjmp	.+154    	; 0x399a <udd_ep_run+0xcc>
    3900:	89 81       	ldd	r24, Y+1	; 0x01
    3902:	80 7c       	andi	r24, 0xC0	; 192
    3904:	80 3c       	cpi	r24, 0xC0	; 192
    3906:	19 f0       	breq	.+6      	; 0x390e <udd_ep_run+0x40>
    3908:	89 81       	ldd	r24, Y+1	; 0x01
    390a:	82 fd       	sbrc	r24, 2
    390c:	48 c0       	rjmp	.+144    	; 0x399e <udd_ep_run+0xd0>
    390e:	8f b7       	in	r24, 0x3f	; 63
    3910:	f8 94       	cli
    3912:	f7 01       	movw	r30, r14
    3914:	90 81       	ld	r25, Z
    3916:	90 ff       	sbrs	r25, 0
    3918:	03 c0       	rjmp	.+6      	; 0x3920 <udd_ep_run+0x52>
    391a:	8f bf       	out	0x3f, r24	; 63
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	40 c0       	rjmp	.+128    	; 0x39a0 <udd_ep_run+0xd2>
    3920:	f7 01       	movw	r30, r14
    3922:	90 81       	ld	r25, Z
    3924:	91 60       	ori	r25, 0x01	; 1
    3926:	90 83       	st	Z, r25
    3928:	8f bf       	out	0x3f, r24	; 63
    392a:	a1 82       	std	Z+1, r10	; 0x01
    392c:	b2 82       	std	Z+2, r11	; 0x02
    392e:	c3 82       	std	Z+3, r12	; 0x03
    3930:	d4 82       	std	Z+4, r13	; 0x04
    3932:	15 82       	std	Z+5, r1	; 0x05
    3934:	16 82       	std	Z+6, r1	; 0x06
    3936:	07 83       	std	Z+7, r16	; 0x07
    3938:	10 87       	std	Z+8, r17	; 0x08
    393a:	81 10       	cpse	r8, r1
    393c:	08 c0       	rjmp	.+16     	; 0x394e <udd_ep_run+0x80>
    393e:	21 e0       	ldi	r18, 0x01	; 1
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	c1 14       	cp	r12, r1
    3944:	d1 04       	cpc	r13, r1
    3946:	29 f0       	breq	.+10     	; 0x3952 <udd_ep_run+0x84>
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	02 c0       	rjmp	.+4      	; 0x3952 <udd_ep_run+0x84>
    394e:	21 e0       	ldi	r18, 0x01	; 1
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	f7 01       	movw	r30, r14
    3954:	80 81       	ld	r24, Z
    3956:	20 fb       	bst	r18, 0
    3958:	81 f9       	bld	r24, 1
    395a:	8b 7f       	andi	r24, 0xFB	; 251
    395c:	80 83       	st	Z, r24
    395e:	99 20       	and	r9, r9
    3960:	1c f4       	brge	.+6      	; 0x3968 <udd_ep_run+0x9a>
    3962:	1e 82       	std	Y+6, r1	; 0x06
    3964:	1f 82       	std	Y+7, r1	; 0x07
    3966:	15 c0       	rjmp	.+42     	; 0x3992 <udd_ep_run+0xc4>
    3968:	89 81       	ldd	r24, Y+1	; 0x01
    396a:	80 7c       	andi	r24, 0xC0	; 192
    396c:	80 3c       	cpi	r24, 0xC0	; 192
    396e:	69 f4       	brne	.+26     	; 0x398a <udd_ep_run+0xbc>
    3970:	ce 01       	movw	r24, r28
    3972:	81 dd       	rcall	.-1278   	; 0x3476 <udd_ep_get_size>
    3974:	bc 01       	movw	r22, r24
    3976:	c6 01       	movw	r24, r12
    3978:	f3 d7       	rcall	.+4070   	; 0x4960 <__udivmodhi4>
    397a:	89 2b       	or	r24, r25
    397c:	31 f0       	breq	.+12     	; 0x398a <udd_ep_run+0xbc>
    397e:	f7 01       	movw	r30, r14
    3980:	80 81       	ld	r24, Z
    3982:	8e 7f       	andi	r24, 0xFE	; 254
    3984:	80 83       	st	Z, r24
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	0b c0       	rjmp	.+22     	; 0x39a0 <udd_ep_run+0xd2>
    398a:	1a 82       	std	Y+2, r1	; 0x02
    398c:	1b 82       	std	Y+3, r1	; 0x03
    398e:	1e 82       	std	Y+6, r1	; 0x06
    3990:	1f 82       	std	Y+7, r1	; 0x07
    3992:	89 2d       	mov	r24, r9
    3994:	30 de       	rcall	.-928    	; 0x35f6 <udd_ep_trans_complet>
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	03 c0       	rjmp	.+6      	; 0x39a0 <udd_ep_run+0xd2>
    399a:	80 e0       	ldi	r24, 0x00	; 0
    399c:	01 c0       	rjmp	.+2      	; 0x39a0 <udd_ep_run+0xd2>
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	df 91       	pop	r29
    39a2:	cf 91       	pop	r28
    39a4:	1f 91       	pop	r17
    39a6:	0f 91       	pop	r16
    39a8:	ff 90       	pop	r15
    39aa:	ef 90       	pop	r14
    39ac:	df 90       	pop	r13
    39ae:	cf 90       	pop	r12
    39b0:	bf 90       	pop	r11
    39b2:	af 90       	pop	r10
    39b4:	9f 90       	pop	r9
    39b6:	8f 90       	pop	r8
    39b8:	08 95       	ret

000039ba <udd_ep_abort>:
    39ba:	0f 93       	push	r16
    39bc:	1f 93       	push	r17
    39be:	cf 93       	push	r28
    39c0:	df 93       	push	r29
    39c2:	18 2f       	mov	r17, r24
    39c4:	25 dc       	rcall	.-1974   	; 0x3210 <udd_ep_get_ctrl>
    39c6:	ec 01       	movw	r28, r24
    39c8:	81 2f       	mov	r24, r17
    39ca:	80 dd       	rcall	.-1280   	; 0x34cc <udd_ep_get_job>
    39cc:	dc 01       	movw	r26, r24
    39ce:	fe 01       	movw	r30, r28
    39d0:	02 e0       	ldi	r16, 0x02	; 2
    39d2:	05 93       	las	Z, r16
    39d4:	8c 91       	ld	r24, X
    39d6:	80 ff       	sbrs	r24, 0
    39d8:	13 c0       	rjmp	.+38     	; 0x3a00 <udd_ep_abort+0x46>
    39da:	8e 7f       	andi	r24, 0xFE	; 254
    39dc:	8c 93       	st	X, r24
    39de:	17 96       	adiw	r26, 0x07	; 7
    39e0:	ed 91       	ld	r30, X+
    39e2:	fc 91       	ld	r31, X
    39e4:	18 97       	sbiw	r26, 0x08	; 8
    39e6:	30 97       	sbiw	r30, 0x00	; 0
    39e8:	59 f0       	breq	.+22     	; 0x3a00 <udd_ep_abort+0x46>
    39ea:	11 23       	and	r17, r17
    39ec:	1c f4       	brge	.+6      	; 0x39f4 <udd_ep_abort+0x3a>
    39ee:	6e 81       	ldd	r22, Y+6	; 0x06
    39f0:	7f 81       	ldd	r23, Y+7	; 0x07
    39f2:	02 c0       	rjmp	.+4      	; 0x39f8 <udd_ep_abort+0x3e>
    39f4:	6a 81       	ldd	r22, Y+2	; 0x02
    39f6:	7b 81       	ldd	r23, Y+3	; 0x03
    39f8:	41 2f       	mov	r20, r17
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	09 95       	icall
    3a00:	df 91       	pop	r29
    3a02:	cf 91       	pop	r28
    3a04:	1f 91       	pop	r17
    3a06:	0f 91       	pop	r16
    3a08:	08 95       	ret

00003a0a <udd_ep_set_halt>:
    3a0a:	0f 93       	push	r16
    3a0c:	cf 93       	push	r28
    3a0e:	c8 2f       	mov	r28, r24
    3a10:	ff db       	rcall	.-2050   	; 0x3210 <udd_ep_get_ctrl>
    3a12:	fc 01       	movw	r30, r24
    3a14:	81 81       	ldd	r24, Z+1	; 0x01
    3a16:	84 60       	ori	r24, 0x04	; 4
    3a18:	81 83       	std	Z+1, r24	; 0x01
    3a1a:	01 e0       	ldi	r16, 0x01	; 1
    3a1c:	06 93       	lac	Z, r16
    3a1e:	8c 2f       	mov	r24, r28
    3a20:	cc df       	rcall	.-104    	; 0x39ba <udd_ep_abort>
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	cf 91       	pop	r28
    3a26:	0f 91       	pop	r16
    3a28:	08 95       	ret

00003a2a <udd_ep_free>:
    3a2a:	cf 93       	push	r28
    3a2c:	c8 2f       	mov	r28, r24
    3a2e:	c5 df       	rcall	.-118    	; 0x39ba <udd_ep_abort>
    3a30:	8c 2f       	mov	r24, r28
    3a32:	ee db       	rcall	.-2084   	; 0x3210 <udd_ep_get_ctrl>
    3a34:	fc 01       	movw	r30, r24
    3a36:	11 82       	std	Z+1, r1	; 0x01
    3a38:	cf 91       	pop	r28
    3a3a:	08 95       	ret

00003a3c <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    3a3c:	1f 92       	push	r1
    3a3e:	0f 92       	push	r0
    3a40:	0f b6       	in	r0, 0x3f	; 63
    3a42:	0f 92       	push	r0
    3a44:	11 24       	eor	r1, r1
    3a46:	0f 93       	push	r16
    3a48:	2f 93       	push	r18
    3a4a:	3f 93       	push	r19
    3a4c:	4f 93       	push	r20
    3a4e:	5f 93       	push	r21
    3a50:	6f 93       	push	r22
    3a52:	7f 93       	push	r23
    3a54:	8f 93       	push	r24
    3a56:	9f 93       	push	r25
    3a58:	af 93       	push	r26
    3a5a:	bf 93       	push	r27
    3a5c:	ef 93       	push	r30
    3a5e:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    3a60:	80 91 cb 04 	lds	r24, 0x04CB
    3a64:	88 23       	and	r24, r24
    3a66:	34 f4       	brge	.+12     	; 0x3a74 <__vector_125+0x38>
		udd_ack_start_of_frame_event();
    3a68:	80 e8       	ldi	r24, 0x80	; 128
    3a6a:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    3a6e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    3a72:	84 c0       	rjmp	.+264    	; 0x3b7c <__vector_125+0x140>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    3a74:	80 91 cb 04 	lds	r24, 0x04CB
    3a78:	82 ff       	sbrs	r24, 2
    3a7a:	23 c0       	rjmp	.+70     	; 0x3ac2 <__vector_125+0x86>
		udd_ack_underflow_event();
    3a7c:	84 e0       	ldi	r24, 0x04	; 4
    3a7e:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    3a82:	80 91 28 22 	lds	r24, 0x2228
    3a86:	86 ff       	sbrs	r24, 6
    3a88:	79 c0       	rjmp	.+242    	; 0x3b7c <__vector_125+0x140>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    3a8a:	80 91 cc 04 	lds	r24, 0x04CC
    3a8e:	81 fd       	sbrc	r24, 1
    3a90:	75 c0       	rjmp	.+234    	; 0x3b7c <__vector_125+0x140>
    3a92:	3a dd       	rcall	.-1420   	; 0x3508 <udd_ctrl_interrupt_tc_setup>
    3a94:	81 11       	cpse	r24, r1
    3a96:	72 c0       	rjmp	.+228    	; 0x3b7c <__vector_125+0x140>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    3a98:	80 91 39 23 	lds	r24, 0x2339
    3a9c:	90 91 3a 23 	lds	r25, 0x233A
    3aa0:	81 30       	cpi	r24, 0x01	; 1
    3aa2:	91 05       	cpc	r25, r1
    3aa4:	11 f4       	brne	.+4      	; 0x3aaa <__vector_125+0x6e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    3aa6:	57 dc       	rcall	.-1874   	; 0x3356 <udd_ctrl_send_zlp_in>
    3aa8:	69 c0       	rjmp	.+210    	; 0x3b7c <__vector_125+0x140>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    3aaa:	04 97       	sbiw	r24, 0x04	; 4
    3aac:	09 f0       	breq	.+2      	; 0x3ab0 <__vector_125+0x74>
    3aae:	66 c0       	rjmp	.+204    	; 0x3b7c <__vector_125+0x140>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    3ab0:	e9 e2       	ldi	r30, 0x29	; 41
    3ab2:	f2 e2       	ldi	r31, 0x22	; 34
    3ab4:	04 e0       	ldi	r16, 0x04	; 4
    3ab6:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    3ab8:	e1 e2       	ldi	r30, 0x21	; 33
    3aba:	f2 e2       	ldi	r31, 0x22	; 34
    3abc:	04 e0       	ldi	r16, 0x04	; 4
    3abe:	05 93       	las	Z, r16
    3ac0:	5d c0       	rjmp	.+186    	; 0x3b7c <__vector_125+0x140>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    3ac2:	80 91 cb 04 	lds	r24, 0x04CB
    3ac6:	81 ff       	sbrs	r24, 1
    3ac8:	54 c0       	rjmp	.+168    	; 0x3b72 <__vector_125+0x136>
		udd_ack_overflow_event();
    3aca:	82 e0       	ldi	r24, 0x02	; 2
    3acc:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    3ad0:	80 91 20 22 	lds	r24, 0x2220
    3ad4:	86 ff       	sbrs	r24, 6
    3ad6:	52 c0       	rjmp	.+164    	; 0x3b7c <__vector_125+0x140>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    3ad8:	80 91 cc 04 	lds	r24, 0x04CC
    3adc:	81 fd       	sbrc	r24, 1
    3ade:	4e c0       	rjmp	.+156    	; 0x3b7c <__vector_125+0x140>
    3ae0:	13 dd       	rcall	.-1498   	; 0x3508 <udd_ctrl_interrupt_tc_setup>
    3ae2:	81 11       	cpse	r24, r1
    3ae4:	4b c0       	rjmp	.+150    	; 0x3b7c <__vector_125+0x140>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    3ae6:	80 91 39 23 	lds	r24, 0x2339
    3aea:	90 91 3a 23 	lds	r25, 0x233A
    3aee:	82 30       	cpi	r24, 0x02	; 2
    3af0:	91 05       	cpc	r25, r1
    3af2:	11 f4       	brne	.+4      	; 0x3af8 <__vector_125+0xbc>
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
    3af4:	41 dc       	rcall	.-1918   	; 0x3378 <udd_ctrl_send_zlp_out>
    3af6:	42 c0       	rjmp	.+132    	; 0x3b7c <__vector_125+0x140>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    3af8:	03 97       	sbiw	r24, 0x03	; 3
    3afa:	09 f0       	breq	.+2      	; 0x3afe <__vector_125+0xc2>
    3afc:	3f c0       	rjmp	.+126    	; 0x3b7c <__vector_125+0x140>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    3afe:	e9 e2       	ldi	r30, 0x29	; 41
    3b00:	f2 e2       	ldi	r31, 0x22	; 34
    3b02:	04 e0       	ldi	r16, 0x04	; 4
    3b04:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    3b06:	e1 e2       	ldi	r30, 0x21	; 33
    3b08:	f2 e2       	ldi	r31, 0x22	; 34
    3b0a:	04 e0       	ldi	r16, 0x04	; 4
    3b0c:	05 93       	las	Z, r16
    3b0e:	36 c0       	rjmp	.+108    	; 0x3b7c <__vector_125+0x140>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    3b10:	80 e1       	ldi	r24, 0x10	; 16
    3b12:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	50 df       	rcall	.-352    	; 0x39ba <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    3b1a:	81 e8       	ldi	r24, 0x81	; 129
    3b1c:	4e df       	rcall	.-356    	; 0x39ba <udd_ep_abort>
		}
#endif
		udc_reset();
    3b1e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    3b22:	10 92 c3 04 	sts	0x04C3, r1
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
    3b26:	40 e4       	ldi	r20, 0x40	; 64
    3b28:	50 e0       	ldi	r21, 0x00	; 0
    3b2a:	60 e0       	ldi	r22, 0x00	; 0
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	89 db       	rcall	.-2286   	; 0x3242 <udd_ep_init>
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
    3b30:	40 e4       	ldi	r20, 0x40	; 64
    3b32:	50 e0       	ldi	r21, 0x00	; 0
    3b34:	60 e0       	ldi	r22, 0x00	; 0
    3b36:	80 e8       	ldi	r24, 0x80	; 128
    3b38:	84 db       	rcall	.-2296   	; 0x3242 <udd_ep_init>
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    3b3a:	89 ef       	ldi	r24, 0xF9	; 249
    3b3c:	92 e2       	ldi	r25, 0x22	; 34
    3b3e:	80 93 24 22 	sts	0x2224, r24
    3b42:	90 93 25 22 	sts	0x2225, r25
		// Reset endpoint control management
		udd_ctrl_init();
    3b46:	c9 db       	rcall	.-2158   	; 0x32da <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    3b48:	19 c0       	rjmp	.+50     	; 0x3b7c <__vector_125+0x140>
	}

	if (udd_is_suspend_event()) {
    3b4a:	80 91 cb 04 	lds	r24, 0x04CB
    3b4e:	86 ff       	sbrs	r24, 6
    3b50:	06 c0       	rjmp	.+12     	; 0x3b5e <__vector_125+0x122>
		udd_ack_suspend_event();
    3b52:	80 e4       	ldi	r24, 0x40	; 64
    3b54:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	3b db       	rcall	.-2442   	; 0x31d2 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    3b5c:	0f c0       	rjmp	.+30     	; 0x3b7c <__vector_125+0x140>
	}

	if (udd_is_resume_event()) {
    3b5e:	80 91 cb 04 	lds	r24, 0x04CB
    3b62:	85 ff       	sbrs	r24, 5
    3b64:	0b c0       	rjmp	.+22     	; 0x3b7c <__vector_125+0x140>
		udd_ack_resume_event();
    3b66:	80 e2       	ldi	r24, 0x20	; 32
    3b68:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	31 db       	rcall	.-2462   	; 0x31d2 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    3b70:	05 c0       	rjmp	.+10     	; 0x3b7c <__vector_125+0x140>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    3b72:	80 91 cb 04 	lds	r24, 0x04CB
    3b76:	84 fd       	sbrc	r24, 4
    3b78:	cb cf       	rjmp	.-106    	; 0x3b10 <__vector_125+0xd4>
    3b7a:	e7 cf       	rjmp	.-50     	; 0x3b4a <__vector_125+0x10e>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    3b7c:	ff 91       	pop	r31
    3b7e:	ef 91       	pop	r30
    3b80:	bf 91       	pop	r27
    3b82:	af 91       	pop	r26
    3b84:	9f 91       	pop	r25
    3b86:	8f 91       	pop	r24
    3b88:	7f 91       	pop	r23
    3b8a:	6f 91       	pop	r22
    3b8c:	5f 91       	pop	r21
    3b8e:	4f 91       	pop	r20
    3b90:	3f 91       	pop	r19
    3b92:	2f 91       	pop	r18
    3b94:	0f 91       	pop	r16
    3b96:	0f 90       	pop	r0
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	0f 90       	pop	r0
    3b9c:	1f 90       	pop	r1
    3b9e:	18 95       	reti

00003ba0 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    3ba0:	1f 92       	push	r1
    3ba2:	0f 92       	push	r0
    3ba4:	0f b6       	in	r0, 0x3f	; 63
    3ba6:	0f 92       	push	r0
    3ba8:	11 24       	eor	r1, r1
    3baa:	0f 93       	push	r16
    3bac:	1f 93       	push	r17
    3bae:	2f 93       	push	r18
    3bb0:	3f 93       	push	r19
    3bb2:	4f 93       	push	r20
    3bb4:	5f 93       	push	r21
    3bb6:	6f 93       	push	r22
    3bb8:	7f 93       	push	r23
    3bba:	8f 93       	push	r24
    3bbc:	9f 93       	push	r25
    3bbe:	af 93       	push	r26
    3bc0:	bf 93       	push	r27
    3bc2:	cf 93       	push	r28
    3bc4:	df 93       	push	r29
    3bc6:	ef 93       	push	r30
    3bc8:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    3bca:	80 91 cc 04 	lds	r24, 0x04CC
    3bce:	81 fd       	sbrc	r24, 1
    3bd0:	03 c0       	rjmp	.+6      	; 0x3bd8 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    3bd2:	9a dc       	rcall	.-1740   	; 0x3508 <udd_ctrl_interrupt_tc_setup>
    3bd4:	81 11       	cpse	r24, r1
    3bd6:	ac c0       	rjmp	.+344    	; 0x3d30 <__vector_126+0x190>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    3bd8:	82 e0       	ldi	r24, 0x02	; 2
    3bda:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    3bde:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    3be2:	81 95       	neg	r24
    3be4:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    3be6:	e0 e2       	ldi	r30, 0x20	; 32
    3be8:	f2 e2       	ldi	r31, 0x22	; 34
    3bea:	e8 1b       	sub	r30, r24
    3bec:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    3bee:	20 81       	ld	r18, Z
    3bf0:	31 81       	ldd	r19, Z+1	; 0x01
    3bf2:	20 52       	subi	r18, 0x20	; 32
    3bf4:	32 42       	sbci	r19, 0x22	; 34
    3bf6:	36 95       	lsr	r19
    3bf8:	27 95       	ror	r18
    3bfa:	36 95       	lsr	r19
    3bfc:	27 95       	ror	r18
    3bfe:	36 95       	lsr	r19
    3c00:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    3c02:	82 2f       	mov	r24, r18
    3c04:	86 95       	lsr	r24
    3c06:	20 ff       	sbrs	r18, 0
    3c08:	02 c0       	rjmp	.+4      	; 0x3c0e <__vector_126+0x6e>
    3c0a:	c0 e8       	ldi	r28, 0x80	; 128
    3c0c:	01 c0       	rjmp	.+2      	; 0x3c10 <__vector_126+0x70>
    3c0e:	c0 e0       	ldi	r28, 0x00	; 0
    3c10:	c8 0f       	add	r28, r24
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    3c12:	8c 2f       	mov	r24, r28
    3c14:	fd da       	rcall	.-2566   	; 0x3210 <udd_ep_get_ctrl>
    3c16:	fc 01       	movw	r30, r24
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    3c18:	80 81       	ld	r24, Z
    3c1a:	85 ff       	sbrs	r24, 5
    3c1c:	89 c0       	rjmp	.+274    	; 0x3d30 <__vector_126+0x190>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    3c1e:	00 e2       	ldi	r16, 0x20	; 32
    3c20:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    3c22:	c1 11       	cpse	r28, r1
    3c24:	7f c0       	rjmp	.+254    	; 0x3d24 <__vector_126+0x184>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    3c26:	80 91 39 23 	lds	r24, 0x2339
    3c2a:	90 91 3a 23 	lds	r25, 0x233A
    3c2e:	04 97       	sbiw	r24, 0x04	; 4
    3c30:	19 f4       	brne	.+6      	; 0x3c38 <__vector_126+0x98>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    3c32:	af db       	rcall	.-2210   	; 0x3392 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    3c34:	52 db       	rcall	.-2396   	; 0x32da <udd_ctrl_init>
    3c36:	7c c0       	rjmp	.+248    	; 0x3d30 <__vector_126+0x190>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    3c38:	c0 91 22 22 	lds	r28, 0x2222
    3c3c:	d0 91 23 22 	lds	r29, 0x2223

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    3c40:	80 91 a0 23 	lds	r24, 0x23A0
    3c44:	90 91 a1 23 	lds	r25, 0x23A1
    3c48:	00 91 3d 23 	lds	r16, 0x233D
    3c4c:	10 91 3e 23 	lds	r17, 0x233E
    3c50:	98 01       	movw	r18, r16
    3c52:	2c 0f       	add	r18, r28
    3c54:	3d 1f       	adc	r19, r29
    3c56:	82 17       	cp	r24, r18
    3c58:	93 07       	cpc	r25, r19
    3c5a:	18 f4       	brcc	.+6      	; 0x3c62 <__vector_126+0xc2>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3c5c:	ec 01       	movw	r28, r24
    3c5e:	c0 1b       	sub	r28, r16
    3c60:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    3c62:	20 91 9e 23 	lds	r18, 0x239E
    3c66:	30 91 9f 23 	lds	r19, 0x239F
    3c6a:	20 0f       	add	r18, r16
    3c6c:	31 1f       	adc	r19, r17
    3c6e:	89 ef       	ldi	r24, 0xF9	; 249
    3c70:	92 e2       	ldi	r25, 0x22	; 34
    3c72:	4c 2f       	mov	r20, r28
    3c74:	5d 2f       	mov	r21, r29
    3c76:	68 2f       	mov	r22, r24
    3c78:	79 2f       	mov	r23, r25
    3c7a:	82 2f       	mov	r24, r18
    3c7c:	93 2f       	mov	r25, r19
    3c7e:	74 d7       	rcall	.+3816   	; 0x4b68 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    3c80:	0c 0f       	add	r16, r28
    3c82:	1d 1f       	adc	r17, r29
    3c84:	00 93 3d 23 	sts	0x233D, r16
    3c88:	10 93 3e 23 	sts	0x233E, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    3c8c:	c0 34       	cpi	r28, 0x40	; 64
    3c8e:	d1 05       	cpc	r29, r1
    3c90:	69 f4       	brne	.+26     	; 0x3cac <__vector_126+0x10c>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    3c92:	80 91 3b 23 	lds	r24, 0x233B
    3c96:	90 91 3c 23 	lds	r25, 0x233C
    3c9a:	80 0f       	add	r24, r16
    3c9c:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    3c9e:	20 91 9c 23 	lds	r18, 0x239C
    3ca2:	30 91 9d 23 	lds	r19, 0x239D
    3ca6:	82 17       	cp	r24, r18
    3ca8:	93 07       	cpc	r25, r19
    3caa:	88 f0       	brcs	.+34     	; 0x3cce <__vector_126+0x12e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    3cac:	00 93 a0 23 	sts	0x23A0, r16
    3cb0:	10 93 a1 23 	sts	0x23A1, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    3cb4:	e0 91 a4 23 	lds	r30, 0x23A4
    3cb8:	f0 91 a5 23 	lds	r31, 0x23A5
    3cbc:	30 97       	sbiw	r30, 0x00	; 0
    3cbe:	29 f0       	breq	.+10     	; 0x3cca <__vector_126+0x12a>
			if (!udd_g_ctrlreq.over_under_run()) {
    3cc0:	09 95       	icall
    3cc2:	81 11       	cpse	r24, r1
    3cc4:	02 c0       	rjmp	.+4      	; 0x3cca <__vector_126+0x12a>
				// Stall ZLP
				udd_ctrl_stall_data();
    3cc6:	36 db       	rcall	.-2452   	; 0x3334 <udd_ctrl_stall_data>
    3cc8:	33 c0       	rjmp	.+102    	; 0x3d30 <__vector_126+0x190>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    3cca:	45 db       	rcall	.-2422   	; 0x3356 <udd_ctrl_send_zlp_in>
    3ccc:	31 c0       	rjmp	.+98     	; 0x3d30 <__vector_126+0x190>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    3cce:	80 91 a0 23 	lds	r24, 0x23A0
    3cd2:	90 91 a1 23 	lds	r25, 0x23A1
    3cd6:	08 17       	cp	r16, r24
    3cd8:	19 07       	cpc	r17, r25
    3cda:	f9 f4       	brne	.+62     	; 0x3d1a <__vector_126+0x17a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    3cdc:	e0 91 a4 23 	lds	r30, 0x23A4
    3ce0:	f0 91 a5 23 	lds	r31, 0x23A5
    3ce4:	30 97       	sbiw	r30, 0x00	; 0
    3ce6:	11 f4       	brne	.+4      	; 0x3cec <__vector_126+0x14c>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    3ce8:	25 db       	rcall	.-2486   	; 0x3334 <udd_ctrl_stall_data>
    3cea:	22 c0       	rjmp	.+68     	; 0x3d30 <__vector_126+0x190>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    3cec:	09 95       	icall
    3cee:	81 11       	cpse	r24, r1
    3cf0:	02 c0       	rjmp	.+4      	; 0x3cf6 <__vector_126+0x156>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    3cf2:	20 db       	rcall	.-2496   	; 0x3334 <udd_ctrl_stall_data>
    3cf4:	1d c0       	rjmp	.+58     	; 0x3d30 <__vector_126+0x190>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3cf6:	20 91 3b 23 	lds	r18, 0x233B
    3cfa:	30 91 3c 23 	lds	r19, 0x233C
    3cfe:	80 91 3d 23 	lds	r24, 0x233D
    3d02:	90 91 3e 23 	lds	r25, 0x233E
    3d06:	82 0f       	add	r24, r18
    3d08:	93 1f       	adc	r25, r19
    3d0a:	80 93 3b 23 	sts	0x233B, r24
    3d0e:	90 93 3c 23 	sts	0x233C, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    3d12:	10 92 3d 23 	sts	0x233D, r1
    3d16:	10 92 3e 23 	sts	0x233E, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    3d1a:	e0 e2       	ldi	r30, 0x20	; 32
    3d1c:	f2 e2       	ldi	r31, 0x22	; 34
    3d1e:	02 e0       	ldi	r16, 0x02	; 2
    3d20:	06 93       	lac	Z, r16
    3d22:	06 c0       	rjmp	.+12     	; 0x3d30 <__vector_126+0x190>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    3d24:	c0 38       	cpi	r28, 0x80	; 128
    3d26:	11 f4       	brne	.+4      	; 0x3d2c <__vector_126+0x18c>
		udd_ctrl_in_sent();
    3d28:	3c db       	rcall	.-2440   	; 0x33a2 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    3d2a:	02 c0       	rjmp	.+4      	; 0x3d30 <__vector_126+0x190>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    3d2c:	8c 2f       	mov	r24, r28
    3d2e:	63 dc       	rcall	.-1850   	; 0x35f6 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    3d30:	ff 91       	pop	r31
    3d32:	ef 91       	pop	r30
    3d34:	df 91       	pop	r29
    3d36:	cf 91       	pop	r28
    3d38:	bf 91       	pop	r27
    3d3a:	af 91       	pop	r26
    3d3c:	9f 91       	pop	r25
    3d3e:	8f 91       	pop	r24
    3d40:	7f 91       	pop	r23
    3d42:	6f 91       	pop	r22
    3d44:	5f 91       	pop	r21
    3d46:	4f 91       	pop	r20
    3d48:	3f 91       	pop	r19
    3d4a:	2f 91       	pop	r18
    3d4c:	1f 91       	pop	r17
    3d4e:	0f 91       	pop	r16
    3d50:	0f 90       	pop	r0
    3d52:	0f be       	out	0x3f, r0	; 63
    3d54:	0f 90       	pop	r0
    3d56:	1f 90       	pop	r1
    3d58:	18 95       	reti

00003d5a <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    3d5a:	cf 92       	push	r12
    3d5c:	df 92       	push	r13
    3d5e:	ef 92       	push	r14
    3d60:	ff 92       	push	r15
    3d62:	cf 93       	push	r28
    3d64:	df 93       	push	r29
    3d66:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    3d68:	6b 01       	movw	r12, r22
    3d6a:	e1 2c       	mov	r14, r1
    3d6c:	f1 2c       	mov	r15, r1
    3d6e:	60 e0       	ldi	r22, 0x00	; 0
    3d70:	7c e6       	ldi	r23, 0x6C	; 108
    3d72:	8c ed       	ldi	r24, 0xDC	; 220
    3d74:	92 e0       	ldi	r25, 0x02	; 2
    3d76:	a7 01       	movw	r20, r14
    3d78:	96 01       	movw	r18, r12
    3d7a:	06 d6       	rcall	.+3084   	; 0x4988 <__udivmodsi4>
    3d7c:	ca 01       	movw	r24, r20
    3d7e:	b9 01       	movw	r22, r18
    3d80:	2f ef       	ldi	r18, 0xFF	; 255
    3d82:	3f ef       	ldi	r19, 0xFF	; 255
    3d84:	40 e0       	ldi	r20, 0x00	; 0
    3d86:	50 e0       	ldi	r21, 0x00	; 0
    3d88:	ff d5       	rcall	.+3070   	; 0x4988 <__udivmodsi4>
	if (smallest_div < 1) {
    3d8a:	21 15       	cp	r18, r1
    3d8c:	31 05       	cpc	r19, r1
    3d8e:	39 f4       	brne	.+14     	; 0x3d9e <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    3d90:	81 e0       	ldi	r24, 0x01	; 1
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	8e 83       	std	Y+6, r24	; 0x06
    3d96:	9f 83       	std	Y+7, r25	; 0x07

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    3d98:	21 e0       	ldi	r18, 0x01	; 1
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	39 c0       	rjmp	.+114    	; 0x3e10 <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    3d9e:	22 30       	cpi	r18, 0x02	; 2
    3da0:	31 05       	cpc	r19, r1
    3da2:	38 f4       	brcc	.+14     	; 0x3db2 <pwm_set_frequency+0x58>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    3da4:	82 e0       	ldi	r24, 0x02	; 2
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	8e 83       	std	Y+6, r24	; 0x06
    3daa:	9f 83       	std	Y+7, r25	; 0x07
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    3dac:	22 e0       	ldi	r18, 0x02	; 2
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	2f c0       	rjmp	.+94     	; 0x3e10 <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    3db2:	24 30       	cpi	r18, 0x04	; 4
    3db4:	31 05       	cpc	r19, r1
    3db6:	38 f4       	brcc	.+14     	; 0x3dc6 <pwm_set_frequency+0x6c>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    3db8:	83 e0       	ldi	r24, 0x03	; 3
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	8e 83       	std	Y+6, r24	; 0x06
    3dbe:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    3dc0:	24 e0       	ldi	r18, 0x04	; 4
    3dc2:	30 e0       	ldi	r19, 0x00	; 0
    3dc4:	25 c0       	rjmp	.+74     	; 0x3e10 <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    3dc6:	28 30       	cpi	r18, 0x08	; 8
    3dc8:	31 05       	cpc	r19, r1
    3dca:	38 f4       	brcc	.+14     	; 0x3dda <pwm_set_frequency+0x80>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    3dcc:	84 e0       	ldi	r24, 0x04	; 4
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	8e 83       	std	Y+6, r24	; 0x06
    3dd2:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    3dd4:	28 e0       	ldi	r18, 0x08	; 8
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	1b c0       	rjmp	.+54     	; 0x3e10 <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    3dda:	20 34       	cpi	r18, 0x40	; 64
    3ddc:	31 05       	cpc	r19, r1
    3dde:	38 f4       	brcc	.+14     	; 0x3dee <pwm_set_frequency+0x94>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    3de0:	85 e0       	ldi	r24, 0x05	; 5
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	8e 83       	std	Y+6, r24	; 0x06
    3de6:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    3de8:	20 e4       	ldi	r18, 0x40	; 64
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	11 c0       	rjmp	.+34     	; 0x3e10 <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    3dee:	2f 3f       	cpi	r18, 0xFF	; 255
    3df0:	31 05       	cpc	r19, r1
    3df2:	09 f0       	breq	.+2      	; 0x3df6 <pwm_set_frequency+0x9c>
    3df4:	38 f4       	brcc	.+14     	; 0x3e04 <pwm_set_frequency+0xaa>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    3df6:	86 e0       	ldi	r24, 0x06	; 6
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	8e 83       	std	Y+6, r24	; 0x06
    3dfc:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    3dfe:	20 e0       	ldi	r18, 0x00	; 0
    3e00:	31 e0       	ldi	r19, 0x01	; 1
    3e02:	06 c0       	rjmp	.+12     	; 0x3e10 <pwm_set_frequency+0xb6>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    3e04:	87 e0       	ldi	r24, 0x07	; 7
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	8e 83       	std	Y+6, r24	; 0x06
    3e0a:	9f 83       	std	Y+7, r25	; 0x07
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    3e10:	40 e0       	ldi	r20, 0x00	; 0
    3e12:	50 e0       	ldi	r21, 0x00	; 0
    3e14:	60 e0       	ldi	r22, 0x00	; 0
    3e16:	7c e6       	ldi	r23, 0x6C	; 108
    3e18:	8c ed       	ldi	r24, 0xDC	; 220
    3e1a:	92 e0       	ldi	r25, 0x02	; 2
    3e1c:	b5 d5       	rcall	.+2922   	; 0x4988 <__udivmodsi4>
    3e1e:	ca 01       	movw	r24, r20
    3e20:	b9 01       	movw	r22, r18
    3e22:	a7 01       	movw	r20, r14
    3e24:	96 01       	movw	r18, r12
    3e26:	b0 d5       	rcall	.+2912   	; 0x4988 <__udivmodsi4>
    3e28:	28 87       	std	Y+8, r18	; 0x08
    3e2a:	39 87       	std	Y+9, r19	; 0x09

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    3e2c:	24 36       	cpi	r18, 0x64	; 100
    3e2e:	31 05       	cpc	r19, r1
    3e30:	20 f4       	brcc	.+8      	; 0x3e3a <pwm_set_frequency+0xe0>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    3e32:	1e 82       	std	Y+6, r1	; 0x06
    3e34:	1f 82       	std	Y+7, r1	; 0x07
		config->period = 0;
    3e36:	18 86       	std	Y+8, r1	; 0x08
    3e38:	19 86       	std	Y+9, r1	; 0x09
		Assert(false);
	}
}
    3e3a:	df 91       	pop	r29
    3e3c:	cf 91       	pop	r28
    3e3e:	ff 90       	pop	r15
    3e40:	ef 90       	pop	r14
    3e42:	df 90       	pop	r13
    3e44:	cf 90       	pop	r12
    3e46:	08 95       	ret

00003e48 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    3e48:	0f 93       	push	r16
    3e4a:	1f 93       	push	r17
    3e4c:	cf 93       	push	r28
    3e4e:	df 93       	push	r29
    3e50:	ec 01       	movw	r28, r24
    3e52:	89 01       	movw	r16, r18
	/* Number of channels for this TC */
	uint8_t num_chan = 0;
	UNUSED(num_chan);

	/* Set TC and correct I/O pin to output */
	switch (tc) {
    3e54:	62 30       	cpi	r22, 0x02	; 2
    3e56:	71 05       	cpc	r23, r1
    3e58:	e1 f1       	breq	.+120    	; 0x3ed2 <pwm_init+0x8a>
    3e5a:	40 f4       	brcc	.+16     	; 0x3e6c <pwm_init+0x24>
    3e5c:	61 15       	cp	r22, r1
    3e5e:	71 05       	cpc	r23, r1
    3e60:	71 f0       	breq	.+28     	; 0x3e7e <pwm_init+0x36>
    3e62:	61 30       	cpi	r22, 0x01	; 1
    3e64:	71 05       	cpc	r23, r1
    3e66:	09 f0       	breq	.+2      	; 0x3e6a <pwm_init+0x22>
    3e68:	72 c0       	rjmp	.+228    	; 0x3f4e <pwm_init+0x106>
    3e6a:	1e c0       	rjmp	.+60     	; 0x3ea8 <pwm_init+0x60>
    3e6c:	63 30       	cpi	r22, 0x03	; 3
    3e6e:	71 05       	cpc	r23, r1
    3e70:	09 f4       	brne	.+2      	; 0x3e74 <pwm_init+0x2c>
    3e72:	44 c0       	rjmp	.+136    	; 0x3efc <pwm_init+0xb4>
    3e74:	64 30       	cpi	r22, 0x04	; 4
    3e76:	71 05       	cpc	r23, r1
    3e78:	09 f0       	breq	.+2      	; 0x3e7c <pwm_init+0x34>
    3e7a:	69 c0       	rjmp	.+210    	; 0x3f4e <pwm_init+0x106>
    3e7c:	54 c0       	rjmp	.+168    	; 0x3f26 <pwm_init+0xde>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    3e7e:	80 e0       	ldi	r24, 0x00	; 0
    3e80:	98 e0       	ldi	r25, 0x08	; 8
    3e82:	88 83       	st	Y, r24
    3e84:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    3e86:	e0 e4       	ldi	r30, 0x40	; 64
    3e88:	f6 e0       	ldi	r31, 0x06	; 6
    3e8a:	a0 81       	ld	r26, Z
    3e8c:	9a 01       	movw	r18, r20
    3e8e:	21 50       	subi	r18, 0x01	; 1
    3e90:	31 09       	sbc	r19, r1
    3e92:	61 e0       	ldi	r22, 0x01	; 1
    3e94:	70 e0       	ldi	r23, 0x00	; 0
    3e96:	cb 01       	movw	r24, r22
    3e98:	02 c0       	rjmp	.+4      	; 0x3e9e <pwm_init+0x56>
    3e9a:	88 0f       	add	r24, r24
    3e9c:	99 1f       	adc	r25, r25
    3e9e:	2a 95       	dec	r18
    3ea0:	e2 f7       	brpl	.-8      	; 0x3e9a <pwm_init+0x52>
    3ea2:	8a 2b       	or	r24, r26
    3ea4:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    3ea6:	53 c0       	rjmp	.+166    	; 0x3f4e <pwm_init+0x106>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    3ea8:	80 e4       	ldi	r24, 0x40	; 64
    3eaa:	98 e0       	ldi	r25, 0x08	; 8
    3eac:	88 83       	st	Y, r24
    3eae:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    3eb0:	e0 e4       	ldi	r30, 0x40	; 64
    3eb2:	f6 e0       	ldi	r31, 0x06	; 6
    3eb4:	a0 81       	ld	r26, Z
    3eb6:	9a 01       	movw	r18, r20
    3eb8:	2d 5f       	subi	r18, 0xFD	; 253
    3eba:	3f 4f       	sbci	r19, 0xFF	; 255
    3ebc:	61 e0       	ldi	r22, 0x01	; 1
    3ebe:	70 e0       	ldi	r23, 0x00	; 0
    3ec0:	cb 01       	movw	r24, r22
    3ec2:	02 c0       	rjmp	.+4      	; 0x3ec8 <pwm_init+0x80>
    3ec4:	88 0f       	add	r24, r24
    3ec6:	99 1f       	adc	r25, r25
    3ec8:	2a 95       	dec	r18
    3eca:	e2 f7       	brpl	.-8      	; 0x3ec4 <pwm_init+0x7c>
    3ecc:	8a 2b       	or	r24, r26
    3ece:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    3ed0:	3e c0       	rjmp	.+124    	; 0x3f4e <pwm_init+0x106>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    3ed2:	80 e0       	ldi	r24, 0x00	; 0
    3ed4:	99 e0       	ldi	r25, 0x09	; 9
    3ed6:	88 83       	st	Y, r24
    3ed8:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    3eda:	e0 e6       	ldi	r30, 0x60	; 96
    3edc:	f6 e0       	ldi	r31, 0x06	; 6
    3ede:	a0 81       	ld	r26, Z
    3ee0:	9a 01       	movw	r18, r20
    3ee2:	21 50       	subi	r18, 0x01	; 1
    3ee4:	31 09       	sbc	r19, r1
    3ee6:	61 e0       	ldi	r22, 0x01	; 1
    3ee8:	70 e0       	ldi	r23, 0x00	; 0
    3eea:	cb 01       	movw	r24, r22
    3eec:	02 c0       	rjmp	.+4      	; 0x3ef2 <pwm_init+0xaa>
    3eee:	88 0f       	add	r24, r24
    3ef0:	99 1f       	adc	r25, r25
    3ef2:	2a 95       	dec	r18
    3ef4:	e2 f7       	brpl	.-8      	; 0x3eee <pwm_init+0xa6>
    3ef6:	8a 2b       	or	r24, r26
    3ef8:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    3efa:	29 c0       	rjmp	.+82     	; 0x3f4e <pwm_init+0x106>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    3efc:	80 e4       	ldi	r24, 0x40	; 64
    3efe:	99 e0       	ldi	r25, 0x09	; 9
    3f00:	88 83       	st	Y, r24
    3f02:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    3f04:	e0 e6       	ldi	r30, 0x60	; 96
    3f06:	f6 e0       	ldi	r31, 0x06	; 6
    3f08:	a0 81       	ld	r26, Z
    3f0a:	9a 01       	movw	r18, r20
    3f0c:	2d 5f       	subi	r18, 0xFD	; 253
    3f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f10:	61 e0       	ldi	r22, 0x01	; 1
    3f12:	70 e0       	ldi	r23, 0x00	; 0
    3f14:	cb 01       	movw	r24, r22
    3f16:	02 c0       	rjmp	.+4      	; 0x3f1c <pwm_init+0xd4>
    3f18:	88 0f       	add	r24, r24
    3f1a:	99 1f       	adc	r25, r25
    3f1c:	2a 95       	dec	r18
    3f1e:	e2 f7       	brpl	.-8      	; 0x3f18 <pwm_init+0xd0>
    3f20:	8a 2b       	or	r24, r26
    3f22:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    3f24:	14 c0       	rjmp	.+40     	; 0x3f4e <pwm_init+0x106>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    3f26:	80 e0       	ldi	r24, 0x00	; 0
    3f28:	9a e0       	ldi	r25, 0x0A	; 10
    3f2a:	88 83       	st	Y, r24
    3f2c:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    3f2e:	e0 e8       	ldi	r30, 0x80	; 128
    3f30:	f6 e0       	ldi	r31, 0x06	; 6
    3f32:	a0 81       	ld	r26, Z
    3f34:	9a 01       	movw	r18, r20
    3f36:	21 50       	subi	r18, 0x01	; 1
    3f38:	31 09       	sbc	r19, r1
    3f3a:	61 e0       	ldi	r22, 0x01	; 1
    3f3c:	70 e0       	ldi	r23, 0x00	; 0
    3f3e:	cb 01       	movw	r24, r22
    3f40:	02 c0       	rjmp	.+4      	; 0x3f46 <pwm_init+0xfe>
    3f42:	88 0f       	add	r24, r24
    3f44:	99 1f       	adc	r25, r25
    3f46:	2a 95       	dec	r18
    3f48:	e2 f7       	brpl	.-8      	; 0x3f42 <pwm_init+0xfa>
    3f4a:	8a 2b       	or	r24, r26
    3f4c:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    3f4e:	4a 83       	std	Y+2, r20	; 0x02
    3f50:	5b 83       	std	Y+3, r21	; 0x03

	/* Set the correct cc_mask */
	switch (channel) {
    3f52:	42 30       	cpi	r20, 0x02	; 2
    3f54:	51 05       	cpc	r21, r1
    3f56:	89 f0       	breq	.+34     	; 0x3f7a <pwm_init+0x132>
    3f58:	20 f4       	brcc	.+8      	; 0x3f62 <pwm_init+0x11a>
    3f5a:	41 30       	cpi	r20, 0x01	; 1
    3f5c:	51 05       	cpc	r21, r1
    3f5e:	d9 f4       	brne	.+54     	; 0x3f96 <pwm_init+0x14e>
    3f60:	07 c0       	rjmp	.+14     	; 0x3f70 <pwm_init+0x128>
    3f62:	43 30       	cpi	r20, 0x03	; 3
    3f64:	51 05       	cpc	r21, r1
    3f66:	71 f0       	breq	.+28     	; 0x3f84 <pwm_init+0x13c>
    3f68:	44 30       	cpi	r20, 0x04	; 4
    3f6a:	51 05       	cpc	r21, r1
    3f6c:	a1 f4       	brne	.+40     	; 0x3f96 <pwm_init+0x14e>
    3f6e:	0f c0       	rjmp	.+30     	; 0x3f8e <pwm_init+0x146>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    3f70:	80 e1       	ldi	r24, 0x10	; 16
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	8c 83       	std	Y+4, r24	; 0x04
    3f76:	9d 83       	std	Y+5, r25	; 0x05
		break;
    3f78:	0e c0       	rjmp	.+28     	; 0x3f96 <pwm_init+0x14e>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    3f7a:	80 e2       	ldi	r24, 0x20	; 32
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	8c 83       	std	Y+4, r24	; 0x04
    3f80:	9d 83       	std	Y+5, r25	; 0x05
		break;
    3f82:	09 c0       	rjmp	.+18     	; 0x3f96 <pwm_init+0x14e>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    3f84:	80 e4       	ldi	r24, 0x40	; 64
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	8c 83       	std	Y+4, r24	; 0x04
    3f8a:	9d 83       	std	Y+5, r25	; 0x05
		break;
    3f8c:	04 c0       	rjmp	.+8      	; 0x3f96 <pwm_init+0x14e>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    3f8e:	80 e8       	ldi	r24, 0x80	; 128
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	8c 83       	std	Y+4, r24	; 0x04
    3f94:	9d 83       	std	Y+5, r25	; 0x05
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    3f96:	88 81       	ld	r24, Y
    3f98:	99 81       	ldd	r25, Y+1	; 0x01
    3f9a:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    3f9e:	e8 81       	ld	r30, Y
    3fa0:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    3fa2:	81 81       	ldd	r24, Z+1	; 0x01
    3fa4:	88 7f       	andi	r24, 0xF8	; 248
    3fa6:	83 60       	ori	r24, 0x03	; 3
    3fa8:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    3faa:	18 86       	std	Y+8, r1	; 0x08
    3fac:	19 86       	std	Y+9, r1	; 0x09
	config->clk_sel = PWM_CLK_OFF;
    3fae:	1e 82       	std	Y+6, r1	; 0x06
    3fb0:	1f 82       	std	Y+7, r1	; 0x07
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    3fb2:	e8 81       	ld	r30, Y
    3fb4:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    3fb6:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    3fb8:	80 7f       	andi	r24, 0xF0	; 240
    3fba:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    3fbc:	b8 01       	movw	r22, r16
    3fbe:	ce 01       	movw	r24, r28
    3fc0:	cc de       	rcall	.-616    	; 0x3d5a <pwm_set_frequency>
}
    3fc2:	df 91       	pop	r29
    3fc4:	cf 91       	pop	r28
    3fc6:	1f 91       	pop	r17
    3fc8:	0f 91       	pop	r16
    3fca:	08 95       	ret

00003fcc <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    3fcc:	cf 93       	push	r28
    3fce:	df 93       	push	r29
    3fd0:	ec 01       	movw	r28, r24
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
			(uint16_t)(((uint32_t)config->period *
    3fd2:	a8 85       	ldd	r26, Y+8	; 0x08
    3fd4:	b9 85       	ldd	r27, Y+9	; 0x09
    3fd6:	26 2f       	mov	r18, r22
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	f8 d4       	rcall	.+2544   	; 0x49cc <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    3fdc:	24 e6       	ldi	r18, 0x64	; 100
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	40 e0       	ldi	r20, 0x00	; 0
    3fe2:	50 e0       	ldi	r21, 0x00	; 0
    3fe4:	d1 d4       	rcall	.+2466   	; 0x4988 <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    3fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe8:	9b 81       	ldd	r25, Y+3	; 0x03
    3fea:	e8 81       	ld	r30, Y
    3fec:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    3fee:	e6 fd       	sbrc	r30, 6
    3ff0:	19 c0       	rjmp	.+50     	; 0x4024 <pwm_start+0x58>
		switch (channel_index) {
    3ff2:	82 30       	cpi	r24, 0x02	; 2
    3ff4:	91 05       	cpc	r25, r1
    3ff6:	69 f0       	breq	.+26     	; 0x4012 <pwm_start+0x46>
    3ff8:	18 f4       	brcc	.+6      	; 0x4000 <pwm_start+0x34>
    3ffa:	01 97       	sbiw	r24, 0x01	; 1
    3ffc:	f1 f4       	brne	.+60     	; 0x403a <pwm_start+0x6e>
    3ffe:	06 c0       	rjmp	.+12     	; 0x400c <pwm_start+0x40>
    4000:	83 30       	cpi	r24, 0x03	; 3
    4002:	91 05       	cpc	r25, r1
    4004:	49 f0       	breq	.+18     	; 0x4018 <pwm_start+0x4c>
    4006:	04 97       	sbiw	r24, 0x04	; 4
    4008:	c1 f4       	brne	.+48     	; 0x403a <pwm_start+0x6e>
    400a:	09 c0       	rjmp	.+18     	; 0x401e <pwm_start+0x52>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    400c:	20 af       	std	Z+56, r18	; 0x38
    400e:	31 af       	std	Z+57, r19	; 0x39
    4010:	14 c0       	rjmp	.+40     	; 0x403a <pwm_start+0x6e>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    4012:	22 af       	std	Z+58, r18	; 0x3a
    4014:	33 af       	std	Z+59, r19	; 0x3b
    4016:	11 c0       	rjmp	.+34     	; 0x403a <pwm_start+0x6e>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    4018:	24 af       	std	Z+60, r18	; 0x3c
    401a:	35 af       	std	Z+61, r19	; 0x3d
    401c:	0e c0       	rjmp	.+28     	; 0x403a <pwm_start+0x6e>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    401e:	26 af       	std	Z+62, r18	; 0x3e
    4020:	37 af       	std	Z+63, r19	; 0x3f
    4022:	0b c0       	rjmp	.+22     	; 0x403a <pwm_start+0x6e>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    4024:	81 30       	cpi	r24, 0x01	; 1
    4026:	91 05       	cpc	r25, r1
    4028:	19 f0       	breq	.+6      	; 0x4030 <pwm_start+0x64>
    402a:	02 97       	sbiw	r24, 0x02	; 2
    402c:	31 f4       	brne	.+12     	; 0x403a <pwm_start+0x6e>
    402e:	03 c0       	rjmp	.+6      	; 0x4036 <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    4030:	20 af       	std	Z+56, r18	; 0x38
    4032:	31 af       	std	Z+57, r19	; 0x39
    4034:	02 c0       	rjmp	.+4      	; 0x403a <pwm_start+0x6e>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    4036:	22 af       	std	Z+58, r18	; 0x3a
    4038:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    403a:	88 85       	ldd	r24, Y+8	; 0x08
    403c:	99 85       	ldd	r25, Y+9	; 0x09
    403e:	e8 81       	ld	r30, Y
    4040:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    4042:	86 a3       	std	Z+38, r24	; 0x26
    4044:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    4046:	8c 81       	ldd	r24, Y+4	; 0x04
    4048:	9d 81       	ldd	r25, Y+5	; 0x05
    404a:	e8 81       	ld	r30, Y
    404c:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    404e:	e6 fd       	sbrc	r30, 6
    4050:	04 c0       	rjmp	.+8      	; 0x405a <pwm_start+0x8e>
		((TC0_t *)tc)->CTRLB |= enablemask;
    4052:	91 81       	ldd	r25, Z+1	; 0x01
    4054:	89 2b       	or	r24, r25
    4056:	81 83       	std	Z+1, r24	; 0x01
    4058:	05 c0       	rjmp	.+10     	; 0x4064 <pwm_start+0x98>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    405a:	21 81       	ldd	r18, Z+1	; 0x01
    405c:	80 73       	andi	r24, 0x30	; 48
    405e:	99 27       	eor	r25, r25
    4060:	82 2b       	or	r24, r18
    4062:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    4064:	e8 81       	ld	r30, Y
    4066:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    4068:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    406a:	80 7f       	andi	r24, 0xF0	; 240
    406c:	9e 81       	ldd	r25, Y+6	; 0x06
    406e:	89 2b       	or	r24, r25
    4070:	80 83       	st	Z, r24
}
    4072:	df 91       	pop	r29
    4074:	cf 91       	pop	r28
    4076:	08 95       	ret

00004078 <__vector_88>:
// 		break;
// 		
// 		case 'R':
// 		break;
	}
}
    4078:	1f 92       	push	r1
    407a:	0f 92       	push	r0
    407c:	0f b6       	in	r0, 0x3f	; 63
    407e:	0f 92       	push	r0
    4080:	11 24       	eor	r1, r1
    4082:	2f 93       	push	r18
    4084:	3f 93       	push	r19
    4086:	4f 93       	push	r20
    4088:	5f 93       	push	r21
    408a:	6f 93       	push	r22
    408c:	7f 93       	push	r23
    408e:	8f 93       	push	r24
    4090:	9f 93       	push	r25
    4092:	af 93       	push	r26
    4094:	bf 93       	push	r27
    4096:	ef 93       	push	r30
    4098:	ff 93       	push	r31
    409a:	80 ea       	ldi	r24, 0xA0	; 160
    409c:	99 e0       	ldi	r25, 0x09	; 9
    409e:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <usart_getchar>
    40a2:	83 33       	cpi	r24, 0x33	; 51
    40a4:	b1 f0       	breq	.+44     	; 0x40d2 <__vector_88+0x5a>
    40a6:	28 f4       	brcc	.+10     	; 0x40b2 <__vector_88+0x3a>
    40a8:	81 33       	cpi	r24, 0x31	; 49
    40aa:	49 f0       	breq	.+18     	; 0x40be <__vector_88+0x46>
    40ac:	82 33       	cpi	r24, 0x32	; 50
    40ae:	21 f5       	brne	.+72     	; 0x40f8 <__vector_88+0x80>
    40b0:	0b c0       	rjmp	.+22     	; 0x40c8 <__vector_88+0x50>
    40b2:	85 33       	cpi	r24, 0x35	; 53
    40b4:	c1 f0       	breq	.+48     	; 0x40e6 <__vector_88+0x6e>
    40b6:	90 f0       	brcs	.+36     	; 0x40dc <__vector_88+0x64>
    40b8:	86 33       	cpi	r24, 0x36	; 54
    40ba:	f1 f4       	brne	.+60     	; 0x40f8 <__vector_88+0x80>
    40bc:	19 c0       	rjmp	.+50     	; 0x40f0 <__vector_88+0x78>
    40be:	80 e1       	ldi	r24, 0x10	; 16
    40c0:	e0 e4       	ldi	r30, 0x40	; 64
    40c2:	f6 e0       	ldi	r31, 0x06	; 6
    40c4:	87 83       	std	Z+7, r24	; 0x07
    40c6:	18 c0       	rjmp	.+48     	; 0x40f8 <__vector_88+0x80>
    40c8:	80 e2       	ldi	r24, 0x20	; 32
    40ca:	e0 e4       	ldi	r30, 0x40	; 64
    40cc:	f6 e0       	ldi	r31, 0x06	; 6
    40ce:	87 83       	std	Z+7, r24	; 0x07
    40d0:	13 c0       	rjmp	.+38     	; 0x40f8 <__vector_88+0x80>
    40d2:	80 e8       	ldi	r24, 0x80	; 128
    40d4:	e0 e4       	ldi	r30, 0x40	; 64
    40d6:	f6 e0       	ldi	r31, 0x06	; 6
    40d8:	87 83       	std	Z+7, r24	; 0x07
    40da:	0e c0       	rjmp	.+28     	; 0x40f8 <__vector_88+0x80>
    40dc:	82 e0       	ldi	r24, 0x02	; 2
    40de:	e0 ee       	ldi	r30, 0xE0	; 224
    40e0:	f7 e0       	ldi	r31, 0x07	; 7
    40e2:	87 83       	std	Z+7, r24	; 0x07
    40e4:	09 c0       	rjmp	.+18     	; 0x40f8 <__vector_88+0x80>
    40e6:	81 e0       	ldi	r24, 0x01	; 1
    40e8:	e0 ee       	ldi	r30, 0xE0	; 224
    40ea:	f7 e0       	ldi	r31, 0x07	; 7
    40ec:	87 83       	std	Z+7, r24	; 0x07
    40ee:	04 c0       	rjmp	.+8      	; 0x40f8 <__vector_88+0x80>
    40f0:	80 e4       	ldi	r24, 0x40	; 64
    40f2:	e0 e4       	ldi	r30, 0x40	; 64
    40f4:	f6 e0       	ldi	r31, 0x06	; 6
    40f6:	87 83       	std	Z+7, r24	; 0x07
    40f8:	ff 91       	pop	r31
    40fa:	ef 91       	pop	r30
    40fc:	bf 91       	pop	r27
    40fe:	af 91       	pop	r26
    4100:	9f 91       	pop	r25
    4102:	8f 91       	pop	r24
    4104:	7f 91       	pop	r23
    4106:	6f 91       	pop	r22
    4108:	5f 91       	pop	r21
    410a:	4f 91       	pop	r20
    410c:	3f 91       	pop	r19
    410e:	2f 91       	pop	r18
    4110:	0f 90       	pop	r0
    4112:	0f be       	out	0x3f, r0	; 63
    4114:	0f 90       	pop	r0
    4116:	1f 90       	pop	r1
    4118:	18 95       	reti

0000411a <initial_animation>:
    411a:	2f 92       	push	r2
    411c:	3f 92       	push	r3
    411e:	4f 92       	push	r4
    4120:	5f 92       	push	r5
    4122:	6f 92       	push	r6
    4124:	7f 92       	push	r7
    4126:	8f 92       	push	r8
    4128:	9f 92       	push	r9
    412a:	af 92       	push	r10
    412c:	bf 92       	push	r11
    412e:	cf 92       	push	r12
    4130:	df 92       	push	r13
    4132:	ef 92       	push	r14
    4134:	ff 92       	push	r15
    4136:	0f 93       	push	r16
    4138:	1f 93       	push	r17
    413a:	cf 93       	push	r28
    413c:	df 93       	push	r29
    413e:	00 d0       	rcall	.+0      	; 0x4140 <initial_animation+0x26>
    4140:	cd b7       	in	r28, 0x3d	; 61
    4142:	de b7       	in	r29, 0x3e	; 62
    4144:	82 e3       	ldi	r24, 0x32	; 50
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	89 83       	std	Y+1, r24	; 0x01
    414a:	9a 83       	std	Y+2, r25	; 0x02
    414c:	89 81       	ldd	r24, Y+1	; 0x01
    414e:	9a 81       	ldd	r25, Y+2	; 0x02
    4150:	84 36       	cpi	r24, 0x64	; 100
    4152:	91 05       	cpc	r25, r1
    4154:	0c f0       	brlt	.+2      	; 0x4158 <initial_animation+0x3e>
    4156:	ea c2       	rjmp	.+1492   	; 0x472c <initial_animation+0x612>
    4158:	0f 2e       	mov	r0, r31
    415a:	f0 e4       	ldi	r31, 0x40	; 64
    415c:	8f 2e       	mov	r8, r31
    415e:	f6 e0       	ldi	r31, 0x06	; 6
    4160:	9f 2e       	mov	r9, r31
    4162:	f0 2d       	mov	r31, r0
    4164:	68 94       	set
    4166:	22 24       	eor	r2, r2
    4168:	24 f8       	bld	r2, 4
    416a:	68 94       	set
    416c:	33 24       	eor	r3, r3
    416e:	35 f8       	bld	r3, 5
    4170:	68 94       	set
    4172:	44 24       	eor	r4, r4
    4174:	47 f8       	bld	r4, 7
    4176:	0f 2e       	mov	r0, r31
    4178:	f0 ee       	ldi	r31, 0xE0	; 224
    417a:	6f 2e       	mov	r6, r31
    417c:	f7 e0       	ldi	r31, 0x07	; 7
    417e:	7f 2e       	mov	r7, r31
    4180:	f0 2d       	mov	r31, r0
    4182:	55 24       	eor	r5, r5
    4184:	53 94       	inc	r5
    4186:	f4 01       	movw	r30, r8
    4188:	25 82       	std	Z+5, r2	; 0x05
    418a:	e9 81       	ldd	r30, Y+1	; 0x01
    418c:	fa 81       	ldd	r31, Y+2	; 0x02
    418e:	9f 2f       	mov	r25, r31
    4190:	99 0f       	add	r25, r25
    4192:	99 0b       	sbc	r25, r25
    4194:	a1 2c       	mov	r10, r1
    4196:	0f 2e       	mov	r0, r31
    4198:	fc e6       	ldi	r31, 0x6C	; 108
    419a:	bf 2e       	mov	r11, r31
    419c:	f0 2d       	mov	r31, r0
    419e:	0f 2e       	mov	r0, r31
    41a0:	fc ed       	ldi	r31, 0xDC	; 220
    41a2:	cf 2e       	mov	r12, r31
    41a4:	f0 2d       	mov	r31, r0
    41a6:	68 94       	set
    41a8:	dd 24       	eor	r13, r13
    41aa:	d1 f8       	bld	r13, 1
    41ac:	e1 2c       	mov	r14, r1
    41ae:	f1 2c       	mov	r15, r1
    41b0:	00 e0       	ldi	r16, 0x00	; 0
    41b2:	10 e0       	ldi	r17, 0x00	; 0
    41b4:	2e 2f       	mov	r18, r30
    41b6:	3f 2f       	mov	r19, r31
    41b8:	49 2f       	mov	r20, r25
    41ba:	59 2f       	mov	r21, r25
    41bc:	69 2f       	mov	r22, r25
    41be:	79 2f       	mov	r23, r25
    41c0:	89 2f       	mov	r24, r25
    41c2:	10 d4       	rcall	.+2080   	; 0x49e4 <__muldi3>
    41c4:	29 51       	subi	r18, 0x19	; 25
    41c6:	3c 4f       	sbci	r19, 0xFC	; 252
    41c8:	4f 4f       	sbci	r20, 0xFF	; 255
    41ca:	5f 4f       	sbci	r21, 0xFF	; 255
    41cc:	6f 4f       	sbci	r22, 0xFF	; 255
    41ce:	7f 4f       	sbci	r23, 0xFF	; 255
    41d0:	8f 4f       	sbci	r24, 0xFF	; 255
    41d2:	9f 4f       	sbci	r25, 0xFF	; 255
    41d4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatundisf>
    41d8:	20 e0       	ldi	r18, 0x00	; 0
    41da:	30 e8       	ldi	r19, 0x80	; 128
    41dc:	4b eb       	ldi	r20, 0xBB	; 187
    41de:	55 e4       	ldi	r21, 0x45	; 69
    41e0:	0e 94 27 05 	call	0xa4e	; 0xa4e <__divsf3>
    41e4:	0e 94 4b 01 	call	0x296	; 0x296 <__fixunssfdi>
    41e8:	f2 2f       	mov	r31, r18
    41ea:	e3 2f       	mov	r30, r19
    41ec:	8f 2f       	mov	r24, r31
    41ee:	9e 2f       	mov	r25, r30
    41f0:	a4 2f       	mov	r26, r20
    41f2:	b5 2f       	mov	r27, r21
    41f4:	01 97       	sbiw	r24, 0x01	; 1
    41f6:	a1 09       	sbc	r26, r1
    41f8:	b1 09       	sbc	r27, r1
    41fa:	e1 f7       	brne	.-8      	; 0x41f4 <initial_animation+0xda>
    41fc:	f4 01       	movw	r30, r8
    41fe:	35 82       	std	Z+5, r3	; 0x05
    4200:	e9 81       	ldd	r30, Y+1	; 0x01
    4202:	fa 81       	ldd	r31, Y+2	; 0x02
    4204:	9f 2f       	mov	r25, r31
    4206:	99 0f       	add	r25, r25
    4208:	99 0b       	sbc	r25, r25
    420a:	a1 2c       	mov	r10, r1
    420c:	0f 2e       	mov	r0, r31
    420e:	fc e6       	ldi	r31, 0x6C	; 108
    4210:	bf 2e       	mov	r11, r31
    4212:	f0 2d       	mov	r31, r0
    4214:	0f 2e       	mov	r0, r31
    4216:	fc ed       	ldi	r31, 0xDC	; 220
    4218:	cf 2e       	mov	r12, r31
    421a:	f0 2d       	mov	r31, r0
    421c:	68 94       	set
    421e:	dd 24       	eor	r13, r13
    4220:	d1 f8       	bld	r13, 1
    4222:	e1 2c       	mov	r14, r1
    4224:	f1 2c       	mov	r15, r1
    4226:	00 e0       	ldi	r16, 0x00	; 0
    4228:	10 e0       	ldi	r17, 0x00	; 0
    422a:	2e 2f       	mov	r18, r30
    422c:	3f 2f       	mov	r19, r31
    422e:	49 2f       	mov	r20, r25
    4230:	59 2f       	mov	r21, r25
    4232:	69 2f       	mov	r22, r25
    4234:	79 2f       	mov	r23, r25
    4236:	89 2f       	mov	r24, r25
    4238:	d5 d3       	rcall	.+1962   	; 0x49e4 <__muldi3>
    423a:	29 51       	subi	r18, 0x19	; 25
    423c:	3c 4f       	sbci	r19, 0xFC	; 252
    423e:	4f 4f       	sbci	r20, 0xFF	; 255
    4240:	5f 4f       	sbci	r21, 0xFF	; 255
    4242:	6f 4f       	sbci	r22, 0xFF	; 255
    4244:	7f 4f       	sbci	r23, 0xFF	; 255
    4246:	8f 4f       	sbci	r24, 0xFF	; 255
    4248:	9f 4f       	sbci	r25, 0xFF	; 255
    424a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatundisf>
    424e:	20 e0       	ldi	r18, 0x00	; 0
    4250:	30 e8       	ldi	r19, 0x80	; 128
    4252:	4b eb       	ldi	r20, 0xBB	; 187
    4254:	55 e4       	ldi	r21, 0x45	; 69
    4256:	0e 94 27 05 	call	0xa4e	; 0xa4e <__divsf3>
    425a:	0e 94 4b 01 	call	0x296	; 0x296 <__fixunssfdi>
    425e:	f2 2f       	mov	r31, r18
    4260:	e3 2f       	mov	r30, r19
    4262:	8f 2f       	mov	r24, r31
    4264:	9e 2f       	mov	r25, r30
    4266:	a4 2f       	mov	r26, r20
    4268:	b5 2f       	mov	r27, r21
    426a:	01 97       	sbiw	r24, 0x01	; 1
    426c:	a1 09       	sbc	r26, r1
    426e:	b1 09       	sbc	r27, r1
    4270:	e1 f7       	brne	.-8      	; 0x426a <initial_animation+0x150>
    4272:	f4 01       	movw	r30, r8
    4274:	45 82       	std	Z+5, r4	; 0x05
    4276:	e9 81       	ldd	r30, Y+1	; 0x01
    4278:	fa 81       	ldd	r31, Y+2	; 0x02
    427a:	9f 2f       	mov	r25, r31
    427c:	99 0f       	add	r25, r25
    427e:	99 0b       	sbc	r25, r25
    4280:	a1 2c       	mov	r10, r1
    4282:	0f 2e       	mov	r0, r31
    4284:	fc e6       	ldi	r31, 0x6C	; 108
    4286:	bf 2e       	mov	r11, r31
    4288:	f0 2d       	mov	r31, r0
    428a:	0f 2e       	mov	r0, r31
    428c:	fc ed       	ldi	r31, 0xDC	; 220
    428e:	cf 2e       	mov	r12, r31
    4290:	f0 2d       	mov	r31, r0
    4292:	68 94       	set
    4294:	dd 24       	eor	r13, r13
    4296:	d1 f8       	bld	r13, 1
    4298:	e1 2c       	mov	r14, r1
    429a:	f1 2c       	mov	r15, r1
    429c:	00 e0       	ldi	r16, 0x00	; 0
    429e:	10 e0       	ldi	r17, 0x00	; 0
    42a0:	2e 2f       	mov	r18, r30
    42a2:	3f 2f       	mov	r19, r31
    42a4:	49 2f       	mov	r20, r25
    42a6:	59 2f       	mov	r21, r25
    42a8:	69 2f       	mov	r22, r25
    42aa:	79 2f       	mov	r23, r25
    42ac:	89 2f       	mov	r24, r25
    42ae:	9a d3       	rcall	.+1844   	; 0x49e4 <__muldi3>
    42b0:	29 51       	subi	r18, 0x19	; 25
    42b2:	3c 4f       	sbci	r19, 0xFC	; 252
    42b4:	4f 4f       	sbci	r20, 0xFF	; 255
    42b6:	5f 4f       	sbci	r21, 0xFF	; 255
    42b8:	6f 4f       	sbci	r22, 0xFF	; 255
    42ba:	7f 4f       	sbci	r23, 0xFF	; 255
    42bc:	8f 4f       	sbci	r24, 0xFF	; 255
    42be:	9f 4f       	sbci	r25, 0xFF	; 255
    42c0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatundisf>
    42c4:	20 e0       	ldi	r18, 0x00	; 0
    42c6:	30 e8       	ldi	r19, 0x80	; 128
    42c8:	4b eb       	ldi	r20, 0xBB	; 187
    42ca:	55 e4       	ldi	r21, 0x45	; 69
    42cc:	0e 94 27 05 	call	0xa4e	; 0xa4e <__divsf3>
    42d0:	0e 94 4b 01 	call	0x296	; 0x296 <__fixunssfdi>
    42d4:	f2 2f       	mov	r31, r18
    42d6:	e3 2f       	mov	r30, r19
    42d8:	8f 2f       	mov	r24, r31
    42da:	9e 2f       	mov	r25, r30
    42dc:	a4 2f       	mov	r26, r20
    42de:	b5 2f       	mov	r27, r21
    42e0:	01 97       	sbiw	r24, 0x01	; 1
    42e2:	a1 09       	sbc	r26, r1
    42e4:	b1 09       	sbc	r27, r1
    42e6:	e1 f7       	brne	.-8      	; 0x42e0 <initial_animation+0x1c6>
    42e8:	82 e0       	ldi	r24, 0x02	; 2
    42ea:	f3 01       	movw	r30, r6
    42ec:	85 83       	std	Z+5, r24	; 0x05
    42ee:	e9 81       	ldd	r30, Y+1	; 0x01
    42f0:	fa 81       	ldd	r31, Y+2	; 0x02
    42f2:	9f 2f       	mov	r25, r31
    42f4:	99 0f       	add	r25, r25
    42f6:	99 0b       	sbc	r25, r25
    42f8:	a1 2c       	mov	r10, r1
    42fa:	0f 2e       	mov	r0, r31
    42fc:	fc e6       	ldi	r31, 0x6C	; 108
    42fe:	bf 2e       	mov	r11, r31
    4300:	f0 2d       	mov	r31, r0
    4302:	0f 2e       	mov	r0, r31
    4304:	fc ed       	ldi	r31, 0xDC	; 220
    4306:	cf 2e       	mov	r12, r31
    4308:	f0 2d       	mov	r31, r0
    430a:	68 94       	set
    430c:	dd 24       	eor	r13, r13
    430e:	d1 f8       	bld	r13, 1
    4310:	e1 2c       	mov	r14, r1
    4312:	f1 2c       	mov	r15, r1
    4314:	00 e0       	ldi	r16, 0x00	; 0
    4316:	10 e0       	ldi	r17, 0x00	; 0
    4318:	2e 2f       	mov	r18, r30
    431a:	3f 2f       	mov	r19, r31
    431c:	49 2f       	mov	r20, r25
    431e:	59 2f       	mov	r21, r25
    4320:	69 2f       	mov	r22, r25
    4322:	79 2f       	mov	r23, r25
    4324:	89 2f       	mov	r24, r25
    4326:	5e d3       	rcall	.+1724   	; 0x49e4 <__muldi3>
    4328:	29 51       	subi	r18, 0x19	; 25
    432a:	3c 4f       	sbci	r19, 0xFC	; 252
    432c:	4f 4f       	sbci	r20, 0xFF	; 255
    432e:	5f 4f       	sbci	r21, 0xFF	; 255
    4330:	6f 4f       	sbci	r22, 0xFF	; 255
    4332:	7f 4f       	sbci	r23, 0xFF	; 255
    4334:	8f 4f       	sbci	r24, 0xFF	; 255
    4336:	9f 4f       	sbci	r25, 0xFF	; 255
    4338:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatundisf>
    433c:	20 e0       	ldi	r18, 0x00	; 0
    433e:	30 e8       	ldi	r19, 0x80	; 128
    4340:	4b eb       	ldi	r20, 0xBB	; 187
    4342:	55 e4       	ldi	r21, 0x45	; 69
    4344:	0e 94 27 05 	call	0xa4e	; 0xa4e <__divsf3>
    4348:	0e 94 4b 01 	call	0x296	; 0x296 <__fixunssfdi>
    434c:	f2 2f       	mov	r31, r18
    434e:	e3 2f       	mov	r30, r19
    4350:	8f 2f       	mov	r24, r31
    4352:	9e 2f       	mov	r25, r30
    4354:	a4 2f       	mov	r26, r20
    4356:	b5 2f       	mov	r27, r21
    4358:	01 97       	sbiw	r24, 0x01	; 1
    435a:	a1 09       	sbc	r26, r1
    435c:	b1 09       	sbc	r27, r1
    435e:	e1 f7       	brne	.-8      	; 0x4358 <initial_animation+0x23e>
    4360:	f3 01       	movw	r30, r6
    4362:	55 82       	std	Z+5, r5	; 0x05
    4364:	e9 81       	ldd	r30, Y+1	; 0x01
    4366:	fa 81       	ldd	r31, Y+2	; 0x02
    4368:	9f 2f       	mov	r25, r31
    436a:	99 0f       	add	r25, r25
    436c:	99 0b       	sbc	r25, r25
    436e:	a1 2c       	mov	r10, r1
    4370:	0f 2e       	mov	r0, r31
    4372:	fc e6       	ldi	r31, 0x6C	; 108
    4374:	bf 2e       	mov	r11, r31
    4376:	f0 2d       	mov	r31, r0
    4378:	0f 2e       	mov	r0, r31
    437a:	fc ed       	ldi	r31, 0xDC	; 220
    437c:	cf 2e       	mov	r12, r31
    437e:	f0 2d       	mov	r31, r0
    4380:	68 94       	set
    4382:	dd 24       	eor	r13, r13
    4384:	d1 f8       	bld	r13, 1
    4386:	e1 2c       	mov	r14, r1
    4388:	f1 2c       	mov	r15, r1
    438a:	00 e0       	ldi	r16, 0x00	; 0
    438c:	10 e0       	ldi	r17, 0x00	; 0
    438e:	2e 2f       	mov	r18, r30
    4390:	3f 2f       	mov	r19, r31
    4392:	49 2f       	mov	r20, r25
    4394:	59 2f       	mov	r21, r25
    4396:	69 2f       	mov	r22, r25
    4398:	79 2f       	mov	r23, r25
    439a:	89 2f       	mov	r24, r25
    439c:	23 d3       	rcall	.+1606   	; 0x49e4 <__muldi3>
    439e:	29 51       	subi	r18, 0x19	; 25
    43a0:	3c 4f       	sbci	r19, 0xFC	; 252
    43a2:	4f 4f       	sbci	r20, 0xFF	; 255
    43a4:	5f 4f       	sbci	r21, 0xFF	; 255
    43a6:	6f 4f       	sbci	r22, 0xFF	; 255
    43a8:	7f 4f       	sbci	r23, 0xFF	; 255
    43aa:	8f 4f       	sbci	r24, 0xFF	; 255
    43ac:	9f 4f       	sbci	r25, 0xFF	; 255
    43ae:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatundisf>
    43b2:	20 e0       	ldi	r18, 0x00	; 0
    43b4:	30 e8       	ldi	r19, 0x80	; 128
    43b6:	4b eb       	ldi	r20, 0xBB	; 187
    43b8:	55 e4       	ldi	r21, 0x45	; 69
    43ba:	0e 94 27 05 	call	0xa4e	; 0xa4e <__divsf3>
    43be:	0e 94 4b 01 	call	0x296	; 0x296 <__fixunssfdi>
    43c2:	f2 2f       	mov	r31, r18
    43c4:	e3 2f       	mov	r30, r19
    43c6:	8f 2f       	mov	r24, r31
    43c8:	9e 2f       	mov	r25, r30
    43ca:	a4 2f       	mov	r26, r20
    43cc:	b5 2f       	mov	r27, r21
    43ce:	01 97       	sbiw	r24, 0x01	; 1
    43d0:	a1 09       	sbc	r26, r1
    43d2:	b1 09       	sbc	r27, r1
    43d4:	e1 f7       	brne	.-8      	; 0x43ce <initial_animation+0x2b4>
    43d6:	80 e4       	ldi	r24, 0x40	; 64
    43d8:	f4 01       	movw	r30, r8
    43da:	85 83       	std	Z+5, r24	; 0x05
    43dc:	e9 81       	ldd	r30, Y+1	; 0x01
    43de:	fa 81       	ldd	r31, Y+2	; 0x02
    43e0:	9f 2f       	mov	r25, r31
    43e2:	99 0f       	add	r25, r25
    43e4:	99 0b       	sbc	r25, r25
    43e6:	a1 2c       	mov	r10, r1
    43e8:	0f 2e       	mov	r0, r31
    43ea:	fc e6       	ldi	r31, 0x6C	; 108
    43ec:	bf 2e       	mov	r11, r31
    43ee:	f0 2d       	mov	r31, r0
    43f0:	0f 2e       	mov	r0, r31
    43f2:	fc ed       	ldi	r31, 0xDC	; 220
    43f4:	cf 2e       	mov	r12, r31
    43f6:	f0 2d       	mov	r31, r0
    43f8:	68 94       	set
    43fa:	dd 24       	eor	r13, r13
    43fc:	d1 f8       	bld	r13, 1
    43fe:	e1 2c       	mov	r14, r1
    4400:	f1 2c       	mov	r15, r1
    4402:	00 e0       	ldi	r16, 0x00	; 0
    4404:	10 e0       	ldi	r17, 0x00	; 0
    4406:	2e 2f       	mov	r18, r30
    4408:	3f 2f       	mov	r19, r31
    440a:	49 2f       	mov	r20, r25
    440c:	59 2f       	mov	r21, r25
    440e:	69 2f       	mov	r22, r25
    4410:	79 2f       	mov	r23, r25
    4412:	89 2f       	mov	r24, r25
    4414:	e7 d2       	rcall	.+1486   	; 0x49e4 <__muldi3>
    4416:	29 51       	subi	r18, 0x19	; 25
    4418:	3c 4f       	sbci	r19, 0xFC	; 252
    441a:	4f 4f       	sbci	r20, 0xFF	; 255
    441c:	5f 4f       	sbci	r21, 0xFF	; 255
    441e:	6f 4f       	sbci	r22, 0xFF	; 255
    4420:	7f 4f       	sbci	r23, 0xFF	; 255
    4422:	8f 4f       	sbci	r24, 0xFF	; 255
    4424:	9f 4f       	sbci	r25, 0xFF	; 255
    4426:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatundisf>
    442a:	20 e0       	ldi	r18, 0x00	; 0
    442c:	30 e8       	ldi	r19, 0x80	; 128
    442e:	4b eb       	ldi	r20, 0xBB	; 187
    4430:	55 e4       	ldi	r21, 0x45	; 69
    4432:	0e 94 27 05 	call	0xa4e	; 0xa4e <__divsf3>
    4436:	0e 94 4b 01 	call	0x296	; 0x296 <__fixunssfdi>
    443a:	f2 2f       	mov	r31, r18
    443c:	e3 2f       	mov	r30, r19
    443e:	8f 2f       	mov	r24, r31
    4440:	9e 2f       	mov	r25, r30
    4442:	a4 2f       	mov	r26, r20
    4444:	b5 2f       	mov	r27, r21
    4446:	01 97       	sbiw	r24, 0x01	; 1
    4448:	a1 09       	sbc	r26, r1
    444a:	b1 09       	sbc	r27, r1
    444c:	e1 f7       	brne	.-8      	; 0x4446 <initial_animation+0x32c>
    444e:	f4 01       	movw	r30, r8
    4450:	26 82       	std	Z+6, r2	; 0x06
    4452:	e9 81       	ldd	r30, Y+1	; 0x01
    4454:	fa 81       	ldd	r31, Y+2	; 0x02
    4456:	9f 2f       	mov	r25, r31
    4458:	99 0f       	add	r25, r25
    445a:	99 0b       	sbc	r25, r25
    445c:	a1 2c       	mov	r10, r1
    445e:	0f 2e       	mov	r0, r31
    4460:	fc e6       	ldi	r31, 0x6C	; 108
    4462:	bf 2e       	mov	r11, r31
    4464:	f0 2d       	mov	r31, r0
    4466:	0f 2e       	mov	r0, r31
    4468:	fc ed       	ldi	r31, 0xDC	; 220
    446a:	cf 2e       	mov	r12, r31
    446c:	f0 2d       	mov	r31, r0
    446e:	68 94       	set
    4470:	dd 24       	eor	r13, r13
    4472:	d1 f8       	bld	r13, 1
    4474:	e1 2c       	mov	r14, r1
    4476:	f1 2c       	mov	r15, r1
    4478:	00 e0       	ldi	r16, 0x00	; 0
    447a:	10 e0       	ldi	r17, 0x00	; 0
    447c:	2e 2f       	mov	r18, r30
    447e:	3f 2f       	mov	r19, r31
    4480:	49 2f       	mov	r20, r25
    4482:	59 2f       	mov	r21, r25
    4484:	69 2f       	mov	r22, r25
    4486:	79 2f       	mov	r23, r25
    4488:	89 2f       	mov	r24, r25
    448a:	ac d2       	rcall	.+1368   	; 0x49e4 <__muldi3>
    448c:	29 51       	subi	r18, 0x19	; 25
    448e:	3c 4f       	sbci	r19, 0xFC	; 252
    4490:	4f 4f       	sbci	r20, 0xFF	; 255
    4492:	5f 4f       	sbci	r21, 0xFF	; 255
    4494:	6f 4f       	sbci	r22, 0xFF	; 255
    4496:	7f 4f       	sbci	r23, 0xFF	; 255
    4498:	8f 4f       	sbci	r24, 0xFF	; 255
    449a:	9f 4f       	sbci	r25, 0xFF	; 255
    449c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatundisf>
    44a0:	20 e0       	ldi	r18, 0x00	; 0
    44a2:	30 e8       	ldi	r19, 0x80	; 128
    44a4:	4b eb       	ldi	r20, 0xBB	; 187
    44a6:	55 e4       	ldi	r21, 0x45	; 69
    44a8:	0e 94 27 05 	call	0xa4e	; 0xa4e <__divsf3>
    44ac:	0e 94 4b 01 	call	0x296	; 0x296 <__fixunssfdi>
    44b0:	f2 2f       	mov	r31, r18
    44b2:	e3 2f       	mov	r30, r19
    44b4:	8f 2f       	mov	r24, r31
    44b6:	9e 2f       	mov	r25, r30
    44b8:	a4 2f       	mov	r26, r20
    44ba:	b5 2f       	mov	r27, r21
    44bc:	01 97       	sbiw	r24, 0x01	; 1
    44be:	a1 09       	sbc	r26, r1
    44c0:	b1 09       	sbc	r27, r1
    44c2:	e1 f7       	brne	.-8      	; 0x44bc <initial_animation+0x3a2>
    44c4:	f4 01       	movw	r30, r8
    44c6:	36 82       	std	Z+6, r3	; 0x06
    44c8:	e9 81       	ldd	r30, Y+1	; 0x01
    44ca:	fa 81       	ldd	r31, Y+2	; 0x02
    44cc:	9f 2f       	mov	r25, r31
    44ce:	99 0f       	add	r25, r25
    44d0:	99 0b       	sbc	r25, r25
    44d2:	a1 2c       	mov	r10, r1
    44d4:	0f 2e       	mov	r0, r31
    44d6:	fc e6       	ldi	r31, 0x6C	; 108
    44d8:	bf 2e       	mov	r11, r31
    44da:	f0 2d       	mov	r31, r0
    44dc:	0f 2e       	mov	r0, r31
    44de:	fc ed       	ldi	r31, 0xDC	; 220
    44e0:	cf 2e       	mov	r12, r31
    44e2:	f0 2d       	mov	r31, r0
    44e4:	68 94       	set
    44e6:	dd 24       	eor	r13, r13
    44e8:	d1 f8       	bld	r13, 1
    44ea:	e1 2c       	mov	r14, r1
    44ec:	f1 2c       	mov	r15, r1
    44ee:	00 e0       	ldi	r16, 0x00	; 0
    44f0:	10 e0       	ldi	r17, 0x00	; 0
    44f2:	2e 2f       	mov	r18, r30
    44f4:	3f 2f       	mov	r19, r31
    44f6:	49 2f       	mov	r20, r25
    44f8:	59 2f       	mov	r21, r25
    44fa:	69 2f       	mov	r22, r25
    44fc:	79 2f       	mov	r23, r25
    44fe:	89 2f       	mov	r24, r25
    4500:	71 d2       	rcall	.+1250   	; 0x49e4 <__muldi3>
    4502:	29 51       	subi	r18, 0x19	; 25
    4504:	3c 4f       	sbci	r19, 0xFC	; 252
    4506:	4f 4f       	sbci	r20, 0xFF	; 255
    4508:	5f 4f       	sbci	r21, 0xFF	; 255
    450a:	6f 4f       	sbci	r22, 0xFF	; 255
    450c:	7f 4f       	sbci	r23, 0xFF	; 255
    450e:	8f 4f       	sbci	r24, 0xFF	; 255
    4510:	9f 4f       	sbci	r25, 0xFF	; 255
    4512:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatundisf>
    4516:	20 e0       	ldi	r18, 0x00	; 0
    4518:	30 e8       	ldi	r19, 0x80	; 128
    451a:	4b eb       	ldi	r20, 0xBB	; 187
    451c:	55 e4       	ldi	r21, 0x45	; 69
    451e:	0e 94 27 05 	call	0xa4e	; 0xa4e <__divsf3>
    4522:	0e 94 4b 01 	call	0x296	; 0x296 <__fixunssfdi>
    4526:	f2 2f       	mov	r31, r18
    4528:	e3 2f       	mov	r30, r19
    452a:	8f 2f       	mov	r24, r31
    452c:	9e 2f       	mov	r25, r30
    452e:	a4 2f       	mov	r26, r20
    4530:	b5 2f       	mov	r27, r21
    4532:	01 97       	sbiw	r24, 0x01	; 1
    4534:	a1 09       	sbc	r26, r1
    4536:	b1 09       	sbc	r27, r1
    4538:	e1 f7       	brne	.-8      	; 0x4532 <initial_animation+0x418>
    453a:	f4 01       	movw	r30, r8
    453c:	46 82       	std	Z+6, r4	; 0x06
    453e:	e9 81       	ldd	r30, Y+1	; 0x01
    4540:	fa 81       	ldd	r31, Y+2	; 0x02
    4542:	9f 2f       	mov	r25, r31
    4544:	99 0f       	add	r25, r25
    4546:	99 0b       	sbc	r25, r25
    4548:	a1 2c       	mov	r10, r1
    454a:	0f 2e       	mov	r0, r31
    454c:	fc e6       	ldi	r31, 0x6C	; 108
    454e:	bf 2e       	mov	r11, r31
    4550:	f0 2d       	mov	r31, r0
    4552:	0f 2e       	mov	r0, r31
    4554:	fc ed       	ldi	r31, 0xDC	; 220
    4556:	cf 2e       	mov	r12, r31
    4558:	f0 2d       	mov	r31, r0
    455a:	68 94       	set
    455c:	dd 24       	eor	r13, r13
    455e:	d1 f8       	bld	r13, 1
    4560:	e1 2c       	mov	r14, r1
    4562:	f1 2c       	mov	r15, r1
    4564:	00 e0       	ldi	r16, 0x00	; 0
    4566:	10 e0       	ldi	r17, 0x00	; 0
    4568:	2e 2f       	mov	r18, r30
    456a:	3f 2f       	mov	r19, r31
    456c:	49 2f       	mov	r20, r25
    456e:	59 2f       	mov	r21, r25
    4570:	69 2f       	mov	r22, r25
    4572:	79 2f       	mov	r23, r25
    4574:	89 2f       	mov	r24, r25
    4576:	36 d2       	rcall	.+1132   	; 0x49e4 <__muldi3>
    4578:	29 51       	subi	r18, 0x19	; 25
    457a:	3c 4f       	sbci	r19, 0xFC	; 252
    457c:	4f 4f       	sbci	r20, 0xFF	; 255
    457e:	5f 4f       	sbci	r21, 0xFF	; 255
    4580:	6f 4f       	sbci	r22, 0xFF	; 255
    4582:	7f 4f       	sbci	r23, 0xFF	; 255
    4584:	8f 4f       	sbci	r24, 0xFF	; 255
    4586:	9f 4f       	sbci	r25, 0xFF	; 255
    4588:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatundisf>
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	30 e8       	ldi	r19, 0x80	; 128
    4590:	4b eb       	ldi	r20, 0xBB	; 187
    4592:	55 e4       	ldi	r21, 0x45	; 69
    4594:	0e 94 27 05 	call	0xa4e	; 0xa4e <__divsf3>
    4598:	0e 94 4b 01 	call	0x296	; 0x296 <__fixunssfdi>
    459c:	f2 2f       	mov	r31, r18
    459e:	e3 2f       	mov	r30, r19
    45a0:	8f 2f       	mov	r24, r31
    45a2:	9e 2f       	mov	r25, r30
    45a4:	a4 2f       	mov	r26, r20
    45a6:	b5 2f       	mov	r27, r21
    45a8:	01 97       	sbiw	r24, 0x01	; 1
    45aa:	a1 09       	sbc	r26, r1
    45ac:	b1 09       	sbc	r27, r1
    45ae:	e1 f7       	brne	.-8      	; 0x45a8 <initial_animation+0x48e>
    45b0:	82 e0       	ldi	r24, 0x02	; 2
    45b2:	f3 01       	movw	r30, r6
    45b4:	86 83       	std	Z+6, r24	; 0x06
    45b6:	e9 81       	ldd	r30, Y+1	; 0x01
    45b8:	fa 81       	ldd	r31, Y+2	; 0x02
    45ba:	9f 2f       	mov	r25, r31
    45bc:	99 0f       	add	r25, r25
    45be:	99 0b       	sbc	r25, r25
    45c0:	a1 2c       	mov	r10, r1
    45c2:	0f 2e       	mov	r0, r31
    45c4:	fc e6       	ldi	r31, 0x6C	; 108
    45c6:	bf 2e       	mov	r11, r31
    45c8:	f0 2d       	mov	r31, r0
    45ca:	0f 2e       	mov	r0, r31
    45cc:	fc ed       	ldi	r31, 0xDC	; 220
    45ce:	cf 2e       	mov	r12, r31
    45d0:	f0 2d       	mov	r31, r0
    45d2:	68 94       	set
    45d4:	dd 24       	eor	r13, r13
    45d6:	d1 f8       	bld	r13, 1
    45d8:	e1 2c       	mov	r14, r1
    45da:	f1 2c       	mov	r15, r1
    45dc:	00 e0       	ldi	r16, 0x00	; 0
    45de:	10 e0       	ldi	r17, 0x00	; 0
    45e0:	2e 2f       	mov	r18, r30
    45e2:	3f 2f       	mov	r19, r31
    45e4:	49 2f       	mov	r20, r25
    45e6:	59 2f       	mov	r21, r25
    45e8:	69 2f       	mov	r22, r25
    45ea:	79 2f       	mov	r23, r25
    45ec:	89 2f       	mov	r24, r25
    45ee:	fa d1       	rcall	.+1012   	; 0x49e4 <__muldi3>
    45f0:	29 51       	subi	r18, 0x19	; 25
    45f2:	3c 4f       	sbci	r19, 0xFC	; 252
    45f4:	4f 4f       	sbci	r20, 0xFF	; 255
    45f6:	5f 4f       	sbci	r21, 0xFF	; 255
    45f8:	6f 4f       	sbci	r22, 0xFF	; 255
    45fa:	7f 4f       	sbci	r23, 0xFF	; 255
    45fc:	8f 4f       	sbci	r24, 0xFF	; 255
    45fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4600:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatundisf>
    4604:	20 e0       	ldi	r18, 0x00	; 0
    4606:	30 e8       	ldi	r19, 0x80	; 128
    4608:	4b eb       	ldi	r20, 0xBB	; 187
    460a:	55 e4       	ldi	r21, 0x45	; 69
    460c:	0e 94 27 05 	call	0xa4e	; 0xa4e <__divsf3>
    4610:	0e 94 4b 01 	call	0x296	; 0x296 <__fixunssfdi>
    4614:	f2 2f       	mov	r31, r18
    4616:	e3 2f       	mov	r30, r19
    4618:	8f 2f       	mov	r24, r31
    461a:	9e 2f       	mov	r25, r30
    461c:	a4 2f       	mov	r26, r20
    461e:	b5 2f       	mov	r27, r21
    4620:	01 97       	sbiw	r24, 0x01	; 1
    4622:	a1 09       	sbc	r26, r1
    4624:	b1 09       	sbc	r27, r1
    4626:	e1 f7       	brne	.-8      	; 0x4620 <initial_animation+0x506>
    4628:	f3 01       	movw	r30, r6
    462a:	56 82       	std	Z+6, r5	; 0x06
    462c:	e9 81       	ldd	r30, Y+1	; 0x01
    462e:	fa 81       	ldd	r31, Y+2	; 0x02
    4630:	9f 2f       	mov	r25, r31
    4632:	99 0f       	add	r25, r25
    4634:	99 0b       	sbc	r25, r25
    4636:	a1 2c       	mov	r10, r1
    4638:	0f 2e       	mov	r0, r31
    463a:	fc e6       	ldi	r31, 0x6C	; 108
    463c:	bf 2e       	mov	r11, r31
    463e:	f0 2d       	mov	r31, r0
    4640:	0f 2e       	mov	r0, r31
    4642:	fc ed       	ldi	r31, 0xDC	; 220
    4644:	cf 2e       	mov	r12, r31
    4646:	f0 2d       	mov	r31, r0
    4648:	68 94       	set
    464a:	dd 24       	eor	r13, r13
    464c:	d1 f8       	bld	r13, 1
    464e:	e1 2c       	mov	r14, r1
    4650:	f1 2c       	mov	r15, r1
    4652:	00 e0       	ldi	r16, 0x00	; 0
    4654:	10 e0       	ldi	r17, 0x00	; 0
    4656:	2e 2f       	mov	r18, r30
    4658:	3f 2f       	mov	r19, r31
    465a:	49 2f       	mov	r20, r25
    465c:	59 2f       	mov	r21, r25
    465e:	69 2f       	mov	r22, r25
    4660:	79 2f       	mov	r23, r25
    4662:	89 2f       	mov	r24, r25
    4664:	bf d1       	rcall	.+894    	; 0x49e4 <__muldi3>
    4666:	29 51       	subi	r18, 0x19	; 25
    4668:	3c 4f       	sbci	r19, 0xFC	; 252
    466a:	4f 4f       	sbci	r20, 0xFF	; 255
    466c:	5f 4f       	sbci	r21, 0xFF	; 255
    466e:	6f 4f       	sbci	r22, 0xFF	; 255
    4670:	7f 4f       	sbci	r23, 0xFF	; 255
    4672:	8f 4f       	sbci	r24, 0xFF	; 255
    4674:	9f 4f       	sbci	r25, 0xFF	; 255
    4676:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatundisf>
    467a:	20 e0       	ldi	r18, 0x00	; 0
    467c:	30 e8       	ldi	r19, 0x80	; 128
    467e:	4b eb       	ldi	r20, 0xBB	; 187
    4680:	55 e4       	ldi	r21, 0x45	; 69
    4682:	0e 94 27 05 	call	0xa4e	; 0xa4e <__divsf3>
    4686:	0e 94 4b 01 	call	0x296	; 0x296 <__fixunssfdi>
    468a:	f2 2f       	mov	r31, r18
    468c:	e3 2f       	mov	r30, r19
    468e:	8f 2f       	mov	r24, r31
    4690:	9e 2f       	mov	r25, r30
    4692:	a4 2f       	mov	r26, r20
    4694:	b5 2f       	mov	r27, r21
    4696:	01 97       	sbiw	r24, 0x01	; 1
    4698:	a1 09       	sbc	r26, r1
    469a:	b1 09       	sbc	r27, r1
    469c:	e1 f7       	brne	.-8      	; 0x4696 <initial_animation+0x57c>
    469e:	80 e4       	ldi	r24, 0x40	; 64
    46a0:	f4 01       	movw	r30, r8
    46a2:	86 83       	std	Z+6, r24	; 0x06
    46a4:	e9 81       	ldd	r30, Y+1	; 0x01
    46a6:	fa 81       	ldd	r31, Y+2	; 0x02
    46a8:	9f 2f       	mov	r25, r31
    46aa:	99 0f       	add	r25, r25
    46ac:	99 0b       	sbc	r25, r25
    46ae:	a1 2c       	mov	r10, r1
    46b0:	0f 2e       	mov	r0, r31
    46b2:	fc e6       	ldi	r31, 0x6C	; 108
    46b4:	bf 2e       	mov	r11, r31
    46b6:	f0 2d       	mov	r31, r0
    46b8:	0f 2e       	mov	r0, r31
    46ba:	fc ed       	ldi	r31, 0xDC	; 220
    46bc:	cf 2e       	mov	r12, r31
    46be:	f0 2d       	mov	r31, r0
    46c0:	68 94       	set
    46c2:	dd 24       	eor	r13, r13
    46c4:	d1 f8       	bld	r13, 1
    46c6:	e1 2c       	mov	r14, r1
    46c8:	f1 2c       	mov	r15, r1
    46ca:	00 e0       	ldi	r16, 0x00	; 0
    46cc:	10 e0       	ldi	r17, 0x00	; 0
    46ce:	2e 2f       	mov	r18, r30
    46d0:	3f 2f       	mov	r19, r31
    46d2:	49 2f       	mov	r20, r25
    46d4:	59 2f       	mov	r21, r25
    46d6:	69 2f       	mov	r22, r25
    46d8:	79 2f       	mov	r23, r25
    46da:	89 2f       	mov	r24, r25
    46dc:	83 d1       	rcall	.+774    	; 0x49e4 <__muldi3>
    46de:	29 51       	subi	r18, 0x19	; 25
    46e0:	3c 4f       	sbci	r19, 0xFC	; 252
    46e2:	4f 4f       	sbci	r20, 0xFF	; 255
    46e4:	5f 4f       	sbci	r21, 0xFF	; 255
    46e6:	6f 4f       	sbci	r22, 0xFF	; 255
    46e8:	7f 4f       	sbci	r23, 0xFF	; 255
    46ea:	8f 4f       	sbci	r24, 0xFF	; 255
    46ec:	9f 4f       	sbci	r25, 0xFF	; 255
    46ee:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__floatundisf>
    46f2:	20 e0       	ldi	r18, 0x00	; 0
    46f4:	30 e8       	ldi	r19, 0x80	; 128
    46f6:	4b eb       	ldi	r20, 0xBB	; 187
    46f8:	55 e4       	ldi	r21, 0x45	; 69
    46fa:	0e 94 27 05 	call	0xa4e	; 0xa4e <__divsf3>
    46fe:	0e 94 4b 01 	call	0x296	; 0x296 <__fixunssfdi>
    4702:	f2 2f       	mov	r31, r18
    4704:	e3 2f       	mov	r30, r19
    4706:	8f 2f       	mov	r24, r31
    4708:	9e 2f       	mov	r25, r30
    470a:	a4 2f       	mov	r26, r20
    470c:	b5 2f       	mov	r27, r21
    470e:	01 97       	sbiw	r24, 0x01	; 1
    4710:	a1 09       	sbc	r26, r1
    4712:	b1 09       	sbc	r27, r1
    4714:	e1 f7       	brne	.-8      	; 0x470e <initial_animation+0x5f4>
    4716:	89 81       	ldd	r24, Y+1	; 0x01
    4718:	9a 81       	ldd	r25, Y+2	; 0x02
    471a:	0f 96       	adiw	r24, 0x0f	; 15
    471c:	89 83       	std	Y+1, r24	; 0x01
    471e:	9a 83       	std	Y+2, r25	; 0x02
    4720:	89 81       	ldd	r24, Y+1	; 0x01
    4722:	9a 81       	ldd	r25, Y+2	; 0x02
    4724:	84 36       	cpi	r24, 0x64	; 100
    4726:	91 05       	cpc	r25, r1
    4728:	0c f4       	brge	.+2      	; 0x472c <initial_animation+0x612>
    472a:	2d cd       	rjmp	.-1446   	; 0x4186 <initial_animation+0x6c>
    472c:	0f 90       	pop	r0
    472e:	0f 90       	pop	r0
    4730:	df 91       	pop	r29
    4732:	cf 91       	pop	r28
    4734:	1f 91       	pop	r17
    4736:	0f 91       	pop	r16
    4738:	ff 90       	pop	r15
    473a:	ef 90       	pop	r14
    473c:	df 90       	pop	r13
    473e:	cf 90       	pop	r12
    4740:	bf 90       	pop	r11
    4742:	af 90       	pop	r10
    4744:	9f 90       	pop	r9
    4746:	8f 90       	pop	r8
    4748:	7f 90       	pop	r7
    474a:	6f 90       	pop	r6
    474c:	5f 90       	pop	r5
    474e:	4f 90       	pop	r4
    4750:	3f 90       	pop	r3
    4752:	2f 90       	pop	r2
    4754:	08 95       	ret

00004756 <main>:

int main (void)
{
    4756:	cf 93       	push	r28
    4758:	df 93       	push	r29
    475a:	00 d0       	rcall	.+0      	; 0x475c <main+0x6>
    475c:	00 d0       	rcall	.+0      	; 0x475e <main+0x8>
    475e:	cd b7       	in	r28, 0x3d	; 61
    4760:	de b7       	in	r29, 0x3e	; 62
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    4762:	e0 e0       	ldi	r30, 0x00	; 0
    4764:	f6 e0       	ldi	r31, 0x06	; 6
    4766:	81 e0       	ldi	r24, 0x01	; 1
    4768:	81 83       	std	Z+1, r24	; 0x01
    476a:	82 e0       	ldi	r24, 0x02	; 2
    476c:	81 83       	std	Z+1, r24	; 0x01
    476e:	84 e0       	ldi	r24, 0x04	; 4
    4770:	81 83       	std	Z+1, r24	; 0x01
    4772:	88 e0       	ldi	r24, 0x08	; 8
    4774:	81 83       	std	Z+1, r24	; 0x01

	ioport_set_pin_dir(IO_1,IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(IO_2,IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(IO_3,IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(IO_4,IOPORT_DIR_OUTPUT);
	init_octopus();
    4776:	0e 94 02 0a 	call	0x1404	; 0x1404 <init_octopus>
 	initial_animation();
    477a:	cf dc       	rcall	.-1634   	; 0x411a <initial_animation>
	 
	pwm_ini(SERVO_0);
    477c:	80 e0       	ldi	r24, 0x00	; 0
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	0e 94 07 0a 	call	0x140e	; 0x140e <pwm_ini>
	pwm_update(SERVO_0,0);
    4784:	60 e0       	ldi	r22, 0x00	; 0
    4786:	70 e0       	ldi	r23, 0x00	; 0
    4788:	80 e0       	ldi	r24, 0x00	; 0
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <pwm_update>
    4790:	80 e0       	ldi	r24, 0x00	; 0
    4792:	92 e1       	ldi	r25, 0x12	; 18
    4794:	aa e7       	ldi	r26, 0x7A	; 122
    4796:	b0 e0       	ldi	r27, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    4798:	01 97       	sbiw	r24, 0x01	; 1
    479a:	a1 09       	sbc	r26, r1
    479c:	b1 09       	sbc	r27, r1
    479e:	e1 f7       	brne	.-8      	; 0x4798 <main+0x42>
	delay_ms(1000);
	pwm_update(SERVO_0,500);
    47a0:	64 ef       	ldi	r22, 0xF4	; 244
    47a2:	71 e0       	ldi	r23, 0x01	; 1
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <pwm_update>
    47ac:	80 e0       	ldi	r24, 0x00	; 0
    47ae:	92 e1       	ldi	r25, 0x12	; 18
    47b0:	aa e7       	ldi	r26, 0x7A	; 122
    47b2:	b0 e0       	ldi	r27, 0x00	; 0
    47b4:	01 97       	sbiw	r24, 0x01	; 1
    47b6:	a1 09       	sbc	r26, r1
    47b8:	b1 09       	sbc	r27, r1
    47ba:	e1 f7       	brne	.-8      	; 0x47b4 <main+0x5e>
	delay_ms(1000);
	pwm_update(SERVO_0,1000);
    47bc:	68 ee       	ldi	r22, 0xE8	; 232
    47be:	73 e0       	ldi	r23, 0x03	; 3
    47c0:	80 e0       	ldi	r24, 0x00	; 0
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <pwm_update>
	 
	char aux;
	char aux2;
	int dimmer=0;
    47c8:	1b 82       	std	Y+3, r1	; 0x03
    47ca:	1c 82       	std	Y+4, r1	; 0x04
	for(;;)
	{
		if(bluetooth_is_rx_complete())
		{
			scanf("%1c",&aux);
    47cc:	ee 24       	eor	r14, r14
    47ce:	e3 94       	inc	r14
    47d0:	f1 2c       	mov	r15, r1
    47d2:	ec 0e       	add	r14, r28
    47d4:	fd 1e       	adc	r15, r29
    47d6:	04 ea       	ldi	r16, 0xA4	; 164
    47d8:	10 e2       	ldi	r17, 0x20	; 32
						led2(OFF);
						ioport_set_pin_level(IO_2,OFF);
					}
				break;
				case 'D':
					scanf("%i",&dimmer);
    47da:	4e 01       	movw	r8, r28
    47dc:	83 e0       	ldi	r24, 0x03	; 3
    47de:	88 0e       	add	r8, r24
    47e0:	91 1c       	adc	r9, r1
    47e2:	0f 2e       	mov	r0, r31
    47e4:	f8 ea       	ldi	r31, 0xA8	; 168
    47e6:	af 2e       	mov	r10, r31
    47e8:	f0 e2       	ldi	r31, 0x20	; 32
    47ea:	bf 2e       	mov	r11, r31
    47ec:	f0 2d       	mov	r31, r0
				break;
				case 'O':
					scanf("%1c",&aux);
					scanf("%1c",&aux);
					scanf("%1c",&aux2);
    47ee:	3e 01       	movw	r6, r28
    47f0:	92 e0       	ldi	r25, 0x02	; 2
    47f2:	69 0e       	add	r6, r25
    47f4:	71 1c       	adc	r7, r1
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    47f6:	0f 2e       	mov	r0, r31
    47f8:	c1 2c       	mov	r12, r1
    47fa:	f6 e0       	ldi	r31, 0x06	; 6
    47fc:	df 2e       	mov	r13, r31
    47fe:	f0 2d       	mov	r31, r0
    4800:	68 94       	set
    4802:	33 24       	eor	r3, r3
    4804:	33 f8       	bld	r3, 3
    4806:	68 94       	set
    4808:	22 24       	eor	r2, r2
    480a:	22 f8       	bld	r2, 2
    480c:	68 94       	set
    480e:	44 24       	eor	r4, r4
    4810:	41 f8       	bld	r4, 1
    4812:	55 24       	eor	r5, r5
    4814:	53 94       	inc	r5
	char aux;
	char aux2;
	int dimmer=0;
	for(;;)
	{
		if(bluetooth_is_rx_complete())
    4816:	0e 94 3b 09 	call	0x1276	; 0x1276 <bluetooth_is_rx_complete>
    481a:	89 2b       	or	r24, r25
    481c:	09 f4       	brne	.+2      	; 0x4820 <main+0xca>
    481e:	8c c0       	rjmp	.+280    	; 0x4938 <main+0x1e2>
		{
			scanf("%1c",&aux);
    4820:	ff 92       	push	r15
    4822:	ef 92       	push	r14
    4824:	1f 93       	push	r17
    4826:	0f 93       	push	r16
    4828:	a8 d1       	rcall	.+848    	; 0x4b7a <scanf>
			switch (aux)
    482a:	0f 90       	pop	r0
    482c:	0f 90       	pop	r0
    482e:	0f 90       	pop	r0
    4830:	0f 90       	pop	r0
    4832:	89 81       	ldd	r24, Y+1	; 0x01
    4834:	84 34       	cpi	r24, 0x44	; 68
    4836:	09 f4       	brne	.+2      	; 0x483a <main+0xe4>
    4838:	40 c0       	rjmp	.+128    	; 0x48ba <main+0x164>
    483a:	24 f4       	brge	.+8      	; 0x4844 <main+0xee>
    483c:	83 34       	cpi	r24, 0x43	; 67
    483e:	09 f0       	breq	.+2      	; 0x4842 <main+0xec>
    4840:	7b c0       	rjmp	.+246    	; 0x4938 <main+0x1e2>
    4842:	07 c0       	rjmp	.+14     	; 0x4852 <main+0xfc>
    4844:	8f 34       	cpi	r24, 0x4F	; 79
    4846:	09 f4       	brne	.+2      	; 0x484a <main+0xf4>
    4848:	42 c0       	rjmp	.+132    	; 0x48ce <main+0x178>
    484a:	84 35       	cpi	r24, 0x54	; 84
    484c:	09 f0       	breq	.+2      	; 0x4850 <main+0xfa>
    484e:	74 c0       	rjmp	.+232    	; 0x4938 <main+0x1e2>
    4850:	1a c0       	rjmp	.+52     	; 0x4886 <main+0x130>
			{
				case 'C':
					scanf("%1c",&aux);
    4852:	ff 92       	push	r15
    4854:	ef 92       	push	r14
    4856:	1f 93       	push	r17
    4858:	0f 93       	push	r16
    485a:	8f d1       	rcall	.+798    	; 0x4b7a <scanf>
					if (aux=='1')
    485c:	0f 90       	pop	r0
    485e:	0f 90       	pop	r0
    4860:	0f 90       	pop	r0
    4862:	0f 90       	pop	r0
    4864:	89 81       	ldd	r24, Y+1	; 0x01
    4866:	81 33       	cpi	r24, 0x31	; 49
    4868:	39 f4       	brne	.+14     	; 0x4878 <main+0x122>
					{
						led1(ON);
    486a:	81 e0       	ldi	r24, 0x01	; 1
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <led1>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    4872:	f6 01       	movw	r30, r12
    4874:	55 82       	std	Z+5, r5	; 0x05
    4876:	60 c0       	rjmp	.+192    	; 0x4938 <main+0x1e2>
						ioport_set_pin_level(IO_1,ON);
					}
					else
					{
						led1(OFF);
    4878:	80 e0       	ldi	r24, 0x00	; 0
    487a:	90 e0       	ldi	r25, 0x00	; 0
    487c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <led1>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    4880:	f6 01       	movw	r30, r12
    4882:	56 82       	std	Z+6, r5	; 0x06
    4884:	59 c0       	rjmp	.+178    	; 0x4938 <main+0x1e2>
						ioport_set_pin_level(IO_1,OFF);
					}
				break;
				case 'T':
					scanf("%1c",&aux);
    4886:	ff 92       	push	r15
    4888:	ef 92       	push	r14
    488a:	1f 93       	push	r17
    488c:	0f 93       	push	r16
    488e:	75 d1       	rcall	.+746    	; 0x4b7a <scanf>
					if (aux=='1')
    4890:	0f 90       	pop	r0
    4892:	0f 90       	pop	r0
    4894:	0f 90       	pop	r0
    4896:	0f 90       	pop	r0
    4898:	89 81       	ldd	r24, Y+1	; 0x01
    489a:	81 33       	cpi	r24, 0x31	; 49
    489c:	39 f4       	brne	.+14     	; 0x48ac <main+0x156>
					{
						led2(ON);
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <led2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    48a6:	f6 01       	movw	r30, r12
    48a8:	45 82       	std	Z+5, r4	; 0x05
    48aa:	46 c0       	rjmp	.+140    	; 0x4938 <main+0x1e2>
						ioport_set_pin_level(IO_2,ON);
					}
					else
					{
						led2(OFF);
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	0e 94 73 09 	call	0x12e6	; 0x12e6 <led2>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    48b4:	f6 01       	movw	r30, r12
    48b6:	46 82       	std	Z+6, r4	; 0x06
    48b8:	3f c0       	rjmp	.+126    	; 0x4938 <main+0x1e2>
						ioport_set_pin_level(IO_2,OFF);
					}
				break;
				case 'D':
					scanf("%i",&dimmer);
    48ba:	9f 92       	push	r9
    48bc:	8f 92       	push	r8
    48be:	bf 92       	push	r11
    48c0:	af 92       	push	r10
    48c2:	5b d1       	rcall	.+694    	; 0x4b7a <scanf>
				break;
    48c4:	0f 90       	pop	r0
    48c6:	0f 90       	pop	r0
    48c8:	0f 90       	pop	r0
    48ca:	0f 90       	pop	r0
    48cc:	35 c0       	rjmp	.+106    	; 0x4938 <main+0x1e2>
				case 'O':
					scanf("%1c",&aux);
    48ce:	ff 92       	push	r15
    48d0:	ef 92       	push	r14
    48d2:	1f 93       	push	r17
    48d4:	0f 93       	push	r16
    48d6:	51 d1       	rcall	.+674    	; 0x4b7a <scanf>
					scanf("%1c",&aux);
    48d8:	ff 92       	push	r15
    48da:	ef 92       	push	r14
    48dc:	1f 93       	push	r17
    48de:	0f 93       	push	r16
    48e0:	4c d1       	rcall	.+664    	; 0x4b7a <scanf>
					scanf("%1c",&aux2);
    48e2:	7f 92       	push	r7
    48e4:	6f 92       	push	r6
    48e6:	1f 93       	push	r17
    48e8:	0f 93       	push	r16
    48ea:	47 d1       	rcall	.+654    	; 0x4b7a <scanf>
					if(aux == '1')
    48ec:	cd bf       	out	0x3d, r28	; 61
    48ee:	de bf       	out	0x3e, r29	; 62
    48f0:	89 81       	ldd	r24, Y+1	; 0x01
    48f2:	81 33       	cpi	r24, 0x31	; 49
    48f4:	89 f4       	brne	.+34     	; 0x4918 <main+0x1c2>
					{
						if(aux2=='1')
    48f6:	8a 81       	ldd	r24, Y+2	; 0x02
    48f8:	81 33       	cpi	r24, 0x31	; 49
    48fa:	39 f4       	brne	.+14     	; 0x490a <main+0x1b4>
						{
							led3(ON);
    48fc:	81 e0       	ldi	r24, 0x01	; 1
    48fe:	90 e0       	ldi	r25, 0x00	; 0
    4900:	0e 94 8b 09 	call	0x1316	; 0x1316 <led3>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    4904:	f6 01       	movw	r30, r12
    4906:	25 82       	std	Z+5, r2	; 0x05
    4908:	17 c0       	rjmp	.+46     	; 0x4938 <main+0x1e2>
							ioport_set_pin_level(IO_3,ON);
						}
						else
						{
							led3(OFF);
    490a:	80 e0       	ldi	r24, 0x00	; 0
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	0e 94 8b 09 	call	0x1316	; 0x1316 <led3>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    4912:	f6 01       	movw	r30, r12
    4914:	26 82       	std	Z+6, r2	; 0x06
    4916:	10 c0       	rjmp	.+32     	; 0x4938 <main+0x1e2>
							ioport_set_pin_level(IO_3,OFF);
						}
					}
					else
					{
						if(aux2=='1')
    4918:	8a 81       	ldd	r24, Y+2	; 0x02
    491a:	81 33       	cpi	r24, 0x31	; 49
    491c:	39 f4       	brne	.+14     	; 0x492c <main+0x1d6>
						{
							led4(ON);
    491e:	81 e0       	ldi	r24, 0x01	; 1
    4920:	90 e0       	ldi	r25, 0x00	; 0
    4922:	0e 94 a3 09 	call	0x1346	; 0x1346 <led4>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    4926:	f6 01       	movw	r30, r12
    4928:	35 82       	std	Z+5, r3	; 0x05
    492a:	06 c0       	rjmp	.+12     	; 0x4938 <main+0x1e2>
							ioport_set_pin_level(IO_4,ON);
						}
						else
						{
							led4(OFF);
    492c:	80 e0       	ldi	r24, 0x00	; 0
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	0e 94 a3 09 	call	0x1346	; 0x1346 <led4>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    4934:	f6 01       	movw	r30, r12
    4936:	36 82       	std	Z+6, r3	; 0x06
				break;
				
			}
		}

	dimmer=dimmer*10;	
    4938:	8b 81       	ldd	r24, Y+3	; 0x03
    493a:	9c 81       	ldd	r25, Y+4	; 0x04
    493c:	88 0f       	add	r24, r24
    493e:	99 1f       	adc	r25, r25
    4940:	9c 01       	movw	r18, r24
    4942:	22 0f       	add	r18, r18
    4944:	33 1f       	adc	r19, r19
    4946:	22 0f       	add	r18, r18
    4948:	33 1f       	adc	r19, r19
    494a:	82 0f       	add	r24, r18
    494c:	93 1f       	adc	r25, r19
    494e:	8b 83       	std	Y+3, r24	; 0x03
    4950:	9c 83       	std	Y+4, r25	; 0x04
	pwm_update(SERVO_0,dimmer);	
    4952:	68 2f       	mov	r22, r24
    4954:	79 2f       	mov	r23, r25
    4956:	80 e0       	ldi	r24, 0x00	; 0
    4958:	90 e0       	ldi	r25, 0x00	; 0
    495a:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <pwm_update>
		
	}
    495e:	5b cf       	rjmp	.-330    	; 0x4816 <main+0xc0>

00004960 <__udivmodhi4>:
    4960:	aa 1b       	sub	r26, r26
    4962:	bb 1b       	sub	r27, r27
    4964:	51 e1       	ldi	r21, 0x11	; 17
    4966:	07 c0       	rjmp	.+14     	; 0x4976 <__udivmodhi4_ep>

00004968 <__udivmodhi4_loop>:
    4968:	aa 1f       	adc	r26, r26
    496a:	bb 1f       	adc	r27, r27
    496c:	a6 17       	cp	r26, r22
    496e:	b7 07       	cpc	r27, r23
    4970:	10 f0       	brcs	.+4      	; 0x4976 <__udivmodhi4_ep>
    4972:	a6 1b       	sub	r26, r22
    4974:	b7 0b       	sbc	r27, r23

00004976 <__udivmodhi4_ep>:
    4976:	88 1f       	adc	r24, r24
    4978:	99 1f       	adc	r25, r25
    497a:	5a 95       	dec	r21
    497c:	a9 f7       	brne	.-22     	; 0x4968 <__udivmodhi4_loop>
    497e:	80 95       	com	r24
    4980:	90 95       	com	r25
    4982:	bc 01       	movw	r22, r24
    4984:	cd 01       	movw	r24, r26
    4986:	08 95       	ret

00004988 <__udivmodsi4>:
    4988:	a1 e2       	ldi	r26, 0x21	; 33
    498a:	1a 2e       	mov	r1, r26
    498c:	aa 1b       	sub	r26, r26
    498e:	bb 1b       	sub	r27, r27
    4990:	fd 01       	movw	r30, r26
    4992:	0d c0       	rjmp	.+26     	; 0x49ae <__udivmodsi4_ep>

00004994 <__udivmodsi4_loop>:
    4994:	aa 1f       	adc	r26, r26
    4996:	bb 1f       	adc	r27, r27
    4998:	ee 1f       	adc	r30, r30
    499a:	ff 1f       	adc	r31, r31
    499c:	a2 17       	cp	r26, r18
    499e:	b3 07       	cpc	r27, r19
    49a0:	e4 07       	cpc	r30, r20
    49a2:	f5 07       	cpc	r31, r21
    49a4:	20 f0       	brcs	.+8      	; 0x49ae <__udivmodsi4_ep>
    49a6:	a2 1b       	sub	r26, r18
    49a8:	b3 0b       	sbc	r27, r19
    49aa:	e4 0b       	sbc	r30, r20
    49ac:	f5 0b       	sbc	r31, r21

000049ae <__udivmodsi4_ep>:
    49ae:	66 1f       	adc	r22, r22
    49b0:	77 1f       	adc	r23, r23
    49b2:	88 1f       	adc	r24, r24
    49b4:	99 1f       	adc	r25, r25
    49b6:	1a 94       	dec	r1
    49b8:	69 f7       	brne	.-38     	; 0x4994 <__udivmodsi4_loop>
    49ba:	60 95       	com	r22
    49bc:	70 95       	com	r23
    49be:	80 95       	com	r24
    49c0:	90 95       	com	r25
    49c2:	9b 01       	movw	r18, r22
    49c4:	ac 01       	movw	r20, r24
    49c6:	bd 01       	movw	r22, r26
    49c8:	cf 01       	movw	r24, r30
    49ca:	08 95       	ret

000049cc <__umulhisi3>:
    49cc:	a2 9f       	mul	r26, r18
    49ce:	b0 01       	movw	r22, r0
    49d0:	b3 9f       	mul	r27, r19
    49d2:	c0 01       	movw	r24, r0
    49d4:	a3 9f       	mul	r26, r19
    49d6:	01 d0       	rcall	.+2      	; 0x49da <__umulhisi3+0xe>
    49d8:	b2 9f       	mul	r27, r18
    49da:	70 0d       	add	r23, r0
    49dc:	81 1d       	adc	r24, r1
    49de:	11 24       	eor	r1, r1
    49e0:	91 1d       	adc	r25, r1
    49e2:	08 95       	ret

000049e4 <__muldi3>:
    49e4:	df 93       	push	r29
    49e6:	cf 93       	push	r28
    49e8:	1f 93       	push	r17
    49ea:	0f 93       	push	r16
    49ec:	9a 9d       	mul	r25, r10
    49ee:	f0 2d       	mov	r31, r0
    49f0:	21 9f       	mul	r18, r17
    49f2:	f0 0d       	add	r31, r0
    49f4:	8b 9d       	mul	r24, r11
    49f6:	f0 0d       	add	r31, r0
    49f8:	8a 9d       	mul	r24, r10
    49fa:	e0 2d       	mov	r30, r0
    49fc:	f1 0d       	add	r31, r1
    49fe:	03 9f       	mul	r16, r19
    4a00:	f0 0d       	add	r31, r0
    4a02:	02 9f       	mul	r16, r18
    4a04:	e0 0d       	add	r30, r0
    4a06:	f1 1d       	adc	r31, r1
    4a08:	4e 9d       	mul	r20, r14
    4a0a:	e0 0d       	add	r30, r0
    4a0c:	f1 1d       	adc	r31, r1
    4a0e:	5e 9d       	mul	r21, r14
    4a10:	f0 0d       	add	r31, r0
    4a12:	4f 9d       	mul	r20, r15
    4a14:	f0 0d       	add	r31, r0
    4a16:	7f 93       	push	r23
    4a18:	6f 93       	push	r22
    4a1a:	bf 92       	push	r11
    4a1c:	af 92       	push	r10
    4a1e:	5f 93       	push	r21
    4a20:	4f 93       	push	r20
    4a22:	d5 01       	movw	r26, r10
    4a24:	d3 df       	rcall	.-90     	; 0x49cc <__umulhisi3>
    4a26:	8b 01       	movw	r16, r22
    4a28:	ac 01       	movw	r20, r24
    4a2a:	d7 01       	movw	r26, r14
    4a2c:	cf df       	rcall	.-98     	; 0x49cc <__umulhisi3>
    4a2e:	eb 01       	movw	r28, r22
    4a30:	e8 0f       	add	r30, r24
    4a32:	f9 1f       	adc	r31, r25
    4a34:	d6 01       	movw	r26, r12
    4a36:	1f d0       	rcall	.+62     	; 0x4a76 <__muldi3_6>
    4a38:	2f 91       	pop	r18
    4a3a:	3f 91       	pop	r19
    4a3c:	d6 01       	movw	r26, r12
    4a3e:	c6 df       	rcall	.-116    	; 0x49cc <__umulhisi3>
    4a40:	c6 0f       	add	r28, r22
    4a42:	d7 1f       	adc	r29, r23
    4a44:	e8 1f       	adc	r30, r24
    4a46:	f9 1f       	adc	r31, r25
    4a48:	af 91       	pop	r26
    4a4a:	bf 91       	pop	r27
    4a4c:	14 d0       	rcall	.+40     	; 0x4a76 <__muldi3_6>
    4a4e:	2f 91       	pop	r18
    4a50:	3f 91       	pop	r19
    4a52:	bc df       	rcall	.-136    	; 0x49cc <__umulhisi3>
    4a54:	c6 0f       	add	r28, r22
    4a56:	d7 1f       	adc	r29, r23
    4a58:	e8 1f       	adc	r30, r24
    4a5a:	f9 1f       	adc	r31, r25
    4a5c:	d6 01       	movw	r26, r12
    4a5e:	b6 df       	rcall	.-148    	; 0x49cc <__umulhisi3>
    4a60:	e6 0f       	add	r30, r22
    4a62:	f7 1f       	adc	r31, r23
    4a64:	98 01       	movw	r18, r16
    4a66:	be 01       	movw	r22, r28
    4a68:	cf 01       	movw	r24, r30
    4a6a:	11 24       	eor	r1, r1
    4a6c:	0f 91       	pop	r16
    4a6e:	1f 91       	pop	r17
    4a70:	cf 91       	pop	r28
    4a72:	df 91       	pop	r29
    4a74:	08 95       	ret

00004a76 <__muldi3_6>:
    4a76:	aa df       	rcall	.-172    	; 0x49cc <__umulhisi3>
    4a78:	46 0f       	add	r20, r22
    4a7a:	57 1f       	adc	r21, r23
    4a7c:	c8 1f       	adc	r28, r24
    4a7e:	d9 1f       	adc	r29, r25
    4a80:	08 f4       	brcc	.+2      	; 0x4a84 <__muldi3_6+0xe>
    4a82:	31 96       	adiw	r30, 0x01	; 1
    4a84:	08 95       	ret

00004a86 <__clzsi2>:
    4a86:	06 d0       	rcall	.+12     	; 0x4a94 <__clzhi2>
    4a88:	84 ff       	sbrs	r24, 4
    4a8a:	08 95       	ret
    4a8c:	cb 01       	movw	r24, r22
    4a8e:	02 d0       	rcall	.+4      	; 0x4a94 <__clzhi2>
    4a90:	80 5f       	subi	r24, 0xF0	; 240
    4a92:	08 95       	ret

00004a94 <__clzhi2>:
    4a94:	aa 27       	eor	r26, r26
    4a96:	99 23       	and	r25, r25
    4a98:	29 f4       	brne	.+10     	; 0x4aa4 <__clzhi2+0x10>
    4a9a:	a8 5f       	subi	r26, 0xF8	; 248
    4a9c:	98 2b       	or	r25, r24
    4a9e:	11 f4       	brne	.+4      	; 0x4aa4 <__clzhi2+0x10>
    4aa0:	80 e1       	ldi	r24, 0x10	; 16
    4aa2:	08 95       	ret
    4aa4:	90 31       	cpi	r25, 0x10	; 16
    4aa6:	18 f4       	brcc	.+6      	; 0x4aae <__clzhi2+0x1a>
    4aa8:	ad 5f       	subi	r26, 0xFD	; 253
    4aaa:	92 95       	swap	r25
    4aac:	a3 95       	inc	r26
    4aae:	99 0f       	add	r25, r25
    4ab0:	e8 f7       	brcc	.-6      	; 0x4aac <__clzhi2+0x18>
    4ab2:	8a 2f       	mov	r24, r26
    4ab4:	99 27       	eor	r25, r25
    4ab6:	08 95       	ret

00004ab8 <__prologue_saves__>:
    4ab8:	2f 92       	push	r2
    4aba:	3f 92       	push	r3
    4abc:	4f 92       	push	r4
    4abe:	5f 92       	push	r5
    4ac0:	6f 92       	push	r6
    4ac2:	7f 92       	push	r7
    4ac4:	8f 92       	push	r8
    4ac6:	9f 92       	push	r9
    4ac8:	af 92       	push	r10
    4aca:	bf 92       	push	r11
    4acc:	cf 92       	push	r12
    4ace:	df 92       	push	r13
    4ad0:	ef 92       	push	r14
    4ad2:	ff 92       	push	r15
    4ad4:	0f 93       	push	r16
    4ad6:	1f 93       	push	r17
    4ad8:	cf 93       	push	r28
    4ada:	df 93       	push	r29
    4adc:	cd b7       	in	r28, 0x3d	; 61
    4ade:	de b7       	in	r29, 0x3e	; 62
    4ae0:	ca 1b       	sub	r28, r26
    4ae2:	db 0b       	sbc	r29, r27
    4ae4:	cd bf       	out	0x3d, r28	; 61
    4ae6:	de bf       	out	0x3e, r29	; 62
    4ae8:	09 94       	ijmp

00004aea <__epilogue_restores__>:
    4aea:	2a 88       	ldd	r2, Y+18	; 0x12
    4aec:	39 88       	ldd	r3, Y+17	; 0x11
    4aee:	48 88       	ldd	r4, Y+16	; 0x10
    4af0:	5f 84       	ldd	r5, Y+15	; 0x0f
    4af2:	6e 84       	ldd	r6, Y+14	; 0x0e
    4af4:	7d 84       	ldd	r7, Y+13	; 0x0d
    4af6:	8c 84       	ldd	r8, Y+12	; 0x0c
    4af8:	9b 84       	ldd	r9, Y+11	; 0x0b
    4afa:	aa 84       	ldd	r10, Y+10	; 0x0a
    4afc:	b9 84       	ldd	r11, Y+9	; 0x09
    4afe:	c8 84       	ldd	r12, Y+8	; 0x08
    4b00:	df 80       	ldd	r13, Y+7	; 0x07
    4b02:	ee 80       	ldd	r14, Y+6	; 0x06
    4b04:	fd 80       	ldd	r15, Y+5	; 0x05
    4b06:	0c 81       	ldd	r16, Y+4	; 0x04
    4b08:	1b 81       	ldd	r17, Y+3	; 0x03
    4b0a:	aa 81       	ldd	r26, Y+2	; 0x02
    4b0c:	b9 81       	ldd	r27, Y+1	; 0x01
    4b0e:	ce 0f       	add	r28, r30
    4b10:	d1 1d       	adc	r29, r1
    4b12:	cd bf       	out	0x3d, r28	; 61
    4b14:	de bf       	out	0x3e, r29	; 62
    4b16:	ed 01       	movw	r28, r26
    4b18:	08 95       	ret

00004b1a <__ashldi3>:
    4b1a:	0f 93       	push	r16
    4b1c:	0f 73       	andi	r16, 0x3F	; 63
    4b1e:	51 f0       	breq	.+20     	; 0x4b34 <__ashldi3+0x1a>
    4b20:	22 0f       	add	r18, r18
    4b22:	33 1f       	adc	r19, r19
    4b24:	44 1f       	adc	r20, r20
    4b26:	55 1f       	adc	r21, r21
    4b28:	66 1f       	adc	r22, r22
    4b2a:	77 1f       	adc	r23, r23
    4b2c:	88 1f       	adc	r24, r24
    4b2e:	99 1f       	adc	r25, r25
    4b30:	0a 95       	dec	r16
    4b32:	b1 f7       	brne	.-20     	; 0x4b20 <__ashldi3+0x6>
    4b34:	0f 91       	pop	r16
    4b36:	08 95       	ret

00004b38 <__lshrdi3>:
    4b38:	0f 93       	push	r16
    4b3a:	0f 73       	andi	r16, 0x3F	; 63
    4b3c:	51 f0       	breq	.+20     	; 0x4b52 <__lshrdi3+0x1a>
    4b3e:	96 95       	lsr	r25
    4b40:	87 95       	ror	r24
    4b42:	77 95       	ror	r23
    4b44:	67 95       	ror	r22
    4b46:	57 95       	ror	r21
    4b48:	47 95       	ror	r20
    4b4a:	37 95       	ror	r19
    4b4c:	27 95       	ror	r18
    4b4e:	0a 95       	dec	r16
    4b50:	b1 f7       	brne	.-20     	; 0x4b3e <__lshrdi3+0x6>
    4b52:	0f 91       	pop	r16
    4b54:	08 95       	ret

00004b56 <__cmpdi2>:
    4b56:	2a 15       	cp	r18, r10
    4b58:	3b 05       	cpc	r19, r11
    4b5a:	4c 05       	cpc	r20, r12
    4b5c:	5d 05       	cpc	r21, r13
    4b5e:	6e 05       	cpc	r22, r14
    4b60:	7f 05       	cpc	r23, r15
    4b62:	80 07       	cpc	r24, r16
    4b64:	91 07       	cpc	r25, r17
    4b66:	08 95       	ret

00004b68 <memcpy>:
    4b68:	fb 01       	movw	r30, r22
    4b6a:	dc 01       	movw	r26, r24
    4b6c:	02 c0       	rjmp	.+4      	; 0x4b72 <memcpy+0xa>
    4b6e:	01 90       	ld	r0, Z+
    4b70:	0d 92       	st	X+, r0
    4b72:	41 50       	subi	r20, 0x01	; 1
    4b74:	50 40       	sbci	r21, 0x00	; 0
    4b76:	d8 f7       	brcc	.-10     	; 0x4b6e <memcpy+0x6>
    4b78:	08 95       	ret

00004b7a <scanf>:
    4b7a:	a0 e0       	ldi	r26, 0x00	; 0
    4b7c:	b0 e0       	ldi	r27, 0x00	; 0
    4b7e:	e2 ec       	ldi	r30, 0xC2	; 194
    4b80:	f5 e2       	ldi	r31, 0x25	; 37
    4b82:	aa cf       	rjmp	.-172    	; 0x4ad8 <__prologue_saves__+0x20>
    4b84:	fe 01       	movw	r30, r28
    4b86:	35 96       	adiw	r30, 0x05	; 5
    4b88:	61 91       	ld	r22, Z+
    4b8a:	71 91       	ld	r23, Z+
    4b8c:	af 01       	movw	r20, r30
    4b8e:	80 91 a6 23 	lds	r24, 0x23A6
    4b92:	90 91 a7 23 	lds	r25, 0x23A7
    4b96:	9d d1       	rcall	.+826    	; 0x4ed2 <vfscanf>
    4b98:	e2 e0       	ldi	r30, 0x02	; 2
    4b9a:	b7 cf       	rjmp	.-146    	; 0x4b0a <__epilogue_restores__+0x20>

00004b9c <putval>:
    4b9c:	20 fd       	sbrc	r18, 0
    4b9e:	09 c0       	rjmp	.+18     	; 0x4bb2 <putval+0x16>
    4ba0:	fc 01       	movw	r30, r24
    4ba2:	23 fd       	sbrc	r18, 3
    4ba4:	05 c0       	rjmp	.+10     	; 0x4bb0 <putval+0x14>
    4ba6:	22 ff       	sbrs	r18, 2
    4ba8:	02 c0       	rjmp	.+4      	; 0x4bae <putval+0x12>
    4baa:	73 83       	std	Z+3, r23	; 0x03
    4bac:	62 83       	std	Z+2, r22	; 0x02
    4bae:	51 83       	std	Z+1, r21	; 0x01
    4bb0:	40 83       	st	Z, r20
    4bb2:	08 95       	ret

00004bb4 <mulacc>:
    4bb4:	cf 92       	push	r12
    4bb6:	df 92       	push	r13
    4bb8:	ef 92       	push	r14
    4bba:	ff 92       	push	r15
    4bbc:	0f 93       	push	r16
    4bbe:	1f 93       	push	r17
    4bc0:	44 fd       	sbrc	r20, 4
    4bc2:	10 c0       	rjmp	.+32     	; 0x4be4 <mulacc+0x30>
    4bc4:	46 fd       	sbrc	r20, 6
    4bc6:	10 c0       	rjmp	.+32     	; 0x4be8 <mulacc+0x34>
    4bc8:	db 01       	movw	r26, r22
    4bca:	fc 01       	movw	r30, r24
    4bcc:	aa 0f       	add	r26, r26
    4bce:	bb 1f       	adc	r27, r27
    4bd0:	ee 1f       	adc	r30, r30
    4bd2:	ff 1f       	adc	r31, r31
    4bd4:	10 94       	com	r1
    4bd6:	d1 f7       	brne	.-12     	; 0x4bcc <mulacc+0x18>
    4bd8:	6a 0f       	add	r22, r26
    4bda:	7b 1f       	adc	r23, r27
    4bdc:	8e 1f       	adc	r24, r30
    4bde:	9f 1f       	adc	r25, r31
    4be0:	31 e0       	ldi	r19, 0x01	; 1
    4be2:	03 c0       	rjmp	.+6      	; 0x4bea <mulacc+0x36>
    4be4:	33 e0       	ldi	r19, 0x03	; 3
    4be6:	01 c0       	rjmp	.+2      	; 0x4bea <mulacc+0x36>
    4be8:	34 e0       	ldi	r19, 0x04	; 4
    4bea:	66 0f       	add	r22, r22
    4bec:	77 1f       	adc	r23, r23
    4bee:	88 1f       	adc	r24, r24
    4bf0:	99 1f       	adc	r25, r25
    4bf2:	31 50       	subi	r19, 0x01	; 1
    4bf4:	d1 f7       	brne	.-12     	; 0x4bea <mulacc+0x36>
    4bf6:	6b 01       	movw	r12, r22
    4bf8:	7c 01       	movw	r14, r24
    4bfa:	c2 0e       	add	r12, r18
    4bfc:	d1 1c       	adc	r13, r1
    4bfe:	e1 1c       	adc	r14, r1
    4c00:	f1 1c       	adc	r15, r1
    4c02:	97 01       	movw	r18, r14
    4c04:	86 01       	movw	r16, r12
    4c06:	b6 01       	movw	r22, r12
    4c08:	c9 01       	movw	r24, r18
    4c0a:	1f 91       	pop	r17
    4c0c:	0f 91       	pop	r16
    4c0e:	ff 90       	pop	r15
    4c10:	ef 90       	pop	r14
    4c12:	df 90       	pop	r13
    4c14:	cf 90       	pop	r12
    4c16:	08 95       	ret

00004c18 <skip_spaces>:
    4c18:	0f 93       	push	r16
    4c1a:	1f 93       	push	r17
    4c1c:	cf 93       	push	r28
    4c1e:	df 93       	push	r29
    4c20:	8c 01       	movw	r16, r24
    4c22:	c8 01       	movw	r24, r16
    4c24:	89 d2       	rcall	.+1298   	; 0x5138 <fgetc>
    4c26:	ec 01       	movw	r28, r24
    4c28:	97 fd       	sbrc	r25, 7
    4c2a:	06 c0       	rjmp	.+12     	; 0x4c38 <skip_spaces+0x20>
    4c2c:	72 d2       	rcall	.+1252   	; 0x5112 <isspace>
    4c2e:	89 2b       	or	r24, r25
    4c30:	c1 f7       	brne	.-16     	; 0x4c22 <skip_spaces+0xa>
    4c32:	b8 01       	movw	r22, r16
    4c34:	ce 01       	movw	r24, r28
    4c36:	c0 d2       	rcall	.+1408   	; 0x51b8 <ungetc>
    4c38:	ce 01       	movw	r24, r28
    4c3a:	df 91       	pop	r29
    4c3c:	cf 91       	pop	r28
    4c3e:	1f 91       	pop	r17
    4c40:	0f 91       	pop	r16
    4c42:	08 95       	ret

00004c44 <conv_int>:
    4c44:	8f 92       	push	r8
    4c46:	9f 92       	push	r9
    4c48:	af 92       	push	r10
    4c4a:	cf 92       	push	r12
    4c4c:	df 92       	push	r13
    4c4e:	ef 92       	push	r14
    4c50:	ff 92       	push	r15
    4c52:	0f 93       	push	r16
    4c54:	1f 93       	push	r17
    4c56:	cf 93       	push	r28
    4c58:	df 93       	push	r29
    4c5a:	ec 01       	movw	r28, r24
    4c5c:	a6 2e       	mov	r10, r22
    4c5e:	4a 01       	movw	r8, r20
    4c60:	02 2f       	mov	r16, r18
    4c62:	6a d2       	rcall	.+1236   	; 0x5138 <fgetc>
    4c64:	ac 01       	movw	r20, r24
    4c66:	55 27       	eor	r21, r21
    4c68:	4b 32       	cpi	r20, 0x2B	; 43
    4c6a:	51 05       	cpc	r21, r1
    4c6c:	21 f0       	breq	.+8      	; 0x4c76 <conv_int+0x32>
    4c6e:	4d 32       	cpi	r20, 0x2D	; 45
    4c70:	51 05       	cpc	r21, r1
    4c72:	49 f4       	brne	.+18     	; 0x4c86 <conv_int+0x42>
    4c74:	00 68       	ori	r16, 0x80	; 128
    4c76:	aa 94       	dec	r10
    4c78:	11 f4       	brne	.+4      	; 0x4c7e <conv_int+0x3a>
    4c7a:	80 e0       	ldi	r24, 0x00	; 0
    4c7c:	5c c0       	rjmp	.+184    	; 0x4d36 <conv_int+0xf2>
    4c7e:	ce 01       	movw	r24, r28
    4c80:	5b d2       	rcall	.+1206   	; 0x5138 <fgetc>
    4c82:	97 fd       	sbrc	r25, 7
    4c84:	fa cf       	rjmp	.-12     	; 0x4c7a <conv_int+0x36>
    4c86:	10 2f       	mov	r17, r16
    4c88:	1d 7f       	andi	r17, 0xFD	; 253
    4c8a:	30 2f       	mov	r19, r16
    4c8c:	30 73       	andi	r19, 0x30	; 48
    4c8e:	d1 f4       	brne	.+52     	; 0x4cc4 <conv_int+0x80>
    4c90:	80 33       	cpi	r24, 0x30	; 48
    4c92:	c1 f4       	brne	.+48     	; 0x4cc4 <conv_int+0x80>
    4c94:	aa 94       	dec	r10
    4c96:	09 f4       	brne	.+2      	; 0x4c9a <conv_int+0x56>
    4c98:	3b c0       	rjmp	.+118    	; 0x4d10 <conv_int+0xcc>
    4c9a:	ce 01       	movw	r24, r28
    4c9c:	4d d2       	rcall	.+1178   	; 0x5138 <fgetc>
    4c9e:	97 fd       	sbrc	r25, 7
    4ca0:	37 c0       	rjmp	.+110    	; 0x4d10 <conv_int+0xcc>
    4ca2:	88 37       	cpi	r24, 0x78	; 120
    4ca4:	11 f0       	breq	.+4      	; 0x4caa <conv_int+0x66>
    4ca6:	88 35       	cpi	r24, 0x58	; 88
    4ca8:	41 f4       	brne	.+16     	; 0x4cba <conv_int+0x76>
    4caa:	12 64       	ori	r17, 0x42	; 66
    4cac:	aa 94       	dec	r10
    4cae:	81 f1       	breq	.+96     	; 0x4d10 <conv_int+0xcc>
    4cb0:	ce 01       	movw	r24, r28
    4cb2:	42 d2       	rcall	.+1156   	; 0x5138 <fgetc>
    4cb4:	97 ff       	sbrs	r25, 7
    4cb6:	06 c0       	rjmp	.+12     	; 0x4cc4 <conv_int+0x80>
    4cb8:	2b c0       	rjmp	.+86     	; 0x4d10 <conv_int+0xcc>
    4cba:	06 ff       	sbrs	r16, 6
    4cbc:	02 c0       	rjmp	.+4      	; 0x4cc2 <conv_int+0x7e>
    4cbe:	12 60       	ori	r17, 0x02	; 2
    4cc0:	01 c0       	rjmp	.+2      	; 0x4cc4 <conv_int+0x80>
    4cc2:	12 61       	ori	r17, 0x12	; 18
    4cc4:	c1 2c       	mov	r12, r1
    4cc6:	d1 2c       	mov	r13, r1
    4cc8:	76 01       	movw	r14, r12
    4cca:	28 2f       	mov	r18, r24
    4ccc:	20 53       	subi	r18, 0x30	; 48
    4cce:	28 30       	cpi	r18, 0x08	; 8
    4cd0:	78 f0       	brcs	.+30     	; 0x4cf0 <conv_int+0xac>
    4cd2:	14 ff       	sbrs	r17, 4
    4cd4:	03 c0       	rjmp	.+6      	; 0x4cdc <conv_int+0x98>
    4cd6:	be 01       	movw	r22, r28
    4cd8:	6f d2       	rcall	.+1246   	; 0x51b8 <ungetc>
    4cda:	17 c0       	rjmp	.+46     	; 0x4d0a <conv_int+0xc6>
    4cdc:	2a 30       	cpi	r18, 0x0A	; 10
    4cde:	40 f0       	brcs	.+16     	; 0x4cf0 <conv_int+0xac>
    4ce0:	16 ff       	sbrs	r17, 6
    4ce2:	f9 cf       	rjmp	.-14     	; 0x4cd6 <conv_int+0x92>
    4ce4:	2f 7d       	andi	r18, 0xDF	; 223
    4ce6:	32 2f       	mov	r19, r18
    4ce8:	31 51       	subi	r19, 0x11	; 17
    4cea:	36 30       	cpi	r19, 0x06	; 6
    4cec:	a0 f7       	brcc	.-24     	; 0x4cd6 <conv_int+0x92>
    4cee:	27 50       	subi	r18, 0x07	; 7
    4cf0:	41 2f       	mov	r20, r17
    4cf2:	c7 01       	movw	r24, r14
    4cf4:	b6 01       	movw	r22, r12
    4cf6:	5e df       	rcall	.-324    	; 0x4bb4 <mulacc>
    4cf8:	6b 01       	movw	r12, r22
    4cfa:	7c 01       	movw	r14, r24
    4cfc:	12 60       	ori	r17, 0x02	; 2
    4cfe:	aa 94       	dec	r10
    4d00:	51 f0       	breq	.+20     	; 0x4d16 <conv_int+0xd2>
    4d02:	ce 01       	movw	r24, r28
    4d04:	19 d2       	rcall	.+1074   	; 0x5138 <fgetc>
    4d06:	97 ff       	sbrs	r25, 7
    4d08:	e0 cf       	rjmp	.-64     	; 0x4cca <conv_int+0x86>
    4d0a:	11 fd       	sbrc	r17, 1
    4d0c:	04 c0       	rjmp	.+8      	; 0x4d16 <conv_int+0xd2>
    4d0e:	b5 cf       	rjmp	.-150    	; 0x4c7a <conv_int+0x36>
    4d10:	c1 2c       	mov	r12, r1
    4d12:	d1 2c       	mov	r13, r1
    4d14:	76 01       	movw	r14, r12
    4d16:	17 ff       	sbrs	r17, 7
    4d18:	08 c0       	rjmp	.+16     	; 0x4d2a <conv_int+0xe6>
    4d1a:	f0 94       	com	r15
    4d1c:	e0 94       	com	r14
    4d1e:	d0 94       	com	r13
    4d20:	c0 94       	com	r12
    4d22:	c1 1c       	adc	r12, r1
    4d24:	d1 1c       	adc	r13, r1
    4d26:	e1 1c       	adc	r14, r1
    4d28:	f1 1c       	adc	r15, r1
    4d2a:	21 2f       	mov	r18, r17
    4d2c:	b7 01       	movw	r22, r14
    4d2e:	a6 01       	movw	r20, r12
    4d30:	c4 01       	movw	r24, r8
    4d32:	34 df       	rcall	.-408    	; 0x4b9c <putval>
    4d34:	81 e0       	ldi	r24, 0x01	; 1
    4d36:	df 91       	pop	r29
    4d38:	cf 91       	pop	r28
    4d3a:	1f 91       	pop	r17
    4d3c:	0f 91       	pop	r16
    4d3e:	ff 90       	pop	r15
    4d40:	ef 90       	pop	r14
    4d42:	df 90       	pop	r13
    4d44:	cf 90       	pop	r12
    4d46:	af 90       	pop	r10
    4d48:	9f 90       	pop	r9
    4d4a:	8f 90       	pop	r8
    4d4c:	08 95       	ret

00004d4e <conv_brk>:
    4d4e:	6f 92       	push	r6
    4d50:	7f 92       	push	r7
    4d52:	9f 92       	push	r9
    4d54:	af 92       	push	r10
    4d56:	bf 92       	push	r11
    4d58:	cf 92       	push	r12
    4d5a:	df 92       	push	r13
    4d5c:	ef 92       	push	r14
    4d5e:	ff 92       	push	r15
    4d60:	0f 93       	push	r16
    4d62:	1f 93       	push	r17
    4d64:	cf 93       	push	r28
    4d66:	df 93       	push	r29
    4d68:	cd b7       	in	r28, 0x3d	; 61
    4d6a:	de b7       	in	r29, 0x3e	; 62
    4d6c:	a1 97       	sbiw	r28, 0x21	; 33
    4d6e:	cd bf       	out	0x3d, r28	; 61
    4d70:	de bf       	out	0x3e, r29	; 62
    4d72:	6c 01       	movw	r12, r24
    4d74:	7a 01       	movw	r14, r20
    4d76:	89 01       	movw	r16, r18
    4d78:	fe 01       	movw	r30, r28
    4d7a:	31 96       	adiw	r30, 0x01	; 1
    4d7c:	80 e2       	ldi	r24, 0x20	; 32
    4d7e:	df 01       	movw	r26, r30
    4d80:	1d 92       	st	X+, r1
    4d82:	8a 95       	dec	r24
    4d84:	e9 f7       	brne	.-6      	; 0x4d80 <conv_brk+0x32>
    4d86:	d6 01       	movw	r26, r12
    4d88:	13 96       	adiw	r26, 0x03	; 3
    4d8a:	9c 90       	ld	r9, X
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	30 e0       	ldi	r19, 0x00	; 0
    4d90:	a1 2c       	mov	r10, r1
    4d92:	a0 e0       	ldi	r26, 0x00	; 0
    4d94:	b1 2c       	mov	r11, r1
    4d96:	cf 01       	movw	r24, r30
    4d98:	41 e0       	ldi	r20, 0x01	; 1
    4d9a:	50 e0       	ldi	r21, 0x00	; 0
    4d9c:	f8 01       	movw	r30, r16
    4d9e:	93 fc       	sbrc	r9, 3
    4da0:	75 91       	lpm	r23, Z+
    4da2:	93 fe       	sbrs	r9, 3
    4da4:	71 91       	ld	r23, Z+
    4da6:	8f 01       	movw	r16, r30
    4da8:	71 11       	cpse	r23, r1
    4daa:	03 c0       	rjmp	.+6      	; 0x4db2 <conv_brk+0x64>
    4dac:	00 e0       	ldi	r16, 0x00	; 0
    4dae:	10 e0       	ldi	r17, 0x00	; 0
    4db0:	7e c0       	rjmp	.+252    	; 0x4eae <conv_brk+0x160>
    4db2:	7e 35       	cpi	r23, 0x5E	; 94
    4db4:	19 f4       	brne	.+6      	; 0x4dbc <conv_brk+0x6e>
    4db6:	21 15       	cp	r18, r1
    4db8:	31 05       	cpc	r19, r1
    4dba:	59 f1       	breq	.+86     	; 0x4e12 <conv_brk+0xc4>
    4dbc:	eb 2d       	mov	r30, r11
    4dbe:	f0 e0       	ldi	r31, 0x00	; 0
    4dc0:	e2 17       	cp	r30, r18
    4dc2:	f3 07       	cpc	r31, r19
    4dc4:	3c f4       	brge	.+14     	; 0x4dd4 <conv_brk+0x86>
    4dc6:	7d 35       	cpi	r23, 0x5D	; 93
    4dc8:	69 f1       	breq	.+90     	; 0x4e24 <conv_brk+0xd6>
    4dca:	7d 32       	cpi	r23, 0x2D	; 45
    4dcc:	19 f4       	brne	.+6      	; 0x4dd4 <conv_brk+0x86>
    4dce:	aa 23       	and	r26, r26
    4dd0:	19 f1       	breq	.+70     	; 0x4e18 <conv_brk+0xca>
    4dd2:	03 c0       	rjmp	.+6      	; 0x4dda <conv_brk+0x8c>
    4dd4:	a1 11       	cpse	r26, r1
    4dd6:	01 c0       	rjmp	.+2      	; 0x4dda <conv_brk+0x8c>
    4dd8:	a7 2e       	mov	r10, r23
    4dda:	e7 2f       	mov	r30, r23
    4ddc:	e6 95       	lsr	r30
    4dde:	e6 95       	lsr	r30
    4de0:	e6 95       	lsr	r30
    4de2:	3c 01       	movw	r6, r24
    4de4:	6e 0e       	add	r6, r30
    4de6:	71 1c       	adc	r7, r1
    4de8:	f3 01       	movw	r30, r6
    4dea:	a7 2f       	mov	r26, r23
    4dec:	a7 70       	andi	r26, 0x07	; 7
    4dee:	3a 01       	movw	r6, r20
    4df0:	02 c0       	rjmp	.+4      	; 0x4df6 <conv_brk+0xa8>
    4df2:	66 0c       	add	r6, r6
    4df4:	77 1c       	adc	r7, r7
    4df6:	aa 95       	dec	r26
    4df8:	e2 f7       	brpl	.-8      	; 0x4df2 <conv_brk+0xa4>
    4dfa:	d3 01       	movw	r26, r6
    4dfc:	b0 81       	ld	r27, Z
    4dfe:	ba 2b       	or	r27, r26
    4e00:	b0 83       	st	Z, r27
    4e02:	7a 15       	cp	r23, r10
    4e04:	59 f0       	breq	.+22     	; 0x4e1c <conv_brk+0xce>
    4e06:	7a 15       	cp	r23, r10
    4e08:	10 f4       	brcc	.+4      	; 0x4e0e <conv_brk+0xc0>
    4e0a:	7f 5f       	subi	r23, 0xFF	; 255
    4e0c:	e6 cf       	rjmp	.-52     	; 0x4dda <conv_brk+0x8c>
    4e0e:	71 50       	subi	r23, 0x01	; 1
    4e10:	e4 cf       	rjmp	.-56     	; 0x4dda <conv_brk+0x8c>
    4e12:	bb 24       	eor	r11, r11
    4e14:	b3 94       	inc	r11
    4e16:	03 c0       	rjmp	.+6      	; 0x4e1e <conv_brk+0xd0>
    4e18:	a1 e0       	ldi	r26, 0x01	; 1
    4e1a:	01 c0       	rjmp	.+2      	; 0x4e1e <conv_brk+0xd0>
    4e1c:	a0 e0       	ldi	r26, 0x00	; 0
    4e1e:	2f 5f       	subi	r18, 0xFF	; 255
    4e20:	3f 4f       	sbci	r19, 0xFF	; 255
    4e22:	bc cf       	rjmp	.-136    	; 0x4d9c <conv_brk+0x4e>
    4e24:	aa 23       	and	r26, r26
    4e26:	19 f0       	breq	.+6      	; 0x4e2e <conv_brk+0xe0>
    4e28:	8e 81       	ldd	r24, Y+6	; 0x06
    4e2a:	80 62       	ori	r24, 0x20	; 32
    4e2c:	8e 83       	std	Y+6, r24	; 0x06
    4e2e:	b1 10       	cpse	r11, r1
    4e30:	03 c0       	rjmp	.+6      	; 0x4e38 <conv_brk+0xea>
    4e32:	bb 24       	eor	r11, r11
    4e34:	b3 94       	inc	r11
    4e36:	0b c0       	rjmp	.+22     	; 0x4e4e <conv_brk+0x100>
    4e38:	fe 01       	movw	r30, r28
    4e3a:	31 96       	adiw	r30, 0x01	; 1
    4e3c:	ce 01       	movw	r24, r28
    4e3e:	81 96       	adiw	r24, 0x21	; 33
    4e40:	20 81       	ld	r18, Z
    4e42:	20 95       	com	r18
    4e44:	21 93       	st	Z+, r18
    4e46:	e8 17       	cp	r30, r24
    4e48:	f9 07       	cpc	r31, r25
    4e4a:	d1 f7       	brne	.-12     	; 0x4e40 <conv_brk+0xf2>
    4e4c:	f2 cf       	rjmp	.-28     	; 0x4e32 <conv_brk+0xe4>
    4e4e:	c6 01       	movw	r24, r12
    4e50:	69 a3       	std	Y+33, r22	; 0x21
    4e52:	72 d1       	rcall	.+740    	; 0x5138 <fgetc>
    4e54:	69 a1       	ldd	r22, Y+33	; 0x21
    4e56:	97 fd       	sbrc	r25, 7
    4e58:	23 c0       	rjmp	.+70     	; 0x4ea0 <conv_brk+0x152>
    4e5a:	28 2f       	mov	r18, r24
    4e5c:	26 95       	lsr	r18
    4e5e:	26 95       	lsr	r18
    4e60:	26 95       	lsr	r18
    4e62:	e1 e0       	ldi	r30, 0x01	; 1
    4e64:	f0 e0       	ldi	r31, 0x00	; 0
    4e66:	ec 0f       	add	r30, r28
    4e68:	fd 1f       	adc	r31, r29
    4e6a:	e2 0f       	add	r30, r18
    4e6c:	f1 1d       	adc	r31, r1
    4e6e:	20 81       	ld	r18, Z
    4e70:	30 e0       	ldi	r19, 0x00	; 0
    4e72:	ac 01       	movw	r20, r24
    4e74:	47 70       	andi	r20, 0x07	; 7
    4e76:	55 27       	eor	r21, r21
    4e78:	02 c0       	rjmp	.+4      	; 0x4e7e <conv_brk+0x130>
    4e7a:	35 95       	asr	r19
    4e7c:	27 95       	ror	r18
    4e7e:	4a 95       	dec	r20
    4e80:	e2 f7       	brpl	.-8      	; 0x4e7a <conv_brk+0x12c>
    4e82:	20 fd       	sbrc	r18, 0
    4e84:	03 c0       	rjmp	.+6      	; 0x4e8c <conv_brk+0x13e>
    4e86:	b6 01       	movw	r22, r12
    4e88:	97 d1       	rcall	.+814    	; 0x51b8 <ungetc>
    4e8a:	0a c0       	rjmp	.+20     	; 0x4ea0 <conv_brk+0x152>
    4e8c:	e1 14       	cp	r14, r1
    4e8e:	f1 04       	cpc	r15, r1
    4e90:	19 f0       	breq	.+6      	; 0x4e98 <conv_brk+0x14a>
    4e92:	d7 01       	movw	r26, r14
    4e94:	8d 93       	st	X+, r24
    4e96:	7d 01       	movw	r14, r26
    4e98:	61 50       	subi	r22, 0x01	; 1
    4e9a:	b1 2c       	mov	r11, r1
    4e9c:	c1 f6       	brne	.-80     	; 0x4e4e <conv_brk+0x100>
    4e9e:	02 c0       	rjmp	.+4      	; 0x4ea4 <conv_brk+0x156>
    4ea0:	b1 10       	cpse	r11, r1
    4ea2:	84 cf       	rjmp	.-248    	; 0x4dac <conv_brk+0x5e>
    4ea4:	e1 14       	cp	r14, r1
    4ea6:	f1 04       	cpc	r15, r1
    4ea8:	11 f0       	breq	.+4      	; 0x4eae <conv_brk+0x160>
    4eaa:	f7 01       	movw	r30, r14
    4eac:	10 82       	st	Z, r1
    4eae:	c8 01       	movw	r24, r16
    4eb0:	a1 96       	adiw	r28, 0x21	; 33
    4eb2:	cd bf       	out	0x3d, r28	; 61
    4eb4:	de bf       	out	0x3e, r29	; 62
    4eb6:	df 91       	pop	r29
    4eb8:	cf 91       	pop	r28
    4eba:	1f 91       	pop	r17
    4ebc:	0f 91       	pop	r16
    4ebe:	ff 90       	pop	r15
    4ec0:	ef 90       	pop	r14
    4ec2:	df 90       	pop	r13
    4ec4:	cf 90       	pop	r12
    4ec6:	bf 90       	pop	r11
    4ec8:	af 90       	pop	r10
    4eca:	9f 90       	pop	r9
    4ecc:	7f 90       	pop	r7
    4ece:	6f 90       	pop	r6
    4ed0:	08 95       	ret

00004ed2 <vfscanf>:
    4ed2:	4f 92       	push	r4
    4ed4:	5f 92       	push	r5
    4ed6:	7f 92       	push	r7
    4ed8:	8f 92       	push	r8
    4eda:	9f 92       	push	r9
    4edc:	af 92       	push	r10
    4ede:	bf 92       	push	r11
    4ee0:	cf 92       	push	r12
    4ee2:	df 92       	push	r13
    4ee4:	ef 92       	push	r14
    4ee6:	ff 92       	push	r15
    4ee8:	0f 93       	push	r16
    4eea:	1f 93       	push	r17
    4eec:	cf 93       	push	r28
    4eee:	df 93       	push	r29
    4ef0:	1f 92       	push	r1
    4ef2:	cd b7       	in	r28, 0x3d	; 61
    4ef4:	de b7       	in	r29, 0x3e	; 62
    4ef6:	8c 01       	movw	r16, r24
    4ef8:	2b 01       	movw	r4, r22
    4efa:	7a 01       	movw	r14, r20
    4efc:	fc 01       	movw	r30, r24
    4efe:	16 82       	std	Z+6, r1	; 0x06
    4f00:	17 82       	std	Z+7, r1	; 0x07
    4f02:	a1 2c       	mov	r10, r1
    4f04:	e2 c0       	rjmp	.+452    	; 0x50ca <vfscanf+0x1f8>
    4f06:	8c 2d       	mov	r24, r12
    4f08:	90 e0       	ldi	r25, 0x00	; 0
    4f0a:	03 d1       	rcall	.+518    	; 0x5112 <isspace>
    4f0c:	89 2b       	or	r24, r25
    4f0e:	19 f0       	breq	.+6      	; 0x4f16 <vfscanf+0x44>
    4f10:	c8 01       	movw	r24, r16
    4f12:	82 de       	rcall	.-764    	; 0x4c18 <skip_spaces>
    4f14:	da c0       	rjmp	.+436    	; 0x50ca <vfscanf+0x1f8>
    4f16:	f5 e2       	ldi	r31, 0x25	; 37
    4f18:	cf 12       	cpse	r12, r31
    4f1a:	0a c0       	rjmp	.+20     	; 0x4f30 <vfscanf+0x5e>
    4f1c:	f2 01       	movw	r30, r4
    4f1e:	d3 fc       	sbrc	r13, 3
    4f20:	35 91       	lpm	r19, Z+
    4f22:	d3 fe       	sbrs	r13, 3
    4f24:	31 91       	ld	r19, Z+
    4f26:	2f 01       	movw	r4, r30
    4f28:	35 32       	cpi	r19, 0x25	; 37
    4f2a:	61 f4       	brne	.+24     	; 0x4f44 <vfscanf+0x72>
    4f2c:	55 e2       	ldi	r21, 0x25	; 37
    4f2e:	c5 2e       	mov	r12, r21
    4f30:	c8 01       	movw	r24, r16
    4f32:	02 d1       	rcall	.+516    	; 0x5138 <fgetc>
    4f34:	97 fd       	sbrc	r25, 7
    4f36:	d4 c0       	rjmp	.+424    	; 0x50e0 <vfscanf+0x20e>
    4f38:	c8 16       	cp	r12, r24
    4f3a:	09 f4       	brne	.+2      	; 0x4f3e <vfscanf+0x6c>
    4f3c:	c6 c0       	rjmp	.+396    	; 0x50ca <vfscanf+0x1f8>
    4f3e:	b8 01       	movw	r22, r16
    4f40:	3b d1       	rcall	.+630    	; 0x51b8 <ungetc>
    4f42:	d0 c0       	rjmp	.+416    	; 0x50e4 <vfscanf+0x212>
    4f44:	3a 32       	cpi	r19, 0x2A	; 42
    4f46:	41 f4       	brne	.+16     	; 0x4f58 <vfscanf+0x86>
    4f48:	d3 fc       	sbrc	r13, 3
    4f4a:	35 91       	lpm	r19, Z+
    4f4c:	d3 fe       	sbrs	r13, 3
    4f4e:	31 91       	ld	r19, Z+
    4f50:	2f 01       	movw	r4, r30
    4f52:	bb 24       	eor	r11, r11
    4f54:	b3 94       	inc	r11
    4f56:	01 c0       	rjmp	.+2      	; 0x4f5a <vfscanf+0x88>
    4f58:	b1 2c       	mov	r11, r1
    4f5a:	71 2c       	mov	r7, r1
    4f5c:	0f c0       	rjmp	.+30     	; 0x4f7c <vfscanf+0xaa>
    4f5e:	f2 e0       	ldi	r31, 0x02	; 2
    4f60:	bf 2a       	or	r11, r31
    4f62:	67 2d       	mov	r22, r7
    4f64:	70 e0       	ldi	r23, 0x00	; 0
    4f66:	80 e0       	ldi	r24, 0x00	; 0
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	40 e2       	ldi	r20, 0x20	; 32
    4f6c:	23 de       	rcall	.-954    	; 0x4bb4 <mulacc>
    4f6e:	76 2e       	mov	r7, r22
    4f70:	f2 01       	movw	r30, r4
    4f72:	d3 fc       	sbrc	r13, 3
    4f74:	35 91       	lpm	r19, Z+
    4f76:	d3 fe       	sbrs	r13, 3
    4f78:	31 91       	ld	r19, Z+
    4f7a:	2f 01       	movw	r4, r30
    4f7c:	23 2f       	mov	r18, r19
    4f7e:	20 53       	subi	r18, 0x30	; 48
    4f80:	2a 30       	cpi	r18, 0x0A	; 10
    4f82:	68 f3       	brcs	.-38     	; 0x4f5e <vfscanf+0x8c>
    4f84:	b1 fe       	sbrs	r11, 1
    4f86:	03 c0       	rjmp	.+6      	; 0x4f8e <vfscanf+0xbc>
    4f88:	71 10       	cpse	r7, r1
    4f8a:	03 c0       	rjmp	.+6      	; 0x4f92 <vfscanf+0xc0>
    4f8c:	ab c0       	rjmp	.+342    	; 0x50e4 <vfscanf+0x212>
    4f8e:	77 24       	eor	r7, r7
    4f90:	7a 94       	dec	r7
    4f92:	38 36       	cpi	r19, 0x68	; 104
    4f94:	19 f0       	breq	.+6      	; 0x4f9c <vfscanf+0xca>
    4f96:	3c 36       	cpi	r19, 0x6C	; 108
    4f98:	99 f4       	brne	.+38     	; 0x4fc0 <vfscanf+0xee>
    4f9a:	0a c0       	rjmp	.+20     	; 0x4fb0 <vfscanf+0xde>
    4f9c:	f2 01       	movw	r30, r4
    4f9e:	d3 fc       	sbrc	r13, 3
    4fa0:	35 91       	lpm	r19, Z+
    4fa2:	d3 fe       	sbrs	r13, 3
    4fa4:	31 91       	ld	r19, Z+
    4fa6:	2f 01       	movw	r4, r30
    4fa8:	38 36       	cpi	r19, 0x68	; 104
    4faa:	51 f4       	brne	.+20     	; 0x4fc0 <vfscanf+0xee>
    4fac:	f8 e0       	ldi	r31, 0x08	; 8
    4fae:	bf 2a       	or	r11, r31
    4fb0:	84 e0       	ldi	r24, 0x04	; 4
    4fb2:	b8 2a       	or	r11, r24
    4fb4:	f2 01       	movw	r30, r4
    4fb6:	d3 fc       	sbrc	r13, 3
    4fb8:	35 91       	lpm	r19, Z+
    4fba:	d3 fe       	sbrs	r13, 3
    4fbc:	31 91       	ld	r19, Z+
    4fbe:	2f 01       	movw	r4, r30
    4fc0:	33 23       	and	r19, r19
    4fc2:	09 f4       	brne	.+2      	; 0x4fc6 <vfscanf+0xf4>
    4fc4:	8f c0       	rjmp	.+286    	; 0x50e4 <vfscanf+0x212>
    4fc6:	63 2f       	mov	r22, r19
    4fc8:	70 e0       	ldi	r23, 0x00	; 0
    4fca:	8c ef       	ldi	r24, 0xFC	; 252
    4fcc:	91 e0       	ldi	r25, 0x01	; 1
    4fce:	39 83       	std	Y+1, r19	; 0x01
    4fd0:	a8 d0       	rcall	.+336    	; 0x5122 <strchr_P>
    4fd2:	39 81       	ldd	r19, Y+1	; 0x01
    4fd4:	89 2b       	or	r24, r25
    4fd6:	09 f4       	brne	.+2      	; 0x4fda <vfscanf+0x108>
    4fd8:	85 c0       	rjmp	.+266    	; 0x50e4 <vfscanf+0x212>
    4fda:	b0 fc       	sbrc	r11, 0
    4fdc:	07 c0       	rjmp	.+14     	; 0x4fec <vfscanf+0x11a>
    4fde:	f7 01       	movw	r30, r14
    4fe0:	c0 80       	ld	r12, Z
    4fe2:	d1 80       	ldd	r13, Z+1	; 0x01
    4fe4:	82 e0       	ldi	r24, 0x02	; 2
    4fe6:	e8 0e       	add	r14, r24
    4fe8:	f1 1c       	adc	r15, r1
    4fea:	02 c0       	rjmp	.+4      	; 0x4ff0 <vfscanf+0x11e>
    4fec:	c1 2c       	mov	r12, r1
    4fee:	d1 2c       	mov	r13, r1
    4ff0:	3e 36       	cpi	r19, 0x6E	; 110
    4ff2:	49 f4       	brne	.+18     	; 0x5006 <vfscanf+0x134>
    4ff4:	f8 01       	movw	r30, r16
    4ff6:	46 81       	ldd	r20, Z+6	; 0x06
    4ff8:	57 81       	ldd	r21, Z+7	; 0x07
    4ffa:	60 e0       	ldi	r22, 0x00	; 0
    4ffc:	70 e0       	ldi	r23, 0x00	; 0
    4ffe:	2b 2d       	mov	r18, r11
    5000:	c6 01       	movw	r24, r12
    5002:	cc dd       	rcall	.-1128   	; 0x4b9c <putval>
    5004:	62 c0       	rjmp	.+196    	; 0x50ca <vfscanf+0x1f8>
    5006:	33 36       	cpi	r19, 0x63	; 99
    5008:	89 f4       	brne	.+34     	; 0x502c <vfscanf+0x15a>
    500a:	b1 fc       	sbrc	r11, 1
    500c:	02 c0       	rjmp	.+4      	; 0x5012 <vfscanf+0x140>
    500e:	77 24       	eor	r7, r7
    5010:	73 94       	inc	r7
    5012:	c8 01       	movw	r24, r16
    5014:	91 d0       	rcall	.+290    	; 0x5138 <fgetc>
    5016:	97 fd       	sbrc	r25, 7
    5018:	63 c0       	rjmp	.+198    	; 0x50e0 <vfscanf+0x20e>
    501a:	c1 14       	cp	r12, r1
    501c:	d1 04       	cpc	r13, r1
    501e:	19 f0       	breq	.+6      	; 0x5026 <vfscanf+0x154>
    5020:	f6 01       	movw	r30, r12
    5022:	81 93       	st	Z+, r24
    5024:	6f 01       	movw	r12, r30
    5026:	7a 94       	dec	r7
    5028:	a1 f7       	brne	.-24     	; 0x5012 <vfscanf+0x140>
    502a:	4d c0       	rjmp	.+154    	; 0x50c6 <vfscanf+0x1f4>
    502c:	3b 35       	cpi	r19, 0x5B	; 91
    502e:	51 f4       	brne	.+20     	; 0x5044 <vfscanf+0x172>
    5030:	92 01       	movw	r18, r4
    5032:	a6 01       	movw	r20, r12
    5034:	67 2d       	mov	r22, r7
    5036:	c8 01       	movw	r24, r16
    5038:	8a de       	rcall	.-748    	; 0x4d4e <conv_brk>
    503a:	2c 01       	movw	r4, r24
    503c:	00 97       	sbiw	r24, 0x00	; 0
    503e:	09 f0       	breq	.+2      	; 0x5042 <vfscanf+0x170>
    5040:	42 c0       	rjmp	.+132    	; 0x50c6 <vfscanf+0x1f4>
    5042:	3c c0       	rjmp	.+120    	; 0x50bc <vfscanf+0x1ea>
    5044:	c8 01       	movw	r24, r16
    5046:	39 83       	std	Y+1, r19	; 0x01
    5048:	e7 dd       	rcall	.-1074   	; 0x4c18 <skip_spaces>
    504a:	39 81       	ldd	r19, Y+1	; 0x01
    504c:	97 fd       	sbrc	r25, 7
    504e:	48 c0       	rjmp	.+144    	; 0x50e0 <vfscanf+0x20e>
    5050:	3f 36       	cpi	r19, 0x6F	; 111
    5052:	41 f1       	breq	.+80     	; 0x50a4 <vfscanf+0x1d2>
    5054:	28 f4       	brcc	.+10     	; 0x5060 <vfscanf+0x18e>
    5056:	34 36       	cpi	r19, 0x64	; 100
    5058:	11 f1       	breq	.+68     	; 0x509e <vfscanf+0x1cc>
    505a:	39 36       	cpi	r19, 0x69	; 105
    505c:	31 f5       	brne	.+76     	; 0x50aa <vfscanf+0x1d8>
    505e:	27 c0       	rjmp	.+78     	; 0x50ae <vfscanf+0x1dc>
    5060:	33 37       	cpi	r19, 0x73	; 115
    5062:	19 f0       	breq	.+6      	; 0x506a <vfscanf+0x198>
    5064:	35 37       	cpi	r19, 0x75	; 117
    5066:	09 f5       	brne	.+66     	; 0x50aa <vfscanf+0x1d8>
    5068:	1a c0       	rjmp	.+52     	; 0x509e <vfscanf+0x1cc>
    506a:	c8 01       	movw	r24, r16
    506c:	65 d0       	rcall	.+202    	; 0x5138 <fgetc>
    506e:	4c 01       	movw	r8, r24
    5070:	97 fd       	sbrc	r25, 7
    5072:	0f c0       	rjmp	.+30     	; 0x5092 <vfscanf+0x1c0>
    5074:	4e d0       	rcall	.+156    	; 0x5112 <isspace>
    5076:	89 2b       	or	r24, r25
    5078:	21 f0       	breq	.+8      	; 0x5082 <vfscanf+0x1b0>
    507a:	b8 01       	movw	r22, r16
    507c:	c4 01       	movw	r24, r8
    507e:	9c d0       	rcall	.+312    	; 0x51b8 <ungetc>
    5080:	08 c0       	rjmp	.+16     	; 0x5092 <vfscanf+0x1c0>
    5082:	c1 14       	cp	r12, r1
    5084:	d1 04       	cpc	r13, r1
    5086:	19 f0       	breq	.+6      	; 0x508e <vfscanf+0x1bc>
    5088:	f6 01       	movw	r30, r12
    508a:	81 92       	st	Z+, r8
    508c:	6f 01       	movw	r12, r30
    508e:	7a 94       	dec	r7
    5090:	61 f7       	brne	.-40     	; 0x506a <vfscanf+0x198>
    5092:	c1 14       	cp	r12, r1
    5094:	d1 04       	cpc	r13, r1
    5096:	b9 f0       	breq	.+46     	; 0x50c6 <vfscanf+0x1f4>
    5098:	f6 01       	movw	r30, r12
    509a:	10 82       	st	Z, r1
    509c:	14 c0       	rjmp	.+40     	; 0x50c6 <vfscanf+0x1f4>
    509e:	f0 e2       	ldi	r31, 0x20	; 32
    50a0:	bf 2a       	or	r11, r31
    50a2:	05 c0       	rjmp	.+10     	; 0x50ae <vfscanf+0x1dc>
    50a4:	80 e1       	ldi	r24, 0x10	; 16
    50a6:	b8 2a       	or	r11, r24
    50a8:	02 c0       	rjmp	.+4      	; 0x50ae <vfscanf+0x1dc>
    50aa:	90 e4       	ldi	r25, 0x40	; 64
    50ac:	b9 2a       	or	r11, r25
    50ae:	2b 2d       	mov	r18, r11
    50b0:	a6 01       	movw	r20, r12
    50b2:	67 2d       	mov	r22, r7
    50b4:	c8 01       	movw	r24, r16
    50b6:	c6 dd       	rcall	.-1140   	; 0x4c44 <conv_int>
    50b8:	81 11       	cpse	r24, r1
    50ba:	05 c0       	rjmp	.+10     	; 0x50c6 <vfscanf+0x1f4>
    50bc:	f8 01       	movw	r30, r16
    50be:	83 81       	ldd	r24, Z+3	; 0x03
    50c0:	80 73       	andi	r24, 0x30	; 48
    50c2:	71 f4       	brne	.+28     	; 0x50e0 <vfscanf+0x20e>
    50c4:	0f c0       	rjmp	.+30     	; 0x50e4 <vfscanf+0x212>
    50c6:	b0 fe       	sbrs	r11, 0
    50c8:	a3 94       	inc	r10
    50ca:	f8 01       	movw	r30, r16
    50cc:	d3 80       	ldd	r13, Z+3	; 0x03
    50ce:	f2 01       	movw	r30, r4
    50d0:	d3 fc       	sbrc	r13, 3
    50d2:	c5 90       	lpm	r12, Z+
    50d4:	d3 fe       	sbrs	r13, 3
    50d6:	c1 90       	ld	r12, Z+
    50d8:	2f 01       	movw	r4, r30
    50da:	c1 10       	cpse	r12, r1
    50dc:	14 cf       	rjmp	.-472    	; 0x4f06 <vfscanf+0x34>
    50de:	02 c0       	rjmp	.+4      	; 0x50e4 <vfscanf+0x212>
    50e0:	aa 20       	and	r10, r10
    50e2:	19 f0       	breq	.+6      	; 0x50ea <vfscanf+0x218>
    50e4:	2a 2d       	mov	r18, r10
    50e6:	30 e0       	ldi	r19, 0x00	; 0
    50e8:	02 c0       	rjmp	.+4      	; 0x50ee <vfscanf+0x21c>
    50ea:	2f ef       	ldi	r18, 0xFF	; 255
    50ec:	3f ef       	ldi	r19, 0xFF	; 255
    50ee:	c9 01       	movw	r24, r18
    50f0:	0f 90       	pop	r0
    50f2:	df 91       	pop	r29
    50f4:	cf 91       	pop	r28
    50f6:	1f 91       	pop	r17
    50f8:	0f 91       	pop	r16
    50fa:	ff 90       	pop	r15
    50fc:	ef 90       	pop	r14
    50fe:	df 90       	pop	r13
    5100:	cf 90       	pop	r12
    5102:	bf 90       	pop	r11
    5104:	af 90       	pop	r10
    5106:	9f 90       	pop	r9
    5108:	8f 90       	pop	r8
    510a:	7f 90       	pop	r7
    510c:	5f 90       	pop	r5
    510e:	4f 90       	pop	r4
    5110:	08 95       	ret

00005112 <isspace>:
    5112:	91 11       	cpse	r25, r1
    5114:	6c c0       	rjmp	.+216    	; 0x51ee <__ctype_isfalse>
    5116:	80 32       	cpi	r24, 0x20	; 32
    5118:	19 f0       	breq	.+6      	; 0x5120 <isspace+0xe>
    511a:	89 50       	subi	r24, 0x09	; 9
    511c:	85 50       	subi	r24, 0x05	; 5
    511e:	d0 f7       	brcc	.-12     	; 0x5114 <isspace+0x2>
    5120:	08 95       	ret

00005122 <strchr_P>:
    5122:	fc 01       	movw	r30, r24
    5124:	05 90       	lpm	r0, Z+
    5126:	06 16       	cp	r0, r22
    5128:	21 f0       	breq	.+8      	; 0x5132 <strchr_P+0x10>
    512a:	00 20       	and	r0, r0
    512c:	d9 f7       	brne	.-10     	; 0x5124 <strchr_P+0x2>
    512e:	c0 01       	movw	r24, r0
    5130:	08 95       	ret
    5132:	31 97       	sbiw	r30, 0x01	; 1
    5134:	cf 01       	movw	r24, r30
    5136:	08 95       	ret

00005138 <fgetc>:
    5138:	cf 93       	push	r28
    513a:	df 93       	push	r29
    513c:	ec 01       	movw	r28, r24
    513e:	3b 81       	ldd	r19, Y+3	; 0x03
    5140:	30 ff       	sbrs	r19, 0
    5142:	34 c0       	rjmp	.+104    	; 0x51ac <fgetc+0x74>
    5144:	36 ff       	sbrs	r19, 6
    5146:	0a c0       	rjmp	.+20     	; 0x515c <fgetc+0x24>
    5148:	3f 7b       	andi	r19, 0xBF	; 191
    514a:	3b 83       	std	Y+3, r19	; 0x03
    514c:	8e 81       	ldd	r24, Y+6	; 0x06
    514e:	9f 81       	ldd	r25, Y+7	; 0x07
    5150:	01 96       	adiw	r24, 0x01	; 1
    5152:	8e 83       	std	Y+6, r24	; 0x06
    5154:	9f 83       	std	Y+7, r25	; 0x07
    5156:	2a 81       	ldd	r18, Y+2	; 0x02
    5158:	30 e0       	ldi	r19, 0x00	; 0
    515a:	2a c0       	rjmp	.+84     	; 0x51b0 <fgetc+0x78>
    515c:	32 ff       	sbrs	r19, 2
    515e:	0f c0       	rjmp	.+30     	; 0x517e <fgetc+0x46>
    5160:	e8 81       	ld	r30, Y
    5162:	f9 81       	ldd	r31, Y+1	; 0x01
    5164:	80 81       	ld	r24, Z
    5166:	99 27       	eor	r25, r25
    5168:	87 fd       	sbrc	r24, 7
    516a:	90 95       	com	r25
    516c:	00 97       	sbiw	r24, 0x00	; 0
    516e:	19 f4       	brne	.+6      	; 0x5176 <fgetc+0x3e>
    5170:	30 62       	ori	r19, 0x20	; 32
    5172:	3b 83       	std	Y+3, r19	; 0x03
    5174:	1b c0       	rjmp	.+54     	; 0x51ac <fgetc+0x74>
    5176:	31 96       	adiw	r30, 0x01	; 1
    5178:	e8 83       	st	Y, r30
    517a:	f9 83       	std	Y+1, r31	; 0x01
    517c:	0e c0       	rjmp	.+28     	; 0x519a <fgetc+0x62>
    517e:	ea 85       	ldd	r30, Y+10	; 0x0a
    5180:	fb 85       	ldd	r31, Y+11	; 0x0b
    5182:	09 95       	icall
    5184:	97 ff       	sbrs	r25, 7
    5186:	09 c0       	rjmp	.+18     	; 0x519a <fgetc+0x62>
    5188:	2b 81       	ldd	r18, Y+3	; 0x03
    518a:	01 96       	adiw	r24, 0x01	; 1
    518c:	11 f4       	brne	.+4      	; 0x5192 <fgetc+0x5a>
    518e:	80 e1       	ldi	r24, 0x10	; 16
    5190:	01 c0       	rjmp	.+2      	; 0x5194 <fgetc+0x5c>
    5192:	80 e2       	ldi	r24, 0x20	; 32
    5194:	82 2b       	or	r24, r18
    5196:	8b 83       	std	Y+3, r24	; 0x03
    5198:	09 c0       	rjmp	.+18     	; 0x51ac <fgetc+0x74>
    519a:	2e 81       	ldd	r18, Y+6	; 0x06
    519c:	3f 81       	ldd	r19, Y+7	; 0x07
    519e:	2f 5f       	subi	r18, 0xFF	; 255
    51a0:	3f 4f       	sbci	r19, 0xFF	; 255
    51a2:	2e 83       	std	Y+6, r18	; 0x06
    51a4:	3f 83       	std	Y+7, r19	; 0x07
    51a6:	9c 01       	movw	r18, r24
    51a8:	33 27       	eor	r19, r19
    51aa:	02 c0       	rjmp	.+4      	; 0x51b0 <fgetc+0x78>
    51ac:	2f ef       	ldi	r18, 0xFF	; 255
    51ae:	3f ef       	ldi	r19, 0xFF	; 255
    51b0:	c9 01       	movw	r24, r18
    51b2:	df 91       	pop	r29
    51b4:	cf 91       	pop	r28
    51b6:	08 95       	ret

000051b8 <ungetc>:
    51b8:	fb 01       	movw	r30, r22
    51ba:	23 81       	ldd	r18, Z+3	; 0x03
    51bc:	20 ff       	sbrs	r18, 0
    51be:	13 c0       	rjmp	.+38     	; 0x51e6 <ungetc+0x2e>
    51c0:	26 fd       	sbrc	r18, 6
    51c2:	11 c0       	rjmp	.+34     	; 0x51e6 <ungetc+0x2e>
    51c4:	8f 3f       	cpi	r24, 0xFF	; 255
    51c6:	3f ef       	ldi	r19, 0xFF	; 255
    51c8:	93 07       	cpc	r25, r19
    51ca:	69 f0       	breq	.+26     	; 0x51e6 <ungetc+0x2e>
    51cc:	82 83       	std	Z+2, r24	; 0x02
    51ce:	2f 7d       	andi	r18, 0xDF	; 223
    51d0:	20 64       	ori	r18, 0x40	; 64
    51d2:	23 83       	std	Z+3, r18	; 0x03
    51d4:	26 81       	ldd	r18, Z+6	; 0x06
    51d6:	37 81       	ldd	r19, Z+7	; 0x07
    51d8:	21 50       	subi	r18, 0x01	; 1
    51da:	31 09       	sbc	r19, r1
    51dc:	26 83       	std	Z+6, r18	; 0x06
    51de:	37 83       	std	Z+7, r19	; 0x07
    51e0:	9c 01       	movw	r18, r24
    51e2:	33 27       	eor	r19, r19
    51e4:	02 c0       	rjmp	.+4      	; 0x51ea <ungetc+0x32>
    51e6:	2f ef       	ldi	r18, 0xFF	; 255
    51e8:	3f ef       	ldi	r19, 0xFF	; 255
    51ea:	c9 01       	movw	r24, r18
    51ec:	08 95       	ret

000051ee <__ctype_isfalse>:
    51ee:	99 27       	eor	r25, r25
    51f0:	88 27       	eor	r24, r24

000051f2 <__ctype_istrue>:
    51f2:	08 95       	ret

000051f4 <_exit>:
    51f4:	f8 94       	cli

000051f6 <__stop_program>:
    51f6:	ff cf       	rjmp	.-2      	; 0x51f6 <__stop_program>
