
TestIR_Domoctopus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00802000  00002a6a  00002afe  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027f  00802094  00802094  00002b90  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b90  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006f0  00000000  00000000  00002bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000df85  00000000  00000000  000032e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002b08  00000000  00000000  00011265  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000ac18  00000000  00000000  00013d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001318  00000000  00000000  0001e988  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0003008a  00000000  00000000  0001fca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005c41  00000000  00000000  0004fd2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000608  00000000  00000000  00055970  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000c1b0  00000000  00000000  00055f78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 9b 12 	jmp	0x2536	; 0x2536 <__vector_2>
       c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
       e:	00 00       	nop
      10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
      12:	00 00       	nop
      14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
      16:	00 00       	nop
      18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
      1e:	00 00       	nop
      20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
      22:	00 00       	nop
      24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
      26:	00 00       	nop
      28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__vector_11>
      30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
      32:	00 00       	nop
      34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
      36:	00 00       	nop
      38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
      3e:	00 00       	nop
      40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
      42:	00 00       	nop
      44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
      46:	00 00       	nop
      48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
      52:	00 00       	nop
      54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
      56:	00 00       	nop
      58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
      62:	00 00       	nop
      64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
      66:	00 00       	nop
      68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
      72:	00 00       	nop
      74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
      76:	00 00       	nop
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
      82:	00 00       	nop
      84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
      92:	00 00       	nop
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
      96:	00 00       	nop
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
     102:	00 00       	nop
     104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
     106:	00 00       	nop
     108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
     10e:	00 00       	nop
     110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
     112:	00 00       	nop
     114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
     116:	00 00       	nop
     118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
     11e:	00 00       	nop
     120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
     122:	00 00       	nop
     124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
     126:	00 00       	nop
     128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
     12e:	00 00       	nop
     130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
     132:	00 00       	nop
     134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
     136:	00 00       	nop
     138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
     13e:	00 00       	nop
     140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
     142:	00 00       	nop
     144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
     146:	00 00       	nop
     148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
     14e:	00 00       	nop
     150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
     152:	00 00       	nop
     154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
     156:	00 00       	nop
     158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
     15e:	00 00       	nop
     160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
     162:	00 00       	nop
     164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
     166:	00 00       	nop
     168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
     16e:	00 00       	nop
     170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
     172:	00 00       	nop
     174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
     176:	00 00       	nop
     178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
     17e:	00 00       	nop
     180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
     182:	00 00       	nop
     184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
     186:	00 00       	nop
     188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
     18e:	00 00       	nop
     190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
     192:	00 00       	nop
     194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
     196:	00 00       	nop
     198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__vector_125>
     1f8:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__vector_126>
     1fc:	19 0a       	sbc	r1, r25
     1fe:	07 0a       	sbc	r0, r23
     200:	0a 0a       	sbc	r0, r26
     202:	0d 0a       	sbc	r0, r29
     204:	10 0a       	sbc	r1, r16
     206:	13 0a       	sbc	r1, r19
     208:	16 0a       	sbc	r1, r22

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e2       	ldi	r29, 0x2F	; 47
     214:	de bf       	out	0x3e, r29	; 62

00000216 <__do_copy_data>:
     216:	10 e2       	ldi	r17, 0x20	; 32
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b0 e2       	ldi	r27, 0x20	; 32
     21c:	ea e6       	ldi	r30, 0x6A	; 106
     21e:	fa e2       	ldi	r31, 0x2A	; 42
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x10>
     222:	05 90       	lpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	a2 39       	cpi	r26, 0x92	; 146
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0xc>

0000022c <__do_clear_bss>:
     22c:	23 e2       	ldi	r18, 0x23	; 35
     22e:	a4 e9       	ldi	r26, 0x94	; 148
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	a3 31       	cpi	r26, 0x13	; 19
     238:	b2 07       	cpc	r27, r18
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
     23c:	0e 94 1c 13 	call	0x2638	; 0x2638 <main>
     240:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <_exit>

00000244 <__bad_interrupt>:
     244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <udi_cdc_comm_enable>:
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
}
     246:	10 92 aa 21 	sts	0x21AA, r1
     24a:	10 92 b6 21 	sts	0x21B6, r1
     24e:	10 92 b7 21 	sts	0x21B7, r1
     252:	81 ea       	ldi	r24, 0xA1	; 161
     254:	80 93 ac 21 	sts	0x21AC, r24
     258:	80 e2       	ldi	r24, 0x20	; 32
     25a:	80 93 ad 21 	sts	0x21AD, r24
     25e:	10 92 ae 21 	sts	0x21AE, r1
     262:	10 92 af 21 	sts	0x21AF, r1
     266:	10 92 b0 21 	sts	0x21B0, r1
     26a:	10 92 b1 21 	sts	0x21B1, r1
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	80 93 b2 21 	sts	0x21B2, r24
     276:	90 93 b3 21 	sts	0x21B3, r25
     27a:	10 92 b4 21 	sts	0x21B4, r1
     27e:	10 92 b5 21 	sts	0x21B5, r1
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	92 ec       	ldi	r25, 0xC2	; 194
     286:	a1 e0       	ldi	r26, 0x01	; 1
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	80 93 b8 21 	sts	0x21B8, r24
     28e:	90 93 b9 21 	sts	0x21B9, r25
     292:	a0 93 ba 21 	sts	0x21BA, r26
     296:	b0 93 bb 21 	sts	0x21BB, r27
     29a:	10 92 bc 21 	sts	0x21BC, r1
     29e:	10 92 bd 21 	sts	0x21BD, r1
     2a2:	88 e0       	ldi	r24, 0x08	; 8
     2a4:	80 93 be 21 	sts	0x21BE, r24
     2a8:	80 91 aa 21 	lds	r24, 0x21AA
     2ac:	8f 5f       	subi	r24, 0xFF	; 255
     2ae:	80 93 aa 21 	sts	0x21AA, r24
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	08 95       	ret

000002b6 <udi_cdc_comm_disable>:
     2b6:	80 91 aa 21 	lds	r24, 0x21AA
     2ba:	81 50       	subi	r24, 0x01	; 1
     2bc:	80 93 aa 21 	sts	0x21AA, r24
     2c0:	08 95       	ret

000002c2 <udi_cdc_data_disable>:
     2c2:	80 91 a9 21 	lds	r24, 0x21A9
     2c6:	81 50       	subi	r24, 0x01	; 1
     2c8:	80 93 a9 21 	sts	0x21A9, r24
     2cc:	80 91 a9 21 	lds	r24, 0x21A9
     2d0:	10 92 a8 21 	sts	0x21A8, r1
     2d4:	08 95       	ret

000002d6 <udi_cdc_data_setup>:
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	08 95       	ret

000002da <udi_cdc_getsetting>:
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	08 95       	ret

000002de <udi_cdc_comm_setup>:
     2de:	80 91 f7 22 	lds	r24, 0x22F7
     2e2:	88 23       	and	r24, r24
     2e4:	dc f4       	brge	.+54     	; 0x31c <udi_cdc_comm_setup+0x3e>
     2e6:	80 76       	andi	r24, 0x60	; 96
     2e8:	80 32       	cpi	r24, 0x20	; 32
     2ea:	e9 f5       	brne	.+122    	; 0x366 <udi_cdc_comm_setup+0x88>
     2ec:	80 91 f8 22 	lds	r24, 0x22F8
     2f0:	81 32       	cpi	r24, 0x21	; 33
     2f2:	d9 f5       	brne	.+118    	; 0x36a <udi_cdc_comm_setup+0x8c>
     2f4:	80 91 fd 22 	lds	r24, 0x22FD
     2f8:	90 91 fe 22 	lds	r25, 0x22FE
     2fc:	07 97       	sbiw	r24, 0x07	; 7
     2fe:	b9 f5       	brne	.+110    	; 0x36e <udi_cdc_comm_setup+0x90>
     300:	88 eb       	ldi	r24, 0xB8	; 184
     302:	91 e2       	ldi	r25, 0x21	; 33
     304:	80 93 ff 22 	sts	0x22FF, r24
     308:	90 93 00 23 	sts	0x2300, r25
     30c:	87 e0       	ldi	r24, 0x07	; 7
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	80 93 01 23 	sts	0x2301, r24
     314:	90 93 02 23 	sts	0x2302, r25
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	08 95       	ret
     31c:	80 76       	andi	r24, 0x60	; 96
     31e:	80 32       	cpi	r24, 0x20	; 32
     320:	41 f5       	brne	.+80     	; 0x372 <udi_cdc_comm_setup+0x94>
     322:	80 91 f8 22 	lds	r24, 0x22F8
     326:	80 32       	cpi	r24, 0x20	; 32
     328:	21 f0       	breq	.+8      	; 0x332 <udi_cdc_comm_setup+0x54>
     32a:	82 32       	cpi	r24, 0x22	; 34
     32c:	21 f5       	brne	.+72     	; 0x376 <udi_cdc_comm_setup+0x98>
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	08 95       	ret
     332:	80 91 fd 22 	lds	r24, 0x22FD
     336:	90 91 fe 22 	lds	r25, 0x22FE
     33a:	07 97       	sbiw	r24, 0x07	; 7
     33c:	f1 f4       	brne	.+60     	; 0x37a <udi_cdc_comm_setup+0x9c>
     33e:	8f eb       	ldi	r24, 0xBF	; 191
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	80 93 03 23 	sts	0x2303, r24
     346:	90 93 04 23 	sts	0x2304, r25
     34a:	88 eb       	ldi	r24, 0xB8	; 184
     34c:	91 e2       	ldi	r25, 0x21	; 33
     34e:	80 93 ff 22 	sts	0x22FF, r24
     352:	90 93 00 23 	sts	0x2300, r25
     356:	87 e0       	ldi	r24, 0x07	; 7
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	80 93 01 23 	sts	0x2301, r24
     35e:	90 93 02 23 	sts	0x2302, r25
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	08 95       	ret
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	08 95       	ret
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	08 95       	ret
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	08 95       	ret
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	08 95       	ret
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	08 95       	ret
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	08 95       	ret

0000037e <udi_cdc_line_coding_received>:
     37e:	08 95       	ret

00000380 <udi_cdc_tx_send>:
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	80 91 97 20 	lds	r24, 0x2097
     38e:	81 11       	cpse	r24, r1
     390:	9c c0       	rjmp	.+312    	; 0x4ca <udi_cdc_tx_send+0x14a>
     392:	0e 94 ba 0b 	call	0x1774	; 0x1774 <udd_is_high_speed>
     396:	88 23       	and	r24, r24
     398:	51 f0       	breq	.+20     	; 0x3ae <udi_cdc_tx_send+0x2e>
     39a:	c0 91 98 20 	lds	r28, 0x2098
     39e:	d0 91 99 20 	lds	r29, 0x2099
     3a2:	0e 94 c7 0b 	call	0x178e	; 0x178e <udd_get_micro_frame_number>
     3a6:	c8 17       	cp	r28, r24
     3a8:	d9 07       	cpc	r29, r25
     3aa:	59 f4       	brne	.+22     	; 0x3c2 <udi_cdc_tx_send+0x42>
     3ac:	8e c0       	rjmp	.+284    	; 0x4ca <udi_cdc_tx_send+0x14a>
     3ae:	c0 91 98 20 	lds	r28, 0x2098
     3b2:	d0 91 99 20 	lds	r29, 0x2099
     3b6:	0e 94 c2 0b 	call	0x1784	; 0x1784 <udd_get_frame_number>
     3ba:	c8 17       	cp	r28, r24
     3bc:	d9 07       	cpc	r29, r25
     3be:	09 f4       	brne	.+2      	; 0x3c2 <udi_cdc_tx_send+0x42>
     3c0:	84 c0       	rjmp	.+264    	; 0x4ca <udi_cdc_tx_send+0x14a>
     3c2:	df b7       	in	r29, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	c0 91 9a 20 	lds	r28, 0x209A
     3ca:	ec 2f       	mov	r30, r28
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	ee 0f       	add	r30, r30
     3d0:	ff 1f       	adc	r31, r31
     3d2:	e5 56       	subi	r30, 0x65	; 101
     3d4:	ff 4d       	sbci	r31, 0xDF	; 223
     3d6:	80 81       	ld	r24, Z
     3d8:	91 81       	ldd	r25, Z+1	; 0x01
     3da:	89 2b       	or	r24, r25
     3dc:	09 f5       	brne	.+66     	; 0x420 <udi_cdc_tx_send+0xa0>
     3de:	80 91 94 20 	lds	r24, 0x2094
     3e2:	90 91 95 20 	lds	r25, 0x2095
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	80 93 94 20 	sts	0x2094, r24
     3ec:	90 93 95 20 	sts	0x2095, r25
     3f0:	0e 94 ba 0b 	call	0x1774	; 0x1774 <udd_is_high_speed>
     3f4:	81 11       	cpse	r24, r1
     3f6:	07 c0       	rjmp	.+14     	; 0x406 <udi_cdc_tx_send+0x86>
     3f8:	80 91 94 20 	lds	r24, 0x2094
     3fc:	90 91 95 20 	lds	r25, 0x2095
     400:	84 36       	cpi	r24, 0x64	; 100
     402:	91 05       	cpc	r25, r1
     404:	58 f0       	brcs	.+22     	; 0x41c <udi_cdc_tx_send+0x9c>
     406:	0e 94 ba 0b 	call	0x1774	; 0x1774 <udd_is_high_speed>
     40a:	88 23       	and	r24, r24
     40c:	49 f0       	breq	.+18     	; 0x420 <udi_cdc_tx_send+0xa0>
     40e:	80 91 94 20 	lds	r24, 0x2094
     412:	90 91 95 20 	lds	r25, 0x2095
     416:	80 32       	cpi	r24, 0x20	; 32
     418:	93 40       	sbci	r25, 0x03	; 3
     41a:	10 f4       	brcc	.+4      	; 0x420 <udi_cdc_tx_send+0xa0>
     41c:	df bf       	out	0x3f, r29	; 63
     41e:	55 c0       	rjmp	.+170    	; 0x4ca <udi_cdc_tx_send+0x14a>
     420:	10 92 94 20 	sts	0x2094, r1
     424:	10 92 95 20 	sts	0x2095, r1
     428:	80 91 96 20 	lds	r24, 0x2096
     42c:	81 11       	cpse	r24, r1
     42e:	06 c0       	rjmp	.+12     	; 0x43c <udi_cdc_tx_send+0xbc>
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	c1 11       	cpse	r28, r1
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	80 93 9a 20 	sts	0x209A, r24
     43a:	04 c0       	rjmp	.+8      	; 0x444 <udi_cdc_tx_send+0xc4>
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	c1 11       	cpse	r28, r1
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	c8 2f       	mov	r28, r24
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	80 93 97 20 	sts	0x2097, r24
     44a:	df bf       	out	0x3f, r29	; 63
     44c:	d0 e0       	ldi	r29, 0x00	; 0
     44e:	fe 01       	movw	r30, r28
     450:	ee 0f       	add	r30, r30
     452:	ff 1f       	adc	r31, r31
     454:	e5 56       	subi	r30, 0x65	; 101
     456:	ff 4d       	sbci	r31, 0xDF	; 223
     458:	ff 24       	eor	r15, r15
     45a:	f3 94       	inc	r15
     45c:	80 81       	ld	r24, Z
     45e:	91 81       	ldd	r25, Z+1	; 0x01
     460:	80 34       	cpi	r24, 0x40	; 64
     462:	91 05       	cpc	r25, r1
     464:	09 f4       	brne	.+2      	; 0x468 <udi_cdc_tx_send+0xe8>
     466:	f1 2c       	mov	r15, r1
     468:	ff 20       	and	r15, r15
     46a:	91 f0       	breq	.+36     	; 0x490 <udi_cdc_tx_send+0x110>
     46c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <udd_is_high_speed>
     470:	88 23       	and	r24, r24
     472:	39 f0       	breq	.+14     	; 0x482 <udi_cdc_tx_send+0x102>
     474:	0e 94 c7 0b 	call	0x178e	; 0x178e <udd_get_micro_frame_number>
     478:	80 93 98 20 	sts	0x2098, r24
     47c:	90 93 99 20 	sts	0x2099, r25
     480:	0b c0       	rjmp	.+22     	; 0x498 <udi_cdc_tx_send+0x118>
     482:	0e 94 c2 0b 	call	0x1784	; 0x1784 <udd_get_frame_number>
     486:	80 93 98 20 	sts	0x2098, r24
     48a:	90 93 99 20 	sts	0x2099, r25
     48e:	04 c0       	rjmp	.+8      	; 0x498 <udi_cdc_tx_send+0x118>
     490:	10 92 98 20 	sts	0x2098, r1
     494:	10 92 99 20 	sts	0x2099, r1
     498:	fe 01       	movw	r30, r28
     49a:	ee 0f       	add	r30, r30
     49c:	ff 1f       	adc	r31, r31
     49e:	e5 56       	subi	r30, 0x65	; 101
     4a0:	ff 4d       	sbci	r31, 0xDF	; 223
     4a2:	20 81       	ld	r18, Z
     4a4:	31 81       	ldd	r19, Z+1	; 0x01
     4a6:	ae 01       	movw	r20, r28
     4a8:	00 24       	eor	r0, r0
     4aa:	56 95       	lsr	r21
     4ac:	47 95       	ror	r20
     4ae:	07 94       	ror	r0
     4b0:	56 95       	lsr	r21
     4b2:	47 95       	ror	r20
     4b4:	07 94       	ror	r0
     4b6:	54 2f       	mov	r21, r20
     4b8:	40 2d       	mov	r20, r0
     4ba:	40 56       	subi	r20, 0x60	; 96
     4bc:	5f 4d       	sbci	r21, 0xDF	; 223
     4be:	0b e6       	ldi	r16, 0x6B	; 107
     4c0:	12 e0       	ldi	r17, 0x02	; 2
     4c2:	6f 2d       	mov	r22, r15
     4c4:	81 e8       	ldi	r24, 0x81	; 129
     4c6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <udd_ep_run>
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	ff 90       	pop	r15
     4d4:	08 95       	ret

000004d6 <udi_cdc_data_sent>:
     4d6:	81 11       	cpse	r24, r1
     4d8:	15 c0       	rjmp	.+42     	; 0x504 <udi_cdc_data_sent+0x2e>
     4da:	20 91 9a 20 	lds	r18, 0x209A
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	22 23       	and	r18, r18
     4e4:	11 f0       	breq	.+4      	; 0x4ea <udi_cdc_data_sent+0x14>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	fc 01       	movw	r30, r24
     4ec:	ee 0f       	add	r30, r30
     4ee:	ff 1f       	adc	r31, r31
     4f0:	e5 56       	subi	r30, 0x65	; 101
     4f2:	ff 4d       	sbci	r31, 0xDF	; 223
     4f4:	10 82       	st	Z, r1
     4f6:	11 82       	std	Z+1, r1	; 0x01
     4f8:	10 92 96 20 	sts	0x2096, r1
     4fc:	10 92 97 20 	sts	0x2097, r1
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	3e cf       	rjmp	.-388    	; 0x380 <udi_cdc_tx_send>
     504:	08 95       	ret

00000506 <udi_cdc_data_sof_notify>:
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	3b cf       	rjmp	.-394    	; 0x380 <udi_cdc_tx_send>
     50a:	08 95       	ret

0000050c <udi_cdc_multi_get_nb_received_data>:
     50c:	4f b7       	in	r20, 0x3f	; 63
     50e:	f8 94       	cli
     510:	20 91 21 21 	lds	r18, 0x2121
     514:	30 91 22 21 	lds	r19, 0x2122
     518:	e0 91 23 21 	lds	r30, 0x2123
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	ee 0f       	add	r30, r30
     520:	ff 1f       	adc	r31, r31
     522:	ec 5d       	subi	r30, 0xDC	; 220
     524:	fe 4d       	sbci	r31, 0xDE	; 222
     526:	80 81       	ld	r24, Z
     528:	91 81       	ldd	r25, Z+1	; 0x01
     52a:	82 1b       	sub	r24, r18
     52c:	93 0b       	sbc	r25, r19
     52e:	4f bf       	out	0x3f, r20	; 63
     530:	08 95       	ret

00000532 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     532:	ec df       	rcall	.-40     	; 0x50c <udi_cdc_multi_get_nb_received_data>
     534:	21 e0       	ldi	r18, 0x01	; 1
     536:	89 2b       	or	r24, r25
     538:	09 f4       	brne	.+2      	; 0x53c <udi_cdc_multi_is_rx_ready+0xa>
     53a:	20 e0       	ldi	r18, 0x00	; 0
}
     53c:	82 2f       	mov	r24, r18
     53e:	08 95       	ret

00000540 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     548:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
     54a:	f8 94       	cli
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     54c:	50 91 23 21 	lds	r21, 0x2123
	if (udi_cdc_rx_trans_ongoing[port] ||
     550:	80 91 20 21 	lds	r24, 0x2120
     554:	81 11       	cpse	r24, r1
     556:	10 c0       	rjmp	.+32     	; 0x578 <udi_cdc_rx_start+0x38>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     558:	20 91 21 21 	lds	r18, 0x2121
     55c:	30 91 22 21 	lds	r19, 0x2122
     560:	c5 2f       	mov	r28, r21
     562:	d0 e0       	ldi	r29, 0x00	; 0
     564:	fe 01       	movw	r30, r28
     566:	ee 0f       	add	r30, r30
     568:	ff 1f       	adc	r31, r31
     56a:	ec 5d       	subi	r30, 0xDC	; 220
     56c:	fe 4d       	sbci	r31, 0xDE	; 222
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
     56e:	80 81       	ld	r24, Z
     570:	91 81       	ldd	r25, Z+1	; 0x01
     572:	28 17       	cp	r18, r24
     574:	39 07       	cpc	r19, r25
     576:	18 f4       	brcc	.+6      	; 0x57e <udi_cdc_rx_start+0x3e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     578:	4f bf       	out	0x3f, r20	; 63
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	23 c0       	rjmp	.+70     	; 0x5c4 <udi_cdc_rx_start+0x84>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
     57e:	10 92 21 21 	sts	0x2121, r1
     582:	10 92 22 21 	sts	0x2122, r1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	51 11       	cpse	r21, r1
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	80 93 23 21 	sts	0x2123, r24

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	80 93 20 21 	sts	0x2120, r24
     596:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	cb df       	rcall	.-106    	; 0x532 <udi_cdc_multi_is_rx_ready>
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
     59c:	ae 01       	movw	r20, r28
     59e:	00 24       	eor	r0, r0
     5a0:	56 95       	lsr	r21
     5a2:	47 95       	ror	r20
     5a4:	07 94       	ror	r0
     5a6:	56 95       	lsr	r21
     5a8:	47 95       	ror	r20
     5aa:	07 94       	ror	r0
     5ac:	54 2f       	mov	r21, r20
     5ae:	40 2d       	mov	r20, r0
     5b0:	48 5d       	subi	r20, 0xD8	; 216
     5b2:	5e 4d       	sbci	r21, 0xDE	; 222
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
     5b4:	09 e1       	ldi	r16, 0x19	; 25
     5b6:	13 e0       	ldi	r17, 0x03	; 3
     5b8:	20 e4       	ldi	r18, 0x40	; 64
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <udd_ep_run>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	08 95       	ret

000005ce <udi_cdc_data_enable>:
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
     5ce:	10 92 a9 21 	sts	0x21A9, r1
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
     5d2:	10 92 97 20 	sts	0x2097, r1
	udi_cdc_tx_both_buf_to_send[port] = false;
     5d6:	10 92 96 20 	sts	0x2096, r1
	udi_cdc_tx_buf_sel[port] = 0;
     5da:	10 92 9a 20 	sts	0x209A, r1
	udi_cdc_tx_buf_nb[port][0] = 0;
     5de:	10 92 9b 20 	sts	0x209B, r1
     5e2:	10 92 9c 20 	sts	0x209C, r1
	udi_cdc_tx_buf_nb[port][1] = 0;
     5e6:	10 92 9d 20 	sts	0x209D, r1
     5ea:	10 92 9e 20 	sts	0x209E, r1
	udi_cdc_tx_sof_num[port] = 0;
     5ee:	10 92 98 20 	sts	0x2098, r1
     5f2:	10 92 99 20 	sts	0x2099, r1
	udi_cdc_tx_send(port);
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	c3 de       	rcall	.-634    	; 0x380 <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
     5fa:	10 92 20 21 	sts	0x2120, r1
	udi_cdc_rx_buf_sel[port] = 0;
     5fe:	10 92 23 21 	sts	0x2123, r1
	udi_cdc_rx_buf_nb[port][0] = 0;
     602:	10 92 24 21 	sts	0x2124, r1
     606:	10 92 25 21 	sts	0x2125, r1
	udi_cdc_rx_pos[port] = 0;
     60a:	10 92 21 21 	sts	0x2121, r1
     60e:	10 92 22 21 	sts	0x2122, r1
	if (!udi_cdc_rx_start(port)) {
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	95 df       	rcall	.-214    	; 0x540 <udi_cdc_rx_start>
     616:	88 23       	and	r24, r24
     618:	59 f0       	breq	.+22     	; 0x630 <udi_cdc_data_enable+0x62>
		return false;
	}
	udi_cdc_nb_data_enabled++;
     61a:	90 91 a9 21 	lds	r25, 0x21A9
     61e:	9f 5f       	subi	r25, 0xFF	; 255
     620:	90 93 a9 21 	sts	0x21A9, r25
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     624:	90 91 a9 21 	lds	r25, 0x21A9
     628:	91 30       	cpi	r25, 0x01	; 1
     62a:	11 f4       	brne	.+4      	; 0x630 <udi_cdc_data_enable+0x62>
		udi_cdc_data_running = true;
     62c:	90 93 a8 21 	sts	0x21A8, r25
	}
	return true;
}
     630:	08 95       	ret

00000632 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	94 2f       	mov	r25, r20
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
     638:	81 11       	cpse	r24, r1
     63a:	29 c0       	rjmp	.+82     	; 0x68e <udi_cdc_data_received+0x5c>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     63c:	80 91 23 21 	lds	r24, 0x2123
     640:	e1 e0       	ldi	r30, 0x01	; 1
     642:	81 11       	cpse	r24, r1
     644:	e0 e0       	ldi	r30, 0x00	; 0
	if (!n) {
     646:	61 15       	cp	r22, r1
     648:	71 05       	cpc	r23, r1
     64a:	b1 f4       	brne	.+44     	; 0x678 <udi_cdc_data_received+0x46>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	00 24       	eor	r0, r0
     650:	f6 95       	lsr	r31
     652:	e7 95       	ror	r30
     654:	07 94       	ror	r0
     656:	f6 95       	lsr	r31
     658:	e7 95       	ror	r30
     65a:	07 94       	ror	r0
     65c:	fe 2f       	mov	r31, r30
     65e:	e0 2d       	mov	r30, r0
     660:	af 01       	movw	r20, r30
     662:	48 5d       	subi	r20, 0xD8	; 216
     664:	5e 4d       	sbci	r21, 0xDE	; 222
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
     666:	09 e1       	ldi	r16, 0x19	; 25
     668:	13 e0       	ldi	r17, 0x03	; 3
     66a:	20 e4       	ldi	r18, 0x40	; 64
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	89 2f       	mov	r24, r25
     672:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <udd_ep_run>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
     676:	0b c0       	rjmp	.+22     	; 0x68e <udi_cdc_data_received+0x5c>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	ee 0f       	add	r30, r30
     67c:	ff 1f       	adc	r31, r31
     67e:	ec 5d       	subi	r30, 0xDC	; 220
     680:	fe 4d       	sbci	r31, 0xDE	; 222
     682:	60 83       	st	Z, r22
     684:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
     686:	10 92 20 21 	sts	0x2120, r1
	udi_cdc_rx_start(port);
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	59 df       	rcall	.-334    	; 0x540 <udi_cdc_rx_start>
}
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     694:	e0 91 c4 21 	lds	r30, 0x21C4
     698:	f0 91 c5 21 	lds	r31, 0x21C5
     69c:	01 90       	ld	r0, Z+
     69e:	f0 81       	ld	r31, Z
     6a0:	e0 2d       	mov	r30, r0
     6a2:	22 81       	ldd	r18, Z+2	; 0x02
     6a4:	33 81       	ldd	r19, Z+3	; 0x03
     6a6:	2e 0f       	add	r18, r30
     6a8:	3f 1f       	adc	r19, r31
     6aa:	fc 01       	movw	r30, r24
     6ac:	40 81       	ld	r20, Z
     6ae:	e4 0f       	add	r30, r20
     6b0:	f1 1d       	adc	r31, r1
     6b2:	e2 17       	cp	r30, r18
     6b4:	f3 07       	cpc	r31, r19
     6b6:	a0 f4       	brcc	.+40     	; 0x6e0 <udc_next_desc_in_iface+0x4c>
     6b8:	81 81       	ldd	r24, Z+1	; 0x01
     6ba:	84 30       	cpi	r24, 0x04	; 4
     6bc:	a1 f0       	breq	.+40     	; 0x6e6 <udc_next_desc_in_iface+0x52>
     6be:	86 13       	cpse	r24, r22
     6c0:	06 c0       	rjmp	.+12     	; 0x6ce <udc_next_desc_in_iface+0x3a>
     6c2:	14 c0       	rjmp	.+40     	; 0x6ec <udc_next_desc_in_iface+0x58>
     6c4:	81 81       	ldd	r24, Z+1	; 0x01
     6c6:	84 30       	cpi	r24, 0x04	; 4
     6c8:	a1 f0       	breq	.+40     	; 0x6f2 <udc_next_desc_in_iface+0x5e>
     6ca:	86 17       	cp	r24, r22
     6cc:	a9 f0       	breq	.+42     	; 0x6f8 <udc_next_desc_in_iface+0x64>
     6ce:	80 81       	ld	r24, Z
     6d0:	e8 0f       	add	r30, r24
     6d2:	f1 1d       	adc	r31, r1
     6d4:	e2 17       	cp	r30, r18
     6d6:	f3 07       	cpc	r31, r19
     6d8:	a8 f3       	brcs	.-22     	; 0x6c4 <udc_next_desc_in_iface+0x30>
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	08 95       	ret
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	08 95       	ret
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	08 95       	ret
     6ec:	8e 2f       	mov	r24, r30
     6ee:	9f 2f       	mov	r25, r31
     6f0:	08 95       	ret
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	08 95       	ret
     6f8:	8e 2f       	mov	r24, r30
     6fa:	9f 2f       	mov	r25, r31
     6fc:	08 95       	ret

000006fe <udc_valid_address>:
     6fe:	80 91 f9 22 	lds	r24, 0x22F9
     702:	8f 77       	andi	r24, 0x7F	; 127
     704:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <udd_set_address>
     708:	08 95       	ret

0000070a <udc_update_iface_desc>:
     70a:	90 91 c6 21 	lds	r25, 0x21C6
     70e:	99 23       	and	r25, r25
     710:	81 f1       	breq	.+96     	; 0x772 <udc_update_iface_desc+0x68>
     712:	e0 91 c4 21 	lds	r30, 0x21C4
     716:	f0 91 c5 21 	lds	r31, 0x21C5
     71a:	01 90       	ld	r0, Z+
     71c:	f0 81       	ld	r31, Z
     71e:	e0 2d       	mov	r30, r0
     720:	94 81       	ldd	r25, Z+4	; 0x04
     722:	89 17       	cp	r24, r25
     724:	40 f5       	brcc	.+80     	; 0x776 <udc_update_iface_desc+0x6c>
     726:	e0 93 c2 21 	sts	0x21C2, r30
     72a:	f0 93 c3 21 	sts	0x21C3, r31
     72e:	22 81       	ldd	r18, Z+2	; 0x02
     730:	33 81       	ldd	r19, Z+3	; 0x03
     732:	2e 0f       	add	r18, r30
     734:	3f 1f       	adc	r19, r31
     736:	e2 17       	cp	r30, r18
     738:	f3 07       	cpc	r31, r19
     73a:	f8 f4       	brcc	.+62     	; 0x77a <udc_update_iface_desc+0x70>
     73c:	91 81       	ldd	r25, Z+1	; 0x01
     73e:	94 30       	cpi	r25, 0x04	; 4
     740:	61 f4       	brne	.+24     	; 0x75a <udc_update_iface_desc+0x50>
     742:	92 81       	ldd	r25, Z+2	; 0x02
     744:	98 13       	cpse	r25, r24
     746:	09 c0       	rjmp	.+18     	; 0x75a <udc_update_iface_desc+0x50>
     748:	93 81       	ldd	r25, Z+3	; 0x03
     74a:	96 13       	cpse	r25, r22
     74c:	06 c0       	rjmp	.+12     	; 0x75a <udc_update_iface_desc+0x50>
     74e:	e0 93 c2 21 	sts	0x21C2, r30
     752:	f0 93 c3 21 	sts	0x21C3, r31
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	08 95       	ret
     75a:	90 81       	ld	r25, Z
     75c:	e9 0f       	add	r30, r25
     75e:	f1 1d       	adc	r31, r1
     760:	e2 17       	cp	r30, r18
     762:	f3 07       	cpc	r31, r19
     764:	58 f3       	brcs	.-42     	; 0x73c <udc_update_iface_desc+0x32>
     766:	e0 93 c2 21 	sts	0x21C2, r30
     76a:	f0 93 c3 21 	sts	0x21C3, r31
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	08 95       	ret
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	08 95       	ret
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	08 95       	ret
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	08 95       	ret

0000077e <udc_iface_disable>:
     77e:	ff 92       	push	r15
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	c8 2f       	mov	r28, r24
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	be df       	rcall	.-132    	; 0x70a <udc_update_iface_desc>
     78e:	f8 2e       	mov	r15, r24
     790:	88 23       	and	r24, r24
     792:	81 f1       	breq	.+96     	; 0x7f4 <udc_iface_disable+0x76>
     794:	a0 91 c4 21 	lds	r26, 0x21C4
     798:	b0 91 c5 21 	lds	r27, 0x21C5
     79c:	ec 2f       	mov	r30, r28
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	12 96       	adiw	r26, 0x02	; 2
     7a6:	2d 91       	ld	r18, X+
     7a8:	3c 91       	ld	r19, X
     7aa:	13 97       	sbiw	r26, 0x03	; 3
     7ac:	e2 0f       	add	r30, r18
     7ae:	f3 1f       	adc	r31, r19
     7b0:	00 81       	ld	r16, Z
     7b2:	11 81       	ldd	r17, Z+1	; 0x01
     7b4:	d8 01       	movw	r26, r16
     7b6:	16 96       	adiw	r26, 0x06	; 6
     7b8:	ed 91       	ld	r30, X+
     7ba:	fc 91       	ld	r31, X
     7bc:	17 97       	sbiw	r26, 0x07	; 7
     7be:	09 95       	icall
     7c0:	68 2f       	mov	r22, r24
     7c2:	8c 2f       	mov	r24, r28
     7c4:	a2 df       	rcall	.-188    	; 0x70a <udc_update_iface_desc>
     7c6:	f8 2e       	mov	r15, r24
     7c8:	88 23       	and	r24, r24
     7ca:	a1 f0       	breq	.+40     	; 0x7f4 <udc_iface_disable+0x76>
     7cc:	c0 91 c2 21 	lds	r28, 0x21C2
     7d0:	d0 91 c3 21 	lds	r29, 0x21C3
     7d4:	65 e0       	ldi	r22, 0x05	; 5
     7d6:	ce 01       	movw	r24, r28
     7d8:	5d df       	rcall	.-326    	; 0x694 <udc_next_desc_in_iface>
     7da:	ec 01       	movw	r28, r24
     7dc:	00 97       	sbiw	r24, 0x00	; 0
     7de:	21 f0       	breq	.+8      	; 0x7e8 <udc_iface_disable+0x6a>
     7e0:	8a 81       	ldd	r24, Y+2	; 0x02
     7e2:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <udd_ep_free>
     7e6:	f6 cf       	rjmp	.-20     	; 0x7d4 <udc_iface_disable+0x56>
     7e8:	d8 01       	movw	r26, r16
     7ea:	12 96       	adiw	r26, 0x02	; 2
     7ec:	ed 91       	ld	r30, X+
     7ee:	fc 91       	ld	r31, X
     7f0:	13 97       	sbiw	r26, 0x03	; 3
     7f2:	09 95       	icall
     7f4:	8f 2d       	mov	r24, r15
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	08 95       	ret

00000802 <udc_iface_enable>:
     802:	1f 93       	push	r17
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	18 2f       	mov	r17, r24
     80a:	7f df       	rcall	.-258    	; 0x70a <udc_update_iface_desc>
     80c:	88 23       	and	r24, r24
     80e:	39 f1       	breq	.+78     	; 0x85e <udc_iface_enable+0x5c>
     810:	c0 91 c2 21 	lds	r28, 0x21C2
     814:	d0 91 c3 21 	lds	r29, 0x21C3
     818:	65 e0       	ldi	r22, 0x05	; 5
     81a:	ce 01       	movw	r24, r28
     81c:	3b df       	rcall	.-394    	; 0x694 <udc_next_desc_in_iface>
     81e:	ec 01       	movw	r28, r24
     820:	00 97       	sbiw	r24, 0x00	; 0
     822:	41 f0       	breq	.+16     	; 0x834 <udc_iface_enable+0x32>
     824:	4c 81       	ldd	r20, Y+4	; 0x04
     826:	5d 81       	ldd	r21, Y+5	; 0x05
     828:	6b 81       	ldd	r22, Y+3	; 0x03
     82a:	8a 81       	ldd	r24, Y+2	; 0x02
     82c:	bc d7       	rcall	.+3960   	; 0x17a6 <udd_ep_alloc>
     82e:	81 11       	cpse	r24, r1
     830:	f3 cf       	rjmp	.-26     	; 0x818 <udc_iface_enable+0x16>
     832:	15 c0       	rjmp	.+42     	; 0x85e <udc_iface_enable+0x5c>
     834:	a0 91 c4 21 	lds	r26, 0x21C4
     838:	b0 91 c5 21 	lds	r27, 0x21C5
     83c:	81 2f       	mov	r24, r17
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	12 96       	adiw	r26, 0x02	; 2
     846:	ed 91       	ld	r30, X+
     848:	fc 91       	ld	r31, X
     84a:	13 97       	sbiw	r26, 0x03	; 3
     84c:	e8 0f       	add	r30, r24
     84e:	f9 1f       	adc	r31, r25
     850:	01 90       	ld	r0, Z+
     852:	f0 81       	ld	r31, Z
     854:	e0 2d       	mov	r30, r0
     856:	01 90       	ld	r0, Z+
     858:	f0 81       	ld	r31, Z
     85a:	e0 2d       	mov	r30, r0
     85c:	09 95       	icall
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	08 95       	ret

00000866 <udc_reset>:
     866:	cf 93       	push	r28
     868:	80 91 c6 21 	lds	r24, 0x21C6
     86c:	88 23       	and	r24, r24
     86e:	c1 f0       	breq	.+48     	; 0x8a0 <udc_reset+0x3a>
     870:	e0 91 c4 21 	lds	r30, 0x21C4
     874:	f0 91 c5 21 	lds	r31, 0x21C5
     878:	01 90       	ld	r0, Z+
     87a:	f0 81       	ld	r31, Z
     87c:	e0 2d       	mov	r30, r0
     87e:	84 81       	ldd	r24, Z+4	; 0x04
     880:	88 23       	and	r24, r24
     882:	71 f0       	breq	.+28     	; 0x8a0 <udc_reset+0x3a>
     884:	c0 e0       	ldi	r28, 0x00	; 0
     886:	8c 2f       	mov	r24, r28
     888:	7a df       	rcall	.-268    	; 0x77e <udc_iface_disable>
     88a:	cf 5f       	subi	r28, 0xFF	; 255
     88c:	e0 91 c4 21 	lds	r30, 0x21C4
     890:	f0 91 c5 21 	lds	r31, 0x21C5
     894:	01 90       	ld	r0, Z+
     896:	f0 81       	ld	r31, Z
     898:	e0 2d       	mov	r30, r0
     89a:	84 81       	ldd	r24, Z+4	; 0x04
     89c:	c8 17       	cp	r28, r24
     89e:	98 f3       	brcs	.-26     	; 0x886 <udc_reset+0x20>
     8a0:	10 92 c6 21 	sts	0x21C6, r1
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	80 93 c7 21 	sts	0x21C7, r24
     8ac:	90 93 c8 21 	sts	0x21C8, r25
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     8b4:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     8b6:	80 91 c6 21 	lds	r24, 0x21C6
     8ba:	88 23       	and	r24, r24
     8bc:	41 f1       	breq	.+80     	; 0x90e <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     8be:	e0 91 c4 21 	lds	r30, 0x21C4
     8c2:	f0 91 c5 21 	lds	r31, 0x21C5
     8c6:	a0 81       	ld	r26, Z
     8c8:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     8ca:	14 96       	adiw	r26, 0x04	; 4
     8cc:	8c 91       	ld	r24, X
     8ce:	88 23       	and	r24, r24
     8d0:	f1 f0       	breq	.+60     	; 0x90e <udc_sof_notify+0x5a>
     8d2:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     8d4:	8c 2f       	mov	r24, r28
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	02 80       	ldd	r0, Z+2	; 0x02
     8de:	f3 81       	ldd	r31, Z+3	; 0x03
     8e0:	e0 2d       	mov	r30, r0
     8e2:	e8 0f       	add	r30, r24
     8e4:	f9 1f       	adc	r31, r25
     8e6:	01 90       	ld	r0, Z+
     8e8:	f0 81       	ld	r31, Z
     8ea:	e0 2d       	mov	r30, r0
     8ec:	00 84       	ldd	r0, Z+8	; 0x08
     8ee:	f1 85       	ldd	r31, Z+9	; 0x09
     8f0:	e0 2d       	mov	r30, r0
     8f2:	30 97       	sbiw	r30, 0x00	; 0
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     8f6:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     8f8:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     8fa:	e0 91 c4 21 	lds	r30, 0x21C4
     8fe:	f0 91 c5 21 	lds	r31, 0x21C5
     902:	a0 81       	ld	r26, Z
     904:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     906:	14 96       	adiw	r26, 0x04	; 4
     908:	8c 91       	ld	r24, X
     90a:	c8 17       	cp	r28, r24
     90c:	18 f3       	brcs	.-58     	; 0x8d4 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     91e:	10 92 01 23 	sts	0x2301, r1
     922:	10 92 02 23 	sts	0x2302, r1
	udd_g_ctrlreq.callback = NULL;
     926:	10 92 03 23 	sts	0x2303, r1
     92a:	10 92 04 23 	sts	0x2304, r1
	udd_g_ctrlreq.over_under_run = NULL;
     92e:	10 92 05 23 	sts	0x2305, r1
     932:	10 92 06 23 	sts	0x2306, r1

	if (Udd_setup_is_in()) {
     936:	20 91 f7 22 	lds	r18, 0x22F7
     93a:	22 23       	and	r18, r18
     93c:	0c f0       	brlt	.+2      	; 0x940 <udc_process_setup+0x2e>
     93e:	65 c2       	rjmp	.+1226   	; 0xe0a <udc_process_setup+0x4f8>
		if (udd_g_ctrlreq.req.wLength == 0) {
     940:	80 91 fd 22 	lds	r24, 0x22FD
     944:	90 91 fe 22 	lds	r25, 0x22FE
     948:	00 97       	sbiw	r24, 0x00	; 0
     94a:	09 f0       	breq	.+2      	; 0x94e <udc_process_setup+0x3c>
     94c:	63 c2       	rjmp	.+1222   	; 0xe14 <udc_process_setup+0x502>
     94e:	59 c2       	rjmp	.+1202   	; 0xe02 <udc_process_setup+0x4f0>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     950:	2f 71       	andi	r18, 0x1F	; 31
     952:	09 f0       	breq	.+2      	; 0x956 <udc_process_setup+0x44>
     954:	8b c0       	rjmp	.+278    	; 0xa6c <udc_process_setup+0x15a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     956:	30 91 f8 22 	lds	r19, 0x22F8
     95a:	36 30       	cpi	r19, 0x06	; 6
     95c:	81 f0       	breq	.+32     	; 0x97e <udc_process_setup+0x6c>
     95e:	38 30       	cpi	r19, 0x08	; 8
     960:	09 f4       	brne	.+2      	; 0x964 <udc_process_setup+0x52>
     962:	79 c0       	rjmp	.+242    	; 0xa56 <udc_process_setup+0x144>
     964:	31 11       	cpse	r19, r1
     966:	82 c0       	rjmp	.+260    	; 0xa6c <udc_process_setup+0x15a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     968:	02 97       	sbiw	r24, 0x02	; 2
     96a:	39 f4       	brne	.+14     	; 0x97a <udc_process_setup+0x68>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     96c:	62 e0       	ldi	r22, 0x02	; 2
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	87 ec       	ldi	r24, 0xC7	; 199
     972:	91 e2       	ldi	r25, 0x21	; 33
     974:	0f d7       	rcall	.+3614   	; 0x1794 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     976:	01 e0       	ldi	r16, 0x01	; 1
     978:	c7 c1       	rjmp	.+910    	; 0xd08 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     97a:	00 e0       	ldi	r16, 0x00	; 0
     97c:	c5 c1       	rjmp	.+906    	; 0xd08 <udc_process_setup+0x3f6>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     97e:	20 91 f9 22 	lds	r18, 0x22F9
     982:	30 91 fa 22 	lds	r19, 0x22FA

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     986:	83 2f       	mov	r24, r19
     988:	99 27       	eor	r25, r25
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	91 05       	cpc	r25, r1
     98e:	99 f0       	breq	.+38     	; 0x9b6 <udc_process_setup+0xa4>
     990:	1c f4       	brge	.+6      	; 0x998 <udc_process_setup+0x86>
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	39 f0       	breq	.+14     	; 0x9a4 <udc_process_setup+0x92>
     996:	55 c0       	rjmp	.+170    	; 0xa42 <udc_process_setup+0x130>
     998:	83 30       	cpi	r24, 0x03	; 3
     99a:	91 05       	cpc	r25, r1
     99c:	d1 f1       	breq	.+116    	; 0xa12 <udc_process_setup+0x100>
     99e:	0f 97       	sbiw	r24, 0x0f	; 15
     9a0:	59 f1       	breq	.+86     	; 0x9f8 <udc_process_setup+0xe6>
     9a2:	4f c0       	rjmp	.+158    	; 0xa42 <udc_process_setup+0x130>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     9a4:	80 91 18 20 	lds	r24, 0x2018
     9a8:	90 91 19 20 	lds	r25, 0x2019
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     9ac:	dc 01       	movw	r26, r24
     9ae:	6c 91       	ld	r22, X
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	f0 d6       	rcall	.+3552   	; 0x1794 <udd_set_setup_payload>
     9b4:	35 c0       	rjmp	.+106    	; 0xa20 <udc_process_setup+0x10e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     9b6:	e0 91 18 20 	lds	r30, 0x2018
     9ba:	f0 91 19 20 	lds	r31, 0x2019
     9be:	81 89       	ldd	r24, Z+17	; 0x11
     9c0:	28 17       	cp	r18, r24
     9c2:	08 f0       	brcs	.+2      	; 0x9c6 <udc_process_setup+0xb4>
     9c4:	40 c0       	rjmp	.+128    	; 0xa46 <udc_process_setup+0x134>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     9c6:	c9 01       	movw	r24, r18
     9c8:	99 27       	eor	r25, r25
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	e0 91 1a 20 	lds	r30, 0x201A
     9d6:	f0 91 1b 20 	lds	r31, 0x201B
     9da:	e8 0f       	add	r30, r24
     9dc:	f9 1f       	adc	r31, r25
     9de:	80 81       	ld	r24, Z
     9e0:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     9e2:	fc 01       	movw	r30, r24
     9e4:	62 81       	ldd	r22, Z+2	; 0x02
     9e6:	73 81       	ldd	r23, Z+3	; 0x03
     9e8:	d5 d6       	rcall	.+3498   	; 0x1794 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     9ea:	e0 91 ff 22 	lds	r30, 0x22FF
     9ee:	f0 91 00 23 	lds	r31, 0x2300
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	81 83       	std	Z+1, r24	; 0x01
     9f6:	14 c0       	rjmp	.+40     	; 0xa20 <udc_process_setup+0x10e>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     9f8:	80 91 1c 20 	lds	r24, 0x201C
     9fc:	90 91 1d 20 	lds	r25, 0x201D
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	19 f1       	breq	.+70     	; 0xa4a <udc_process_setup+0x138>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     a04:	dc 01       	movw	r26, r24
     a06:	12 96       	adiw	r26, 0x02	; 2
     a08:	6d 91       	ld	r22, X+
     a0a:	7c 91       	ld	r23, X
     a0c:	13 97       	sbiw	r26, 0x03	; 3
     a0e:	c2 d6       	rcall	.+3460   	; 0x1794 <udd_set_setup_payload>
     a10:	07 c0       	rjmp	.+14     	; 0xa20 <udc_process_setup+0x10e>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     a12:	21 11       	cpse	r18, r1
     a14:	1c c0       	rjmp	.+56     	; 0xa4e <udc_process_setup+0x13c>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     a16:	64 e0       	ldi	r22, 0x04	; 4
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	84 e1       	ldi	r24, 0x14	; 20
     a1c:	90 e2       	ldi	r25, 0x20	; 32
     a1e:	ba d6       	rcall	.+3444   	; 0x1794 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     a20:	80 91 fd 22 	lds	r24, 0x22FD
     a24:	90 91 fe 22 	lds	r25, 0x22FE
     a28:	20 91 01 23 	lds	r18, 0x2301
     a2c:	30 91 02 23 	lds	r19, 0x2302
     a30:	82 17       	cp	r24, r18
     a32:	93 07       	cpc	r25, r19
     a34:	70 f4       	brcc	.+28     	; 0xa52 <udc_process_setup+0x140>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     a36:	80 93 01 23 	sts	0x2301, r24
     a3a:	90 93 02 23 	sts	0x2302, r25
	}
	return true;
     a3e:	01 e0       	ldi	r16, 0x01	; 1
     a40:	63 c1       	rjmp	.+710    	; 0xd08 <udc_process_setup+0x3f6>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     a42:	00 e0       	ldi	r16, 0x00	; 0
     a44:	61 c1       	rjmp	.+706    	; 0xd08 <udc_process_setup+0x3f6>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     a46:	00 e0       	ldi	r16, 0x00	; 0
     a48:	5f c1       	rjmp	.+702    	; 0xd08 <udc_process_setup+0x3f6>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     a4a:	00 e0       	ldi	r16, 0x00	; 0
     a4c:	5d c1       	rjmp	.+698    	; 0xd08 <udc_process_setup+0x3f6>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     a4e:	00 e0       	ldi	r16, 0x00	; 0
     a50:	5b c1       	rjmp	.+694    	; 0xd08 <udc_process_setup+0x3f6>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     a52:	01 e0       	ldi	r16, 0x01	; 1
     a54:	59 c1       	rjmp	.+690    	; 0xd08 <udc_process_setup+0x3f6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	39 f4       	brne	.+14     	; 0xa68 <udc_process_setup+0x156>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	86 ec       	ldi	r24, 0xC6	; 198
     a60:	91 e2       	ldi	r25, 0x21	; 33
     a62:	98 d6       	rcall	.+3376   	; 0x1794 <udd_set_setup_payload>
	return true;
     a64:	01 e0       	ldi	r16, 0x01	; 1
     a66:	50 c1       	rjmp	.+672    	; 0xd08 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     a68:	00 e0       	ldi	r16, 0x00	; 0
     a6a:	4e c1       	rjmp	.+668    	; 0xd08 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     a6c:	21 30       	cpi	r18, 0x01	; 1
     a6e:	09 f0       	breq	.+2      	; 0xa72 <udc_process_setup+0x160>
     a70:	3f c0       	rjmp	.+126    	; 0xaf0 <udc_process_setup+0x1de>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     a72:	30 91 f8 22 	lds	r19, 0x22F8
     a76:	3a 30       	cpi	r19, 0x0A	; 10
     a78:	d9 f5       	brne	.+118    	; 0xaf0 <udc_process_setup+0x1de>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	99 f5       	brne	.+102    	; 0xae4 <udc_process_setup+0x1d2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     a7e:	80 91 c6 21 	lds	r24, 0x21C6
     a82:	88 23       	and	r24, r24
     a84:	89 f1       	breq	.+98     	; 0xae8 <udc_process_setup+0x1d6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     a86:	c0 91 fb 22 	lds	r28, 0x22FB
     a8a:	d0 91 fc 22 	lds	r29, 0x22FC
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     a8e:	e0 90 c4 21 	lds	r14, 0x21C4
     a92:	f0 90 c5 21 	lds	r15, 0x21C5
     a96:	d7 01       	movw	r26, r14
     a98:	ed 91       	ld	r30, X+
     a9a:	fc 91       	ld	r31, X
     a9c:	84 81       	ldd	r24, Z+4	; 0x04
     a9e:	c8 17       	cp	r28, r24
     aa0:	28 f5       	brcc	.+74     	; 0xaec <udc_process_setup+0x1da>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	8c 2f       	mov	r24, r28
     aa6:	31 de       	rcall	.-926    	; 0x70a <udc_update_iface_desc>
     aa8:	08 2f       	mov	r16, r24
     aaa:	88 23       	and	r24, r24
     aac:	09 f4       	brne	.+2      	; 0xab0 <udc_process_setup+0x19e>
     aae:	2c c1       	rjmp	.+600    	; 0xd08 <udc_process_setup+0x3f6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     ab0:	ce 01       	movw	r24, r28
     ab2:	99 27       	eor	r25, r25
     ab4:	88 0f       	add	r24, r24
     ab6:	99 1f       	adc	r25, r25
     ab8:	d7 01       	movw	r26, r14
     aba:	12 96       	adiw	r26, 0x02	; 2
     abc:	ed 91       	ld	r30, X+
     abe:	fc 91       	ld	r31, X
     ac0:	13 97       	sbiw	r26, 0x03	; 3
     ac2:	e8 0f       	add	r30, r24
     ac4:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     ac6:	01 90       	ld	r0, Z+
     ac8:	f0 81       	ld	r31, Z
     aca:	e0 2d       	mov	r30, r0
     acc:	06 80       	ldd	r0, Z+6	; 0x06
     ace:	f7 81       	ldd	r31, Z+7	; 0x07
     ad0:	e0 2d       	mov	r30, r0
     ad2:	09 95       	icall
     ad4:	80 93 c1 21 	sts	0x21C1, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     ad8:	61 e0       	ldi	r22, 0x01	; 1
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	81 ec       	ldi	r24, 0xC1	; 193
     ade:	91 e2       	ldi	r25, 0x21	; 33
     ae0:	59 d6       	rcall	.+3250   	; 0x1794 <udd_set_setup_payload>
     ae2:	12 c1       	rjmp	.+548    	; 0xd08 <udc_process_setup+0x3f6>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     ae4:	00 e0       	ldi	r16, 0x00	; 0
     ae6:	10 c1       	rjmp	.+544    	; 0xd08 <udc_process_setup+0x3f6>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     ae8:	00 e0       	ldi	r16, 0x00	; 0
     aea:	0e c1       	rjmp	.+540    	; 0xd08 <udc_process_setup+0x3f6>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     aec:	00 e0       	ldi	r16, 0x00	; 0
     aee:	0c c1       	rjmp	.+536    	; 0xd08 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     af0:	22 30       	cpi	r18, 0x02	; 2
     af2:	09 f0       	breq	.+2      	; 0xaf6 <udc_process_setup+0x1e4>
     af4:	0b c1       	rjmp	.+534    	; 0xd0c <udc_process_setup+0x3fa>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     af6:	20 91 f8 22 	lds	r18, 0x22F8
     afa:	21 11       	cpse	r18, r1
     afc:	00 c1       	rjmp	.+512    	; 0xcfe <udc_process_setup+0x3ec>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     afe:	02 97       	sbiw	r24, 0x02	; 2
     b00:	79 f4       	brne	.+30     	; 0xb20 <udc_process_setup+0x20e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     b02:	80 91 fb 22 	lds	r24, 0x22FB
     b06:	b0 d6       	rcall	.+3424   	; 0x1868 <udd_ep_is_halted>
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	80 93 bf 21 	sts	0x21BF, r24
     b0e:	90 93 c0 21 	sts	0x21C0, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     b12:	62 e0       	ldi	r22, 0x02	; 2
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	8f eb       	ldi	r24, 0xBF	; 191
     b18:	91 e2       	ldi	r25, 0x21	; 33
     b1a:	3c d6       	rcall	.+3192   	; 0x1794 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     b1c:	01 e0       	ldi	r16, 0x01	; 1
     b1e:	f4 c0       	rjmp	.+488    	; 0xd08 <udc_process_setup+0x3f6>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     b20:	00 e0       	ldi	r16, 0x00	; 0
     b22:	f2 c0       	rjmp	.+484    	; 0xd08 <udc_process_setup+0x3f6>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     b24:	2f 71       	andi	r18, 0x1F	; 31
     b26:	09 f0       	breq	.+2      	; 0xb2a <udc_process_setup+0x218>
     b28:	90 c0       	rjmp	.+288    	; 0xc4a <udc_process_setup+0x338>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     b2a:	80 91 f8 22 	lds	r24, 0x22F8
     b2e:	83 30       	cpi	r24, 0x03	; 3
     b30:	09 f4       	brne	.+2      	; 0xb34 <udc_process_setup+0x222>
     b32:	e7 c0       	rjmp	.+462    	; 0xd02 <udc_process_setup+0x3f0>
     b34:	18 f4       	brcc	.+6      	; 0xb3c <udc_process_setup+0x22a>
     b36:	81 30       	cpi	r24, 0x01	; 1
     b38:	b1 f0       	breq	.+44     	; 0xb66 <udc_process_setup+0x254>
     b3a:	87 c0       	rjmp	.+270    	; 0xc4a <udc_process_setup+0x338>
     b3c:	85 30       	cpi	r24, 0x05	; 5
     b3e:	19 f0       	breq	.+6      	; 0xb46 <udc_process_setup+0x234>
     b40:	89 30       	cpi	r24, 0x09	; 9
     b42:	61 f1       	breq	.+88     	; 0xb9c <udc_process_setup+0x28a>
     b44:	82 c0       	rjmp	.+260    	; 0xc4a <udc_process_setup+0x338>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     b46:	80 91 fd 22 	lds	r24, 0x22FD
     b4a:	90 91 fe 22 	lds	r25, 0x22FE
     b4e:	89 2b       	or	r24, r25
     b50:	41 f4       	brne	.+16     	; 0xb62 <udc_process_setup+0x250>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     b52:	8f e7       	ldi	r24, 0x7F	; 127
     b54:	93 e0       	ldi	r25, 0x03	; 3
     b56:	80 93 03 23 	sts	0x2303, r24
     b5a:	90 93 04 23 	sts	0x2304, r25
	return true;
     b5e:	01 e0       	ldi	r16, 0x01	; 1
     b60:	d3 c0       	rjmp	.+422    	; 0xd08 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     b62:	00 e0       	ldi	r16, 0x00	; 0
     b64:	d1 c0       	rjmp	.+418    	; 0xd08 <udc_process_setup+0x3f6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     b66:	80 91 fd 22 	lds	r24, 0x22FD
     b6a:	90 91 fe 22 	lds	r25, 0x22FE
     b6e:	89 2b       	or	r24, r25
     b70:	89 f4       	brne	.+34     	; 0xb94 <udc_process_setup+0x282>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     b72:	80 91 f9 22 	lds	r24, 0x22F9
     b76:	90 91 fa 22 	lds	r25, 0x22FA
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	69 f4       	brne	.+26     	; 0xb98 <udc_process_setup+0x286>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     b7e:	80 91 c7 21 	lds	r24, 0x21C7
     b82:	90 91 c8 21 	lds	r25, 0x21C8
     b86:	8d 7f       	andi	r24, 0xFD	; 253
     b88:	80 93 c7 21 	sts	0x21C7, r24
     b8c:	90 93 c8 21 	sts	0x21C8, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     b90:	01 e0       	ldi	r16, 0x01	; 1
     b92:	ba c0       	rjmp	.+372    	; 0xd08 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     b94:	00 e0       	ldi	r16, 0x00	; 0
     b96:	b8 c0       	rjmp	.+368    	; 0xd08 <udc_process_setup+0x3f6>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     b98:	00 e0       	ldi	r16, 0x00	; 0
     b9a:	b6 c0       	rjmp	.+364    	; 0xd08 <udc_process_setup+0x3f6>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     b9c:	80 91 fd 22 	lds	r24, 0x22FD
     ba0:	90 91 fe 22 	lds	r25, 0x22FE
     ba4:	89 2b       	or	r24, r25
     ba6:	09 f0       	breq	.+2      	; 0xbaa <udc_process_setup+0x298>
     ba8:	46 c0       	rjmp	.+140    	; 0xc36 <udc_process_setup+0x324>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     baa:	e9 d5       	rcall	.+3026   	; 0x177e <udd_getaddress>
     bac:	88 23       	and	r24, r24
     bae:	09 f4       	brne	.+2      	; 0xbb2 <udc_process_setup+0x2a0>
     bb0:	44 c0       	rjmp	.+136    	; 0xc3a <udc_process_setup+0x328>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     bb2:	20 91 f9 22 	lds	r18, 0x22F9
     bb6:	30 91 fa 22 	lds	r19, 0x22FA
     bba:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     bbc:	e0 91 18 20 	lds	r30, 0x2018
     bc0:	f0 91 19 20 	lds	r31, 0x2019
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     bc4:	81 89       	ldd	r24, Z+17	; 0x11
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	82 17       	cp	r24, r18
     bca:	93 07       	cpc	r25, r19
     bcc:	c0 f1       	brcs	.+112    	; 0xc3e <udc_process_setup+0x32c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     bce:	4b de       	rcall	.-874    	; 0x866 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     bd0:	80 91 f9 22 	lds	r24, 0x22F9
     bd4:	90 91 fa 22 	lds	r25, 0x22FA
     bd8:	80 93 c6 21 	sts	0x21C6, r24
	if (udc_num_configuration == 0) {
     bdc:	88 23       	and	r24, r24
     bde:	89 f1       	breq	.+98     	; 0xc42 <udc_process_setup+0x330>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     be0:	99 27       	eor	r25, r25
     be2:	81 50       	subi	r24, 0x01	; 1
     be4:	90 4c       	sbci	r25, 0xC0	; 192
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	e0 91 1a 20 	lds	r30, 0x201A
     bf2:	f0 91 1b 20 	lds	r31, 0x201B
     bf6:	e8 0f       	add	r30, r24
     bf8:	f9 1f       	adc	r31, r25
     bfa:	e0 93 c4 21 	sts	0x21C4, r30
     bfe:	f0 93 c5 21 	sts	0x21C5, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c02:	01 90       	ld	r0, Z+
     c04:	f0 81       	ld	r31, Z
     c06:	e0 2d       	mov	r30, r0
     c08:	84 81       	ldd	r24, Z+4	; 0x04
     c0a:	88 23       	and	r24, r24
     c0c:	e1 f0       	breq	.+56     	; 0xc46 <udc_process_setup+0x334>
     c0e:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	8c 2f       	mov	r24, r28
     c14:	f6 dd       	rcall	.-1044   	; 0x802 <udc_iface_enable>
     c16:	08 2f       	mov	r16, r24
     c18:	88 23       	and	r24, r24
     c1a:	09 f4       	brne	.+2      	; 0xc1e <udc_process_setup+0x30c>
     c1c:	75 c0       	rjmp	.+234    	; 0xd08 <udc_process_setup+0x3f6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     c1e:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c20:	e0 91 c4 21 	lds	r30, 0x21C4
     c24:	f0 91 c5 21 	lds	r31, 0x21C5
     c28:	01 90       	ld	r0, Z+
     c2a:	f0 81       	ld	r31, Z
     c2c:	e0 2d       	mov	r30, r0
     c2e:	84 81       	ldd	r24, Z+4	; 0x04
     c30:	c8 17       	cp	r28, r24
     c32:	70 f3       	brcs	.-36     	; 0xc10 <udc_process_setup+0x2fe>
     c34:	69 c0       	rjmp	.+210    	; 0xd08 <udc_process_setup+0x3f6>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     c36:	00 e0       	ldi	r16, 0x00	; 0
     c38:	67 c0       	rjmp	.+206    	; 0xd08 <udc_process_setup+0x3f6>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     c3a:	00 e0       	ldi	r16, 0x00	; 0
     c3c:	65 c0       	rjmp	.+202    	; 0xd08 <udc_process_setup+0x3f6>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     c3e:	00 e0       	ldi	r16, 0x00	; 0
     c40:	63 c0       	rjmp	.+198    	; 0xd08 <udc_process_setup+0x3f6>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     c42:	01 e0       	ldi	r16, 0x01	; 1
     c44:	61 c0       	rjmp	.+194    	; 0xd08 <udc_process_setup+0x3f6>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     c46:	01 e0       	ldi	r16, 0x01	; 1
     c48:	5f c0       	rjmp	.+190    	; 0xd08 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     c4a:	21 30       	cpi	r18, 0x01	; 1
     c4c:	09 f5       	brne	.+66     	; 0xc90 <udc_process_setup+0x37e>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     c4e:	80 91 f8 22 	lds	r24, 0x22F8
     c52:	8b 30       	cpi	r24, 0x0B	; 11
     c54:	e9 f4       	brne	.+58     	; 0xc90 <udc_process_setup+0x37e>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     c56:	80 91 fd 22 	lds	r24, 0x22FD
     c5a:	90 91 fe 22 	lds	r25, 0x22FE
     c5e:	89 2b       	or	r24, r25
     c60:	99 f4       	brne	.+38     	; 0xc88 <udc_process_setup+0x376>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     c62:	80 91 c6 21 	lds	r24, 0x21C6
     c66:	88 23       	and	r24, r24
     c68:	89 f0       	breq	.+34     	; 0xc8c <udc_process_setup+0x37a>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     c6a:	c0 91 fb 22 	lds	r28, 0x22FB
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     c6e:	d0 91 f9 22 	lds	r29, 0x22F9

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     c72:	8c 2f       	mov	r24, r28
     c74:	84 dd       	rcall	.-1272   	; 0x77e <udc_iface_disable>
     c76:	08 2f       	mov	r16, r24
     c78:	88 23       	and	r24, r24
     c7a:	09 f4       	brne	.+2      	; 0xc7e <udc_process_setup+0x36c>
     c7c:	45 c0       	rjmp	.+138    	; 0xd08 <udc_process_setup+0x3f6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     c7e:	6d 2f       	mov	r22, r29
     c80:	8c 2f       	mov	r24, r28
     c82:	bf dd       	rcall	.-1154   	; 0x802 <udc_iface_enable>
     c84:	08 2f       	mov	r16, r24
     c86:	40 c0       	rjmp	.+128    	; 0xd08 <udc_process_setup+0x3f6>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     c88:	00 e0       	ldi	r16, 0x00	; 0
     c8a:	3e c0       	rjmp	.+124    	; 0xd08 <udc_process_setup+0x3f6>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     c8c:	00 e0       	ldi	r16, 0x00	; 0
     c8e:	3c c0       	rjmp	.+120    	; 0xd08 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     c90:	22 30       	cpi	r18, 0x02	; 2
     c92:	09 f0       	breq	.+2      	; 0xc96 <udc_process_setup+0x384>
     c94:	3b c0       	rjmp	.+118    	; 0xd0c <udc_process_setup+0x3fa>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     c96:	80 91 f8 22 	lds	r24, 0x22F8
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	19 f0       	breq	.+6      	; 0xca4 <udc_process_setup+0x392>
     c9e:	83 30       	cpi	r24, 0x03	; 3
     ca0:	b1 f0       	breq	.+44     	; 0xcce <udc_process_setup+0x3bc>
     ca2:	31 c0       	rjmp	.+98     	; 0xd06 <udc_process_setup+0x3f4>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     ca4:	80 91 fd 22 	lds	r24, 0x22FD
     ca8:	90 91 fe 22 	lds	r25, 0x22FE
     cac:	89 2b       	or	r24, r25
     cae:	59 f4       	brne	.+22     	; 0xcc6 <udc_process_setup+0x3b4>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     cb0:	80 91 f9 22 	lds	r24, 0x22F9
     cb4:	90 91 fa 22 	lds	r25, 0x22FA
     cb8:	89 2b       	or	r24, r25
     cba:	39 f4       	brne	.+14     	; 0xcca <udc_process_setup+0x3b8>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     cbc:	80 91 fb 22 	lds	r24, 0x22FB
     cc0:	ee d5       	rcall	.+3036   	; 0x189e <udd_ep_clear_halt>
     cc2:	08 2f       	mov	r16, r24
     cc4:	21 c0       	rjmp	.+66     	; 0xd08 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     cc6:	00 e0       	ldi	r16, 0x00	; 0
     cc8:	1f c0       	rjmp	.+62     	; 0xd08 <udc_process_setup+0x3f6>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     cca:	00 e0       	ldi	r16, 0x00	; 0
     ccc:	1d c0       	rjmp	.+58     	; 0xd08 <udc_process_setup+0x3f6>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     cce:	80 91 fd 22 	lds	r24, 0x22FD
     cd2:	90 91 fe 22 	lds	r25, 0x22FE
     cd6:	89 2b       	or	r24, r25
     cd8:	71 f4       	brne	.+28     	; 0xcf6 <udc_process_setup+0x3e4>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     cda:	80 91 f9 22 	lds	r24, 0x22F9
     cde:	90 91 fa 22 	lds	r25, 0x22FA
     ce2:	89 2b       	or	r24, r25
     ce4:	51 f4       	brne	.+20     	; 0xcfa <udc_process_setup+0x3e8>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     ce6:	cb ef       	ldi	r28, 0xFB	; 251
     ce8:	d2 e2       	ldi	r29, 0x22	; 34
     cea:	88 81       	ld	r24, Y
     cec:	89 d6       	rcall	.+3346   	; 0x1a00 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     cee:	88 81       	ld	r24, Y
     cf0:	dd d6       	rcall	.+3514   	; 0x1aac <udd_ep_set_halt>
     cf2:	08 2f       	mov	r16, r24
     cf4:	09 c0       	rjmp	.+18     	; 0xd08 <udc_process_setup+0x3f6>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     cf6:	00 e0       	ldi	r16, 0x00	; 0
     cf8:	07 c0       	rjmp	.+14     	; 0xd08 <udc_process_setup+0x3f6>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     cfa:	00 e0       	ldi	r16, 0x00	; 0
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <udc_process_setup+0x3f6>
				break;
			}
		}
#endif
	}
	return false;
     cfe:	00 e0       	ldi	r16, 0x00	; 0
     d00:	03 c0       	rjmp	.+6      	; 0xd08 <udc_process_setup+0x3f6>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     d02:	00 e0       	ldi	r16, 0x00	; 0
     d04:	01 c0       	rjmp	.+2      	; 0xd08 <udc_process_setup+0x3f6>
				break;
			}
		}
#endif
	}
	return false;
     d06:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     d08:	01 11       	cpse	r16, r1
     d0a:	89 c0       	rjmp	.+274    	; 0xe1e <udc_process_setup+0x50c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     d0c:	80 91 f7 22 	lds	r24, 0x22F7
     d10:	8f 71       	andi	r24, 0x1F	; 31
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	c1 f5       	brne	.+112    	; 0xd86 <udc_process_setup+0x474>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     d16:	80 91 c6 21 	lds	r24, 0x21C6
     d1a:	88 23       	and	r24, r24
     d1c:	a1 f1       	breq	.+104    	; 0xd86 <udc_process_setup+0x474>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     d1e:	c0 91 fb 22 	lds	r28, 0x22FB
     d22:	d0 91 fc 22 	lds	r29, 0x22FC
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     d26:	00 91 c4 21 	lds	r16, 0x21C4
     d2a:	10 91 c5 21 	lds	r17, 0x21C5
     d2e:	d8 01       	movw	r26, r16
     d30:	ed 91       	ld	r30, X+
     d32:	fc 91       	ld	r31, X
     d34:	84 81       	ldd	r24, Z+4	; 0x04
     d36:	c8 17       	cp	r28, r24
     d38:	30 f5       	brcc	.+76     	; 0xd86 <udc_process_setup+0x474>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	8c 2f       	mov	r24, r28
     d3e:	e5 dc       	rcall	.-1590   	; 0x70a <udc_update_iface_desc>
     d40:	88 23       	and	r24, r24
     d42:	09 f1       	breq	.+66     	; 0xd86 <udc_process_setup+0x474>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     d44:	ce 01       	movw	r24, r28
     d46:	99 27       	eor	r25, r25
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	d8 01       	movw	r26, r16
     d4e:	12 96       	adiw	r26, 0x02	; 2
     d50:	ed 91       	ld	r30, X+
     d52:	fc 91       	ld	r31, X
     d54:	13 97       	sbiw	r26, 0x03	; 3
     d56:	e8 0f       	add	r30, r24
     d58:	f9 1f       	adc	r31, r25
     d5a:	00 81       	ld	r16, Z
     d5c:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     d5e:	d8 01       	movw	r26, r16
     d60:	16 96       	adiw	r26, 0x06	; 6
     d62:	ed 91       	ld	r30, X+
     d64:	fc 91       	ld	r31, X
     d66:	17 97       	sbiw	r26, 0x07	; 7
     d68:	09 95       	icall
     d6a:	68 2f       	mov	r22, r24
     d6c:	8c 2f       	mov	r24, r28
     d6e:	cd dc       	rcall	.-1638   	; 0x70a <udc_update_iface_desc>
     d70:	88 23       	and	r24, r24
     d72:	49 f0       	breq	.+18     	; 0xd86 <udc_process_setup+0x474>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     d74:	d8 01       	movw	r26, r16
     d76:	14 96       	adiw	r26, 0x04	; 4
     d78:	ed 91       	ld	r30, X+
     d7a:	fc 91       	ld	r31, X
     d7c:	15 97       	sbiw	r26, 0x05	; 5
     d7e:	09 95       	icall
     d80:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     d82:	81 11       	cpse	r24, r1
     d84:	4c c0       	rjmp	.+152    	; 0xe1e <udc_process_setup+0x50c>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     d86:	80 91 f7 22 	lds	r24, 0x22F7
     d8a:	8f 71       	andi	r24, 0x1F	; 31
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	d9 f5       	brne	.+118    	; 0xe06 <udc_process_setup+0x4f4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     d90:	80 91 c6 21 	lds	r24, 0x21C6
     d94:	88 23       	and	r24, r24
     d96:	89 f1       	breq	.+98     	; 0xdfa <udc_process_setup+0x4e8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d98:	e0 91 c4 21 	lds	r30, 0x21C4
     d9c:	f0 91 c5 21 	lds	r31, 0x21C5
     da0:	a0 81       	ld	r26, Z
     da2:	b1 81       	ldd	r27, Z+1	; 0x01
     da4:	14 96       	adiw	r26, 0x04	; 4
     da6:	8c 91       	ld	r24, X
     da8:	88 23       	and	r24, r24
     daa:	49 f1       	breq	.+82     	; 0xdfe <udc_process_setup+0x4ec>
     dac:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     dae:	21 2f       	mov	r18, r17
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	02 80       	ldd	r0, Z+2	; 0x02
     db8:	f3 81       	ldd	r31, Z+3	; 0x03
     dba:	e0 2d       	mov	r30, r0
     dbc:	e2 0f       	add	r30, r18
     dbe:	f3 1f       	adc	r31, r19
     dc0:	c0 81       	ld	r28, Z
     dc2:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     dc4:	ee 81       	ldd	r30, Y+6	; 0x06
     dc6:	ff 81       	ldd	r31, Y+7	; 0x07
     dc8:	09 95       	icall
     dca:	68 2f       	mov	r22, r24
     dcc:	81 2f       	mov	r24, r17
     dce:	9d dc       	rcall	.-1734   	; 0x70a <udc_update_iface_desc>
     dd0:	08 2f       	mov	r16, r24
     dd2:	88 23       	and	r24, r24
     dd4:	21 f1       	breq	.+72     	; 0xe1e <udc_process_setup+0x50c>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     dd6:	ec 81       	ldd	r30, Y+4	; 0x04
     dd8:	fd 81       	ldd	r31, Y+5	; 0x05
     dda:	09 95       	icall
     ddc:	08 2f       	mov	r16, r24
     dde:	81 11       	cpse	r24, r1
     de0:	1e c0       	rjmp	.+60     	; 0xe1e <udc_process_setup+0x50c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     de2:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     de4:	e0 91 c4 21 	lds	r30, 0x21C4
     de8:	f0 91 c5 21 	lds	r31, 0x21C5
     dec:	a0 81       	ld	r26, Z
     dee:	b1 81       	ldd	r27, Z+1	; 0x01
     df0:	14 96       	adiw	r26, 0x04	; 4
     df2:	8c 91       	ld	r24, X
     df4:	18 17       	cp	r17, r24
     df6:	d8 f2       	brcs	.-74     	; 0xdae <udc_process_setup+0x49c>
     df8:	12 c0       	rjmp	.+36     	; 0xe1e <udc_process_setup+0x50c>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     dfa:	00 e0       	ldi	r16, 0x00	; 0
     dfc:	10 c0       	rjmp	.+32     	; 0xe1e <udc_process_setup+0x50c>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     dfe:	00 e0       	ldi	r16, 0x00	; 0
     e00:	0e c0       	rjmp	.+28     	; 0xe1e <udc_process_setup+0x50c>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
     e02:	00 e0       	ldi	r16, 0x00	; 0
     e04:	0c c0       	rjmp	.+24     	; 0xe1e <udc_process_setup+0x50c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     e06:	00 e0       	ldi	r16, 0x00	; 0
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <udc_process_setup+0x50c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     e0a:	82 2f       	mov	r24, r18
     e0c:	80 76       	andi	r24, 0x60	; 96
     e0e:	09 f0       	breq	.+2      	; 0xe12 <udc_process_setup+0x500>
     e10:	7d cf       	rjmp	.-262    	; 0xd0c <udc_process_setup+0x3fa>
     e12:	88 ce       	rjmp	.-752    	; 0xb24 <udc_process_setup+0x212>
     e14:	32 2f       	mov	r19, r18
     e16:	30 76       	andi	r19, 0x60	; 96
     e18:	09 f0       	breq	.+2      	; 0xe1c <udc_process_setup+0x50a>
     e1a:	78 cf       	rjmp	.-272    	; 0xd0c <udc_process_setup+0x3fa>
     e1c:	99 cd       	rjmp	.-1230   	; 0x950 <udc_process_setup+0x3e>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     e1e:	80 2f       	mov	r24, r16
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	ff 90       	pop	r15
     e2a:	ef 90       	pop	r14
     e2c:	08 95       	ret

00000e2e <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     e2e:	fc 01       	movw	r30, r24
     e30:	81 81       	ldd	r24, Z+1	; 0x01
     e32:	85 ff       	sbrs	r24, 5
     e34:	fd cf       	rjmp	.-6      	; 0xe30 <usart_putchar+0x2>
     e36:	60 83       	st	Z, r22
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	08 95       	ret

00000e3e <usart_getchar>:
     e3e:	fc 01       	movw	r30, r24
     e40:	81 81       	ldd	r24, Z+1	; 0x01
     e42:	88 23       	and	r24, r24
     e44:	ec f7       	brge	.-6      	; 0xe40 <usart_getchar+0x2>
     e46:	80 81       	ld	r24, Z
     e48:	08 95       	ret

00000e4a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     e4a:	4f 92       	push	r4
     e4c:	5f 92       	push	r5
     e4e:	6f 92       	push	r6
     e50:	7f 92       	push	r7
     e52:	8f 92       	push	r8
     e54:	9f 92       	push	r9
     e56:	af 92       	push	r10
     e58:	bf 92       	push	r11
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	ec 01       	movw	r28, r24
     e6c:	4a 01       	movw	r8, r20
     e6e:	5b 01       	movw	r10, r22
     e70:	28 01       	movw	r4, r16
     e72:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     e74:	d9 01       	movw	r26, r18
     e76:	c8 01       	movw	r24, r16
     e78:	68 94       	set
     e7a:	12 f8       	bld	r1, 2
     e7c:	b6 95       	lsr	r27
     e7e:	a7 95       	ror	r26
     e80:	97 95       	ror	r25
     e82:	87 95       	ror	r24
     e84:	16 94       	lsr	r1
     e86:	d1 f7       	brne	.-12     	; 0xe7c <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     e88:	b9 01       	movw	r22, r18
     e8a:	a8 01       	movw	r20, r16
     e8c:	03 2e       	mov	r0, r19
     e8e:	36 e1       	ldi	r19, 0x16	; 22
     e90:	76 95       	lsr	r23
     e92:	67 95       	ror	r22
     e94:	57 95       	ror	r21
     e96:	47 95       	ror	r20
     e98:	3a 95       	dec	r19
     e9a:	d1 f7       	brne	.-12     	; 0xe90 <usart_set_baudrate+0x46>
     e9c:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     e9e:	2c 81       	ldd	r18, Y+4	; 0x04
     ea0:	22 fd       	sbrc	r18, 2
     ea2:	08 c0       	rjmp	.+16     	; 0xeb4 <usart_set_baudrate+0x6a>
		max_rate /= 2;
     ea4:	b6 95       	lsr	r27
     ea6:	a7 95       	ror	r26
     ea8:	97 95       	ror	r25
     eaa:	87 95       	ror	r24
		min_rate /= 2;
     eac:	76 95       	lsr	r23
     eae:	67 95       	ror	r22
     eb0:	57 95       	ror	r21
     eb2:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     eb4:	88 15       	cp	r24, r8
     eb6:	99 05       	cpc	r25, r9
     eb8:	aa 05       	cpc	r26, r10
     eba:	bb 05       	cpc	r27, r11
     ebc:	08 f4       	brcc	.+2      	; 0xec0 <usart_set_baudrate+0x76>
     ebe:	a6 c0       	rjmp	.+332    	; 0x100c <usart_set_baudrate+0x1c2>
     ec0:	84 16       	cp	r8, r20
     ec2:	95 06       	cpc	r9, r21
     ec4:	a6 06       	cpc	r10, r22
     ec6:	b7 06       	cpc	r11, r23
     ec8:	08 f4       	brcc	.+2      	; 0xecc <usart_set_baudrate+0x82>
     eca:	a2 c0       	rjmp	.+324    	; 0x1010 <usart_set_baudrate+0x1c6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	82 fd       	sbrc	r24, 2
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <usart_set_baudrate+0x90>
		baud *= 2;
     ed2:	88 0c       	add	r8, r8
     ed4:	99 1c       	adc	r9, r9
     ed6:	aa 1c       	adc	r10, r10
     ed8:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     eda:	c3 01       	movw	r24, r6
     edc:	b2 01       	movw	r22, r4
     ede:	a5 01       	movw	r20, r10
     ee0:	94 01       	movw	r18, r8
     ee2:	0e 94 a2 14 	call	0x2944	; 0x2944 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     ee6:	2f 3f       	cpi	r18, 0xFF	; 255
     ee8:	31 05       	cpc	r19, r1
     eea:	41 05       	cpc	r20, r1
     eec:	51 05       	cpc	r21, r1
     eee:	08 f4       	brcc	.+2      	; 0xef2 <usart_set_baudrate+0xa8>
     ef0:	91 c0       	rjmp	.+290    	; 0x1014 <usart_set_baudrate+0x1ca>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
     ef2:	c1 2c       	mov	r12, r1
     ef4:	d1 2c       	mov	r13, r1
     ef6:	76 01       	movw	r14, r12
     ef8:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     efa:	19 ef       	ldi	r17, 0xF9	; 249
     efc:	05 c0       	rjmp	.+10     	; 0xf08 <usart_set_baudrate+0xbe>
		if (ratio < limit) {
     efe:	2c 15       	cp	r18, r12
     f00:	3d 05       	cpc	r19, r13
     f02:	4e 05       	cpc	r20, r14
     f04:	5f 05       	cpc	r21, r15
     f06:	68 f0       	brcs	.+26     	; 0xf22 <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
     f08:	cc 0c       	add	r12, r12
     f0a:	dd 1c       	adc	r13, r13
     f0c:	ee 1c       	adc	r14, r14
     f0e:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     f10:	1d 3f       	cpi	r17, 0xFD	; 253
     f12:	14 f4       	brge	.+4      	; 0xf18 <usart_set_baudrate+0xce>
			limit |= 1;
     f14:	68 94       	set
     f16:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     f18:	1f 5f       	subi	r17, 0xFF	; 255
     f1a:	17 30       	cpi	r17, 0x07	; 7
     f1c:	81 f7       	brne	.-32     	; 0xefe <usart_set_baudrate+0xb4>
     f1e:	21 2f       	mov	r18, r17
     f20:	50 c0       	rjmp	.+160    	; 0xfc2 <usart_set_baudrate+0x178>
     f22:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     f24:	11 23       	and	r17, r17
     f26:	0c f0       	brlt	.+2      	; 0xf2a <usart_set_baudrate+0xe0>
     f28:	4c c0       	rjmp	.+152    	; 0xfc2 <usart_set_baudrate+0x178>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     f2a:	d5 01       	movw	r26, r10
     f2c:	c4 01       	movw	r24, r8
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	aa 1f       	adc	r26, r26
     f34:	bb 1f       	adc	r27, r27
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	aa 1f       	adc	r26, r26
     f3c:	bb 1f       	adc	r27, r27
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	aa 1f       	adc	r26, r26
     f44:	bb 1f       	adc	r27, r27
     f46:	48 1a       	sub	r4, r24
     f48:	59 0a       	sbc	r5, r25
     f4a:	6a 0a       	sbc	r6, r26
     f4c:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     f4e:	1e 3f       	cpi	r17, 0xFE	; 254
     f50:	f4 f4       	brge	.+60     	; 0xf8e <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     f52:	6d ef       	ldi	r22, 0xFD	; 253
     f54:	7f ef       	ldi	r23, 0xFF	; 255
     f56:	61 1b       	sub	r22, r17
     f58:	71 09       	sbc	r23, r1
     f5a:	17 fd       	sbrc	r17, 7
     f5c:	73 95       	inc	r23
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <usart_set_baudrate+0x11e>
     f60:	44 0c       	add	r4, r4
     f62:	55 1c       	adc	r5, r5
     f64:	66 1c       	adc	r6, r6
     f66:	77 1c       	adc	r7, r7
     f68:	6a 95       	dec	r22
     f6a:	d2 f7       	brpl	.-12     	; 0xf60 <usart_set_baudrate+0x116>
     f6c:	d5 01       	movw	r26, r10
     f6e:	c4 01       	movw	r24, r8
     f70:	b6 95       	lsr	r27
     f72:	a7 95       	ror	r26
     f74:	97 95       	ror	r25
     f76:	87 95       	ror	r24
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	64 0d       	add	r22, r4
     f7e:	75 1d       	adc	r23, r5
     f80:	86 1d       	adc	r24, r6
     f82:	97 1d       	adc	r25, r7
     f84:	a5 01       	movw	r20, r10
     f86:	94 01       	movw	r18, r8
     f88:	0e 94 a2 14 	call	0x2944	; 0x2944 <__udivmodsi4>
     f8c:	36 c0       	rjmp	.+108    	; 0xffa <usart_set_baudrate+0x1b0>
		} else {
			baud <<= exp + 3;
     f8e:	23 e0       	ldi	r18, 0x03	; 3
     f90:	21 0f       	add	r18, r17
     f92:	d5 01       	movw	r26, r10
     f94:	c4 01       	movw	r24, r8
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <usart_set_baudrate+0x156>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	aa 1f       	adc	r26, r26
     f9e:	bb 1f       	adc	r27, r27
     fa0:	2a 95       	dec	r18
     fa2:	d2 f7       	brpl	.-12     	; 0xf98 <usart_set_baudrate+0x14e>
     fa4:	9c 01       	movw	r18, r24
     fa6:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
     fa8:	b6 95       	lsr	r27
     faa:	a7 95       	ror	r26
     fac:	97 95       	ror	r25
     fae:	87 95       	ror	r24
     fb0:	bc 01       	movw	r22, r24
     fb2:	cd 01       	movw	r24, r26
     fb4:	64 0d       	add	r22, r4
     fb6:	75 1d       	adc	r23, r5
     fb8:	86 1d       	adc	r24, r6
     fba:	97 1d       	adc	r25, r7
     fbc:	0e 94 a2 14 	call	0x2944	; 0x2944 <__udivmodsi4>
     fc0:	1c c0       	rjmp	.+56     	; 0xffa <usart_set_baudrate+0x1b0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     fc2:	2d 5f       	subi	r18, 0xFD	; 253
     fc4:	d5 01       	movw	r26, r10
     fc6:	c4 01       	movw	r24, r8
     fc8:	04 c0       	rjmp	.+8      	; 0xfd2 <usart_set_baudrate+0x188>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	aa 1f       	adc	r26, r26
     fd0:	bb 1f       	adc	r27, r27
     fd2:	2a 95       	dec	r18
     fd4:	d2 f7       	brpl	.-12     	; 0xfca <usart_set_baudrate+0x180>
     fd6:	9c 01       	movw	r18, r24
     fd8:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
     fda:	b6 95       	lsr	r27
     fdc:	a7 95       	ror	r26
     fde:	97 95       	ror	r25
     fe0:	87 95       	ror	r24
     fe2:	bc 01       	movw	r22, r24
     fe4:	cd 01       	movw	r24, r26
     fe6:	64 0d       	add	r22, r4
     fe8:	75 1d       	adc	r23, r5
     fea:	86 1d       	adc	r24, r6
     fec:	97 1d       	adc	r25, r7
     fee:	0e 94 a2 14 	call	0x2944	; 0x2944 <__udivmodsi4>
     ff2:	21 50       	subi	r18, 0x01	; 1
     ff4:	31 09       	sbc	r19, r1
     ff6:	41 09       	sbc	r20, r1
     ff8:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     ffa:	83 2f       	mov	r24, r19
     ffc:	8f 70       	andi	r24, 0x0F	; 15
     ffe:	12 95       	swap	r17
    1000:	10 7f       	andi	r17, 0xF0	; 240
    1002:	18 2b       	or	r17, r24
    1004:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1006:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	18 c0       	rjmp	.+48     	; 0x103c <usart_set_baudrate+0x1f2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	16 c0       	rjmp	.+44     	; 0x103c <usart_set_baudrate+0x1f2>
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	14 c0       	rjmp	.+40     	; 0x103c <usart_set_baudrate+0x1f2>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1014:	d5 01       	movw	r26, r10
    1016:	c4 01       	movw	r24, r8
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	aa 1f       	adc	r26, r26
    101e:	bb 1f       	adc	r27, r27
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	aa 1f       	adc	r26, r26
    1026:	bb 1f       	adc	r27, r27
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	aa 1f       	adc	r26, r26
    102e:	bb 1f       	adc	r27, r27
    1030:	48 1a       	sub	r4, r24
    1032:	59 0a       	sbc	r5, r25
    1034:	6a 0a       	sbc	r6, r26
    1036:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1038:	19 ef       	ldi	r17, 0xF9	; 249
    103a:	8b cf       	rjmp	.-234    	; 0xf52 <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	df 90       	pop	r13
    104a:	cf 90       	pop	r12
    104c:	bf 90       	pop	r11
    104e:	af 90       	pop	r10
    1050:	9f 90       	pop	r9
    1052:	8f 90       	pop	r8
    1054:	7f 90       	pop	r7
    1056:	6f 90       	pop	r6
    1058:	5f 90       	pop	r5
    105a:	4f 90       	pop	r4
    105c:	08 95       	ret

0000105e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	ec 01       	movw	r28, r24
    1068:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	09 f4       	brne	.+2      	; 0x1070 <usart_init_rs232+0x12>
    106e:	be c0       	rjmp	.+380    	; 0x11ec <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1070:	80 3c       	cpi	r24, 0xC0	; 192
    1072:	91 05       	cpc	r25, r1
    1074:	21 f4       	brne	.+8      	; 0x107e <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1076:	60 e1       	ldi	r22, 0x10	; 16
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	4d d7       	rcall	.+3738   	; 0x1f16 <sysclk_enable_module>
    107c:	b7 c0       	rjmp	.+366    	; 0x11ec <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    107e:	c1 15       	cp	r28, r1
    1080:	84 e0       	ldi	r24, 0x04	; 4
    1082:	d8 07       	cpc	r29, r24
    1084:	21 f4       	brne	.+8      	; 0x108e <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1086:	64 e0       	ldi	r22, 0x04	; 4
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	45 d7       	rcall	.+3722   	; 0x1f16 <sysclk_enable_module>
    108c:	af c0       	rjmp	.+350    	; 0x11ec <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    108e:	c0 38       	cpi	r28, 0x80	; 128
    1090:	e1 e0       	ldi	r30, 0x01	; 1
    1092:	de 07       	cpc	r29, r30
    1094:	21 f4       	brne	.+8      	; 0x109e <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1096:	62 e0       	ldi	r22, 0x02	; 2
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	3d d7       	rcall	.+3706   	; 0x1f16 <sysclk_enable_module>
    109c:	a7 c0       	rjmp	.+334    	; 0x11ec <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    109e:	c1 15       	cp	r28, r1
    10a0:	f1 e0       	ldi	r31, 0x01	; 1
    10a2:	df 07       	cpc	r29, r31
    10a4:	21 f4       	brne	.+8      	; 0x10ae <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    10a6:	61 e0       	ldi	r22, 0x01	; 1
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	35 d7       	rcall	.+3690   	; 0x1f16 <sysclk_enable_module>
    10ac:	9f c0       	rjmp	.+318    	; 0x11ec <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    10ae:	c0 38       	cpi	r28, 0x80	; 128
    10b0:	83 e0       	ldi	r24, 0x03	; 3
    10b2:	d8 07       	cpc	r29, r24
    10b4:	21 f4       	brne	.+8      	; 0x10be <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    10b6:	61 e0       	ldi	r22, 0x01	; 1
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	2d d7       	rcall	.+3674   	; 0x1f16 <sysclk_enable_module>
    10bc:	97 c0       	rjmp	.+302    	; 0x11ec <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    10be:	c1 15       	cp	r28, r1
    10c0:	e2 e0       	ldi	r30, 0x02	; 2
    10c2:	de 07       	cpc	r29, r30
    10c4:	21 f4       	brne	.+8      	; 0x10ce <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    10c6:	62 e0       	ldi	r22, 0x02	; 2
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	25 d7       	rcall	.+3658   	; 0x1f16 <sysclk_enable_module>
    10cc:	8f c0       	rjmp	.+286    	; 0x11ec <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    10ce:	c0 32       	cpi	r28, 0x20	; 32
    10d0:	f3 e0       	ldi	r31, 0x03	; 3
    10d2:	df 07       	cpc	r29, r31
    10d4:	21 f4       	brne	.+8      	; 0x10de <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    10d6:	64 e0       	ldi	r22, 0x04	; 4
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	1d d7       	rcall	.+3642   	; 0x1f16 <sysclk_enable_module>
    10dc:	87 c0       	rjmp	.+270    	; 0x11ec <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    10de:	c1 15       	cp	r28, r1
    10e0:	88 e0       	ldi	r24, 0x08	; 8
    10e2:	d8 07       	cpc	r29, r24
    10e4:	21 f4       	brne	.+8      	; 0x10ee <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    10e6:	61 e0       	ldi	r22, 0x01	; 1
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	15 d7       	rcall	.+3626   	; 0x1f16 <sysclk_enable_module>
    10ec:	7f c0       	rjmp	.+254    	; 0x11ec <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    10ee:	c1 15       	cp	r28, r1
    10f0:	e9 e0       	ldi	r30, 0x09	; 9
    10f2:	de 07       	cpc	r29, r30
    10f4:	21 f4       	brne	.+8      	; 0x10fe <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    10f6:	61 e0       	ldi	r22, 0x01	; 1
    10f8:	84 e0       	ldi	r24, 0x04	; 4
    10fa:	0d d7       	rcall	.+3610   	; 0x1f16 <sysclk_enable_module>
    10fc:	77 c0       	rjmp	.+238    	; 0x11ec <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    10fe:	c1 15       	cp	r28, r1
    1100:	fa e0       	ldi	r31, 0x0A	; 10
    1102:	df 07       	cpc	r29, r31
    1104:	21 f4       	brne	.+8      	; 0x110e <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	85 e0       	ldi	r24, 0x05	; 5
    110a:	05 d7       	rcall	.+3594   	; 0x1f16 <sysclk_enable_module>
    110c:	6f c0       	rjmp	.+222    	; 0x11ec <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    110e:	c0 34       	cpi	r28, 0x40	; 64
    1110:	88 e0       	ldi	r24, 0x08	; 8
    1112:	d8 07       	cpc	r29, r24
    1114:	21 f4       	brne	.+8      	; 0x111e <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1116:	62 e0       	ldi	r22, 0x02	; 2
    1118:	83 e0       	ldi	r24, 0x03	; 3
    111a:	fd d6       	rcall	.+3578   	; 0x1f16 <sysclk_enable_module>
    111c:	67 c0       	rjmp	.+206    	; 0x11ec <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    111e:	c0 34       	cpi	r28, 0x40	; 64
    1120:	e9 e0       	ldi	r30, 0x09	; 9
    1122:	de 07       	cpc	r29, r30
    1124:	21 f4       	brne	.+8      	; 0x112e <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1126:	62 e0       	ldi	r22, 0x02	; 2
    1128:	84 e0       	ldi	r24, 0x04	; 4
    112a:	f5 d6       	rcall	.+3562   	; 0x1f16 <sysclk_enable_module>
    112c:	5f c0       	rjmp	.+190    	; 0x11ec <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    112e:	c0 39       	cpi	r28, 0x90	; 144
    1130:	f8 e0       	ldi	r31, 0x08	; 8
    1132:	df 07       	cpc	r29, r31
    1134:	21 f4       	brne	.+8      	; 0x113e <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1136:	64 e0       	ldi	r22, 0x04	; 4
    1138:	83 e0       	ldi	r24, 0x03	; 3
    113a:	ed d6       	rcall	.+3546   	; 0x1f16 <sysclk_enable_module>
    113c:	57 c0       	rjmp	.+174    	; 0x11ec <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    113e:	c0 39       	cpi	r28, 0x90	; 144
    1140:	89 e0       	ldi	r24, 0x09	; 9
    1142:	d8 07       	cpc	r29, r24
    1144:	21 f4       	brne	.+8      	; 0x114e <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1146:	64 e0       	ldi	r22, 0x04	; 4
    1148:	84 e0       	ldi	r24, 0x04	; 4
    114a:	e5 d6       	rcall	.+3530   	; 0x1f16 <sysclk_enable_module>
    114c:	4f c0       	rjmp	.+158    	; 0x11ec <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    114e:	c0 39       	cpi	r28, 0x90	; 144
    1150:	ea e0       	ldi	r30, 0x0A	; 10
    1152:	de 07       	cpc	r29, r30
    1154:	21 f4       	brne	.+8      	; 0x115e <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1156:	64 e0       	ldi	r22, 0x04	; 4
    1158:	85 e0       	ldi	r24, 0x05	; 5
    115a:	dd d6       	rcall	.+3514   	; 0x1f16 <sysclk_enable_module>
    115c:	47 c0       	rjmp	.+142    	; 0x11ec <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    115e:	c0 3c       	cpi	r28, 0xC0	; 192
    1160:	f8 e0       	ldi	r31, 0x08	; 8
    1162:	df 07       	cpc	r29, r31
    1164:	21 f4       	brne	.+8      	; 0x116e <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1166:	68 e0       	ldi	r22, 0x08	; 8
    1168:	83 e0       	ldi	r24, 0x03	; 3
    116a:	d5 d6       	rcall	.+3498   	; 0x1f16 <sysclk_enable_module>
    116c:	3f c0       	rjmp	.+126    	; 0x11ec <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    116e:	c0 3c       	cpi	r28, 0xC0	; 192
    1170:	89 e0       	ldi	r24, 0x09	; 9
    1172:	d8 07       	cpc	r29, r24
    1174:	21 f4       	brne	.+8      	; 0x117e <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1176:	68 e0       	ldi	r22, 0x08	; 8
    1178:	84 e0       	ldi	r24, 0x04	; 4
    117a:	cd d6       	rcall	.+3482   	; 0x1f16 <sysclk_enable_module>
    117c:	37 c0       	rjmp	.+110    	; 0x11ec <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    117e:	c0 3a       	cpi	r28, 0xA0	; 160
    1180:	e8 e0       	ldi	r30, 0x08	; 8
    1182:	de 07       	cpc	r29, r30
    1184:	21 f4       	brne	.+8      	; 0x118e <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1186:	60 e1       	ldi	r22, 0x10	; 16
    1188:	83 e0       	ldi	r24, 0x03	; 3
    118a:	c5 d6       	rcall	.+3466   	; 0x1f16 <sysclk_enable_module>
    118c:	2f c0       	rjmp	.+94     	; 0x11ec <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    118e:	c0 3a       	cpi	r28, 0xA0	; 160
    1190:	f9 e0       	ldi	r31, 0x09	; 9
    1192:	df 07       	cpc	r29, r31
    1194:	21 f4       	brne	.+8      	; 0x119e <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1196:	60 e1       	ldi	r22, 0x10	; 16
    1198:	84 e0       	ldi	r24, 0x04	; 4
    119a:	bd d6       	rcall	.+3450   	; 0x1f16 <sysclk_enable_module>
    119c:	27 c0       	rjmp	.+78     	; 0x11ec <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    119e:	c0 3a       	cpi	r28, 0xA0	; 160
    11a0:	8a e0       	ldi	r24, 0x0A	; 10
    11a2:	d8 07       	cpc	r29, r24
    11a4:	21 f4       	brne	.+8      	; 0x11ae <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    11a6:	60 e1       	ldi	r22, 0x10	; 16
    11a8:	85 e0       	ldi	r24, 0x05	; 5
    11aa:	b5 d6       	rcall	.+3434   	; 0x1f16 <sysclk_enable_module>
    11ac:	1f c0       	rjmp	.+62     	; 0x11ec <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    11ae:	c0 3b       	cpi	r28, 0xB0	; 176
    11b0:	e8 e0       	ldi	r30, 0x08	; 8
    11b2:	de 07       	cpc	r29, r30
    11b4:	21 f4       	brne	.+8      	; 0x11be <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    11b6:	60 e2       	ldi	r22, 0x20	; 32
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	ad d6       	rcall	.+3418   	; 0x1f16 <sysclk_enable_module>
    11bc:	17 c0       	rjmp	.+46     	; 0x11ec <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    11be:	c0 3b       	cpi	r28, 0xB0	; 176
    11c0:	f9 e0       	ldi	r31, 0x09	; 9
    11c2:	df 07       	cpc	r29, r31
    11c4:	21 f4       	brne	.+8      	; 0x11ce <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    11c6:	60 e2       	ldi	r22, 0x20	; 32
    11c8:	84 e0       	ldi	r24, 0x04	; 4
    11ca:	a5 d6       	rcall	.+3402   	; 0x1f16 <sysclk_enable_module>
    11cc:	0f c0       	rjmp	.+30     	; 0x11ec <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    11ce:	c0 38       	cpi	r28, 0x80	; 128
    11d0:	84 e0       	ldi	r24, 0x04	; 4
    11d2:	d8 07       	cpc	r29, r24
    11d4:	21 f4       	brne	.+8      	; 0x11de <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    11d6:	60 e4       	ldi	r22, 0x40	; 64
    11d8:	83 e0       	ldi	r24, 0x03	; 3
    11da:	9d d6       	rcall	.+3386   	; 0x1f16 <sysclk_enable_module>
    11dc:	07 c0       	rjmp	.+14     	; 0x11ec <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    11de:	c0 3a       	cpi	r28, 0xA0	; 160
    11e0:	e4 e0       	ldi	r30, 0x04	; 4
    11e2:	de 07       	cpc	r29, r30
    11e4:	19 f4       	brne	.+6      	; 0x11ec <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    11e6:	60 e4       	ldi	r22, 0x40	; 64
    11e8:	85 e0       	ldi	r24, 0x05	; 5
    11ea:	95 d6       	rcall	.+3370   	; 0x1f16 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	8f 73       	andi	r24, 0x3F	; 63
    11f0:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    11f2:	f8 01       	movw	r30, r16
    11f4:	94 81       	ldd	r25, Z+4	; 0x04
    11f6:	85 81       	ldd	r24, Z+5	; 0x05
    11f8:	89 2b       	or	r24, r25
    11fa:	96 81       	ldd	r25, Z+6	; 0x06
    11fc:	99 23       	and	r25, r25
    11fe:	11 f0       	breq	.+4      	; 0x1204 <usart_init_rs232+0x1a6>
    1200:	98 e0       	ldi	r25, 0x08	; 8
    1202:	01 c0       	rjmp	.+2      	; 0x1206 <usart_init_rs232+0x1a8>
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	89 2b       	or	r24, r25
    1208:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    120a:	f8 01       	movw	r30, r16
    120c:	40 81       	ld	r20, Z
    120e:	51 81       	ldd	r21, Z+1	; 0x01
    1210:	62 81       	ldd	r22, Z+2	; 0x02
    1212:	73 81       	ldd	r23, Z+3	; 0x03
    1214:	00 e0       	ldi	r16, 0x00	; 0
    1216:	1c e6       	ldi	r17, 0x6C	; 108
    1218:	2c ed       	ldi	r18, 0xDC	; 220
    121a:	32 e0       	ldi	r19, 0x02	; 2
    121c:	ce 01       	movw	r24, r28
    121e:	15 de       	rcall	.-982    	; 0xe4a <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	98 60       	ori	r25, 0x08	; 8
    1224:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1226:	9c 81       	ldd	r25, Y+4	; 0x04
    1228:	90 61       	ori	r25, 0x10	; 16
    122a:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1236:	81 11       	cpse	r24, r1
    1238:	18 c0       	rjmp	.+48     	; 0x126a <udd_sleep_mode+0x34>
    123a:	90 91 f4 22 	lds	r25, 0x22F4
    123e:	99 23       	and	r25, r25
    1240:	89 f0       	breq	.+34     	; 0x1264 <udd_sleep_mode+0x2e>
    1242:	9f b7       	in	r25, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	e8 e0       	ldi	r30, 0x08	; 8
    1248:	f3 e2       	ldi	r31, 0x23	; 35
    124a:	20 81       	ld	r18, Z
    124c:	21 50       	subi	r18, 0x01	; 1
    124e:	20 83       	st	Z, r18
    1250:	9f bf       	out	0x3f, r25	; 63
    1252:	08 c0       	rjmp	.+16     	; 0x1264 <udd_sleep_mode+0x2e>
    1254:	9f b7       	in	r25, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	e8 e0       	ldi	r30, 0x08	; 8
    125a:	f3 e2       	ldi	r31, 0x23	; 35
    125c:	20 81       	ld	r18, Z
    125e:	2f 5f       	subi	r18, 0xFF	; 255
    1260:	20 83       	st	Z, r18
    1262:	9f bf       	out	0x3f, r25	; 63
    1264:	80 93 f4 22 	sts	0x22F4, r24
    1268:	08 95       	ret
    126a:	90 91 f4 22 	lds	r25, 0x22F4
    126e:	99 23       	and	r25, r25
    1270:	89 f3       	breq	.-30     	; 0x1254 <udd_sleep_mode+0x1e>
    1272:	f8 cf       	rjmp	.-16     	; 0x1264 <udd_sleep_mode+0x2e>

00001274 <udd_ctrl_init>:
    1274:	0f 93       	push	r16
    1276:	e8 ec       	ldi	r30, 0xC8	; 200
    1278:	f4 e0       	ldi	r31, 0x04	; 4
    127a:	80 81       	ld	r24, Z
    127c:	8f 7d       	andi	r24, 0xDF	; 223
    127e:	80 83       	st	Z, r24
    1280:	80 81       	ld	r24, Z
    1282:	8f 7d       	andi	r24, 0xDF	; 223
    1284:	80 83       	st	Z, r24
    1286:	e8 ec       	ldi	r30, 0xC8	; 200
    1288:	f2 e2       	ldi	r31, 0x22	; 34
    128a:	02 e0       	ldi	r16, 0x02	; 2
    128c:	05 93       	las	Z, r16
    128e:	10 92 ca 22 	sts	0x22CA, r1
    1292:	10 92 cb 22 	sts	0x22CB, r1
    1296:	00 e2       	ldi	r16, 0x20	; 32
    1298:	06 93       	lac	Z, r16
    129a:	00 e4       	ldi	r16, 0x40	; 64
    129c:	06 93       	lac	Z, r16
    129e:	e0 ec       	ldi	r30, 0xC0	; 192
    12a0:	f2 e2       	ldi	r31, 0x22	; 34
    12a2:	00 e2       	ldi	r16, 0x20	; 32
    12a4:	06 93       	lac	Z, r16
    12a6:	00 e4       	ldi	r16, 0x40	; 64
    12a8:	06 93       	lac	Z, r16
    12aa:	10 92 03 23 	sts	0x2303, r1
    12ae:	10 92 04 23 	sts	0x2304, r1
    12b2:	10 92 05 23 	sts	0x2305, r1
    12b6:	10 92 06 23 	sts	0x2306, r1
    12ba:	10 92 01 23 	sts	0x2301, r1
    12be:	10 92 02 23 	sts	0x2302, r1
    12c2:	10 92 b2 22 	sts	0x22B2, r1
    12c6:	0f 91       	pop	r16
    12c8:	08 95       	ret

000012ca <udd_ctrl_stall_data>:
    12ca:	0f 93       	push	r16
    12cc:	85 e0       	ldi	r24, 0x05	; 5
    12ce:	80 93 b2 22 	sts	0x22B2, r24
    12d2:	e9 ec       	ldi	r30, 0xC9	; 201
    12d4:	f2 e2       	ldi	r31, 0x22	; 34
    12d6:	04 e0       	ldi	r16, 0x04	; 4
    12d8:	05 93       	las	Z, r16
    12da:	e1 ec       	ldi	r30, 0xC1	; 193
    12dc:	f2 e2       	ldi	r31, 0x22	; 34
    12de:	04 e0       	ldi	r16, 0x04	; 4
    12e0:	05 93       	las	Z, r16
    12e2:	0f 91       	pop	r16
    12e4:	08 95       	ret

000012e6 <udd_ctrl_send_zlp_in>:
    12e6:	0f 93       	push	r16
    12e8:	83 e0       	ldi	r24, 0x03	; 3
    12ea:	80 93 b2 22 	sts	0x22B2, r24
    12ee:	10 92 ca 22 	sts	0x22CA, r1
    12f2:	10 92 cb 22 	sts	0x22CB, r1
    12f6:	e8 ec       	ldi	r30, 0xC8	; 200
    12f8:	f2 e2       	ldi	r31, 0x22	; 34
    12fa:	02 e0       	ldi	r16, 0x02	; 2
    12fc:	06 93       	lac	Z, r16
    12fe:	0f 91       	pop	r16
    1300:	08 95       	ret

00001302 <udd_ctrl_endofrequest>:
    1302:	e0 91 03 23 	lds	r30, 0x2303
    1306:	f0 91 04 23 	lds	r31, 0x2304
    130a:	30 97       	sbiw	r30, 0x00	; 0
    130c:	09 f0       	breq	.+2      	; 0x1310 <udd_ctrl_endofrequest+0xe>
    130e:	09 95       	icall
    1310:	08 95       	ret

00001312 <udd_ctrl_in_sent>:
    1312:	0f 93       	push	r16
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	80 91 b2 22 	lds	r24, 0x22B2
    131c:	83 30       	cpi	r24, 0x03	; 3
    131e:	19 f4       	brne	.+6      	; 0x1326 <udd_ctrl_in_sent+0x14>
    1320:	f0 df       	rcall	.-32     	; 0x1302 <udd_ctrl_endofrequest>
    1322:	a8 df       	rcall	.-176    	; 0x1274 <udd_ctrl_init>
    1324:	60 c0       	rjmp	.+192    	; 0x13e6 <udd_ctrl_in_sent+0xd4>
    1326:	80 91 ae 22 	lds	r24, 0x22AE
    132a:	90 91 af 22 	lds	r25, 0x22AF
    132e:	c0 91 01 23 	lds	r28, 0x2301
    1332:	d0 91 02 23 	lds	r29, 0x2302
    1336:	c8 1b       	sub	r28, r24
    1338:	d9 0b       	sbc	r29, r25
    133a:	71 f5       	brne	.+92     	; 0x1398 <udd_ctrl_in_sent+0x86>
    133c:	20 91 b0 22 	lds	r18, 0x22B0
    1340:	30 91 b1 22 	lds	r19, 0x22B1
    1344:	82 0f       	add	r24, r18
    1346:	93 1f       	adc	r25, r19
    1348:	80 93 b0 22 	sts	0x22B0, r24
    134c:	90 93 b1 22 	sts	0x22B1, r25
    1350:	20 91 fd 22 	lds	r18, 0x22FD
    1354:	30 91 fe 22 	lds	r19, 0x22FE
    1358:	82 17       	cp	r24, r18
    135a:	93 07       	cpc	r25, r19
    135c:	21 f0       	breq	.+8      	; 0x1366 <udd_ctrl_in_sent+0x54>
    135e:	80 91 c9 21 	lds	r24, 0x21C9
    1362:	88 23       	and	r24, r24
    1364:	41 f0       	breq	.+16     	; 0x1376 <udd_ctrl_in_sent+0x64>
    1366:	84 e0       	ldi	r24, 0x04	; 4
    1368:	80 93 b2 22 	sts	0x22B2, r24
    136c:	e0 ec       	ldi	r30, 0xC0	; 192
    136e:	f2 e2       	ldi	r31, 0x22	; 34
    1370:	02 e0       	ldi	r16, 0x02	; 2
    1372:	06 93       	lac	Z, r16
    1374:	38 c0       	rjmp	.+112    	; 0x13e6 <udd_ctrl_in_sent+0xd4>
    1376:	e0 91 05 23 	lds	r30, 0x2305
    137a:	f0 91 06 23 	lds	r31, 0x2306
    137e:	30 97       	sbiw	r30, 0x00	; 0
    1380:	99 f0       	breq	.+38     	; 0x13a8 <udd_ctrl_in_sent+0x96>
    1382:	09 95       	icall
    1384:	88 23       	and	r24, r24
    1386:	81 f0       	breq	.+32     	; 0x13a8 <udd_ctrl_in_sent+0x96>
    1388:	10 92 ae 22 	sts	0x22AE, r1
    138c:	10 92 af 22 	sts	0x22AF, r1
    1390:	c0 91 01 23 	lds	r28, 0x2301
    1394:	d0 91 02 23 	lds	r29, 0x2302
    1398:	c0 34       	cpi	r28, 0x40	; 64
    139a:	d1 05       	cpc	r29, r1
    139c:	28 f0       	brcs	.+10     	; 0x13a8 <udd_ctrl_in_sent+0x96>
    139e:	10 92 c9 21 	sts	0x21C9, r1
    13a2:	c0 e4       	ldi	r28, 0x40	; 64
    13a4:	d0 e0       	ldi	r29, 0x00	; 0
    13a6:	03 c0       	rjmp	.+6      	; 0x13ae <udd_ctrl_in_sent+0x9c>
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	80 93 c9 21 	sts	0x21C9, r24
    13ae:	c0 93 ca 22 	sts	0x22CA, r28
    13b2:	d0 93 cb 22 	sts	0x22CB, r29
    13b6:	80 91 ae 22 	lds	r24, 0x22AE
    13ba:	90 91 af 22 	lds	r25, 0x22AF
    13be:	20 91 ff 22 	lds	r18, 0x22FF
    13c2:	30 91 00 23 	lds	r19, 0x2300
    13c6:	28 0f       	add	r18, r24
    13c8:	39 1f       	adc	r19, r25
    13ca:	20 93 cc 22 	sts	0x22CC, r18
    13ce:	30 93 cd 22 	sts	0x22CD, r19
    13d2:	c8 0f       	add	r28, r24
    13d4:	d9 1f       	adc	r29, r25
    13d6:	c0 93 ae 22 	sts	0x22AE, r28
    13da:	d0 93 af 22 	sts	0x22AF, r29
    13de:	e8 ec       	ldi	r30, 0xC8	; 200
    13e0:	f2 e2       	ldi	r31, 0x22	; 34
    13e2:	02 e0       	ldi	r16, 0x02	; 2
    13e4:	06 93       	lac	Z, r16
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	0f 91       	pop	r16
    13ec:	08 95       	ret

000013ee <udd_ep_get_size>:
    13ee:	fc 01       	movw	r30, r24
    13f0:	81 81       	ldd	r24, Z+1	; 0x01
    13f2:	87 70       	andi	r24, 0x07	; 7
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	fc 01       	movw	r30, r24
    13f8:	31 97       	sbiw	r30, 0x01	; 1
    13fa:	e7 30       	cpi	r30, 0x07	; 7
    13fc:	f1 05       	cpc	r31, r1
    13fe:	20 f4       	brcc	.+8      	; 0x1408 <udd_ep_get_size+0x1a>
    1400:	e2 50       	subi	r30, 0x02	; 2
    1402:	ff 4f       	sbci	r31, 0xFF	; 255
    1404:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__tablejump2__>
    1408:	88 e0       	ldi	r24, 0x08	; 8
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	08 95       	ret
    140e:	80 e2       	ldi	r24, 0x20	; 32
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	08 95       	ret
    1414:	80 e4       	ldi	r24, 0x40	; 64
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	08 95       	ret
    141a:	80 e8       	ldi	r24, 0x80	; 128
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	08 95       	ret
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	08 95       	ret
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	92 e0       	ldi	r25, 0x02	; 2
    142a:	08 95       	ret
    142c:	8f ef       	ldi	r24, 0xFF	; 255
    142e:	93 e0       	ldi	r25, 0x03	; 3
    1430:	08 95       	ret
    1432:	80 e1       	ldi	r24, 0x10	; 16
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	08 95       	ret

00001438 <udd_ep_get_job>:
    1438:	28 2f       	mov	r18, r24
    143a:	2f 70       	andi	r18, 0x0F	; 15
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	22 0f       	add	r18, r18
    1440:	33 1f       	adc	r19, r19
    1442:	99 27       	eor	r25, r25
    1444:	87 fd       	sbrc	r24, 7
    1446:	90 95       	com	r25
    1448:	88 27       	eor	r24, r24
    144a:	99 0f       	add	r25, r25
    144c:	88 1f       	adc	r24, r24
    144e:	99 27       	eor	r25, r25
    1450:	82 0f       	add	r24, r18
    1452:	93 1f       	adc	r25, r19
    1454:	02 97       	sbiw	r24, 0x02	; 2
    1456:	9c 01       	movw	r18, r24
    1458:	22 0f       	add	r18, r18
    145a:	33 1f       	adc	r19, r19
    145c:	22 0f       	add	r18, r18
    145e:	33 1f       	adc	r19, r19
    1460:	22 0f       	add	r18, r18
    1462:	33 1f       	adc	r19, r19
    1464:	82 0f       	add	r24, r18
    1466:	93 1f       	adc	r25, r19
    1468:	86 5b       	subi	r24, 0xB6	; 182
    146a:	9d 4d       	sbci	r25, 0xDD	; 221
    146c:	08 95       	ret

0000146e <udd_ctrl_interrupt_tc_setup>:
    146e:	0f 93       	push	r16
    1470:	cf 93       	push	r28
    1472:	80 91 cc 04 	lds	r24, 0x04CC
    1476:	80 ff       	sbrs	r24, 0
    1478:	62 c0       	rjmp	.+196    	; 0x153e <udd_ctrl_interrupt_tc_setup+0xd0>
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	80 93 cc 04 	sts	0x04CC, r24
    1480:	e0 ec       	ldi	r30, 0xC0	; 192
    1482:	f2 e2       	ldi	r31, 0x22	; 34
    1484:	00 e8       	ldi	r16, 0x80	; 128
    1486:	06 93       	lac	Z, r16
    1488:	e8 ec       	ldi	r30, 0xC8	; 200
    148a:	f2 e2       	ldi	r31, 0x22	; 34
    148c:	00 e8       	ldi	r16, 0x80	; 128
    148e:	06 93       	lac	Z, r16
    1490:	80 93 ca 04 	sts	0x04CA, r24
    1494:	e0 ec       	ldi	r30, 0xC0	; 192
    1496:	f2 e2       	ldi	r31, 0x22	; 34
    1498:	00 e1       	ldi	r16, 0x10	; 16
    149a:	06 93       	lac	Z, r16
    149c:	80 91 b2 22 	lds	r24, 0x22B2
    14a0:	88 23       	and	r24, r24
    14a2:	29 f0       	breq	.+10     	; 0x14ae <udd_ctrl_interrupt_tc_setup+0x40>
    14a4:	83 50       	subi	r24, 0x03	; 3
    14a6:	82 30       	cpi	r24, 0x02	; 2
    14a8:	08 f4       	brcc	.+2      	; 0x14ac <udd_ctrl_interrupt_tc_setup+0x3e>
    14aa:	2b df       	rcall	.-426    	; 0x1302 <udd_ctrl_endofrequest>
    14ac:	e3 de       	rcall	.-570    	; 0x1274 <udd_ctrl_init>
    14ae:	80 91 c2 22 	lds	r24, 0x22C2
    14b2:	90 91 c3 22 	lds	r25, 0x22C3
    14b6:	08 97       	sbiw	r24, 0x08	; 8
    14b8:	09 f0       	breq	.+2      	; 0x14bc <udd_ctrl_interrupt_tc_setup+0x4e>
    14ba:	43 c0       	rjmp	.+134    	; 0x1542 <udd_ctrl_interrupt_tc_setup+0xd4>
    14bc:	88 e0       	ldi	r24, 0x08	; 8
    14be:	ee e6       	ldi	r30, 0x6E	; 110
    14c0:	f2 e2       	ldi	r31, 0x22	; 34
    14c2:	a7 ef       	ldi	r26, 0xF7	; 247
    14c4:	b2 e2       	ldi	r27, 0x22	; 34
    14c6:	01 90       	ld	r0, Z+
    14c8:	0d 92       	st	X+, r0
    14ca:	8a 95       	dec	r24
    14cc:	e1 f7       	brne	.-8      	; 0x14c6 <udd_ctrl_interrupt_tc_setup+0x58>
    14ce:	e8 ec       	ldi	r30, 0xC8	; 200
    14d0:	f4 e0       	ldi	r31, 0x04	; 4
    14d2:	80 81       	ld	r24, Z
    14d4:	80 62       	ori	r24, 0x20	; 32
    14d6:	80 83       	st	Z, r24
    14d8:	80 81       	ld	r24, Z
    14da:	80 62       	ori	r24, 0x20	; 32
    14dc:	80 83       	st	Z, r24
    14de:	19 da       	rcall	.-3022   	; 0x912 <udc_process_setup>
    14e0:	c8 2f       	mov	r28, r24
    14e2:	81 11       	cpse	r24, r1
    14e4:	03 c0       	rjmp	.+6      	; 0x14ec <udd_ctrl_interrupt_tc_setup+0x7e>
    14e6:	f1 de       	rcall	.-542    	; 0x12ca <udd_ctrl_stall_data>
    14e8:	c1 e0       	ldi	r28, 0x01	; 1
    14ea:	2c c0       	rjmp	.+88     	; 0x1544 <udd_ctrl_interrupt_tc_setup+0xd6>
    14ec:	80 91 f7 22 	lds	r24, 0x22F7
    14f0:	88 23       	and	r24, r24
    14f2:	6c f4       	brge	.+26     	; 0x150e <udd_ctrl_interrupt_tc_setup+0xa0>
    14f4:	10 92 b0 22 	sts	0x22B0, r1
    14f8:	10 92 b1 22 	sts	0x22B1, r1
    14fc:	10 92 ae 22 	sts	0x22AE, r1
    1500:	10 92 af 22 	sts	0x22AF, r1
    1504:	82 e0       	ldi	r24, 0x02	; 2
    1506:	80 93 b2 22 	sts	0x22B2, r24
    150a:	03 df       	rcall	.-506    	; 0x1312 <udd_ctrl_in_sent>
    150c:	1b c0       	rjmp	.+54     	; 0x1544 <udd_ctrl_interrupt_tc_setup+0xd6>
    150e:	20 91 fd 22 	lds	r18, 0x22FD
    1512:	30 91 fe 22 	lds	r19, 0x22FE
    1516:	23 2b       	or	r18, r19
    1518:	11 f4       	brne	.+4      	; 0x151e <udd_ctrl_interrupt_tc_setup+0xb0>
    151a:	e5 de       	rcall	.-566    	; 0x12e6 <udd_ctrl_send_zlp_in>
    151c:	13 c0       	rjmp	.+38     	; 0x1544 <udd_ctrl_interrupt_tc_setup+0xd6>
    151e:	10 92 b0 22 	sts	0x22B0, r1
    1522:	10 92 b1 22 	sts	0x22B1, r1
    1526:	10 92 ae 22 	sts	0x22AE, r1
    152a:	10 92 af 22 	sts	0x22AF, r1
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	80 93 b2 22 	sts	0x22B2, r24
    1534:	e0 ec       	ldi	r30, 0xC0	; 192
    1536:	f2 e2       	ldi	r31, 0x22	; 34
    1538:	02 e0       	ldi	r16, 0x02	; 2
    153a:	06 93       	lac	Z, r16
    153c:	03 c0       	rjmp	.+6      	; 0x1544 <udd_ctrl_interrupt_tc_setup+0xd6>
    153e:	c0 e0       	ldi	r28, 0x00	; 0
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <udd_ctrl_interrupt_tc_setup+0xd6>
    1542:	c1 e0       	ldi	r28, 0x01	; 1
    1544:	8c 2f       	mov	r24, r28
    1546:	cf 91       	pop	r28
    1548:	0f 91       	pop	r16
    154a:	08 95       	ret

0000154c <udd_ep_trans_complet>:
    154c:	bf 92       	push	r11
    154e:	cf 92       	push	r12
    1550:	df 92       	push	r13
    1552:	ef 92       	push	r14
    1554:	ff 92       	push	r15
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	b8 2e       	mov	r11, r24
    1560:	6b df       	rcall	.-298    	; 0x1438 <udd_ep_get_job>
    1562:	ec 01       	movw	r28, r24
    1564:	1b 2d       	mov	r17, r11
    1566:	11 1f       	adc	r17, r17
    1568:	11 27       	eor	r17, r17
    156a:	11 1f       	adc	r17, r17
    156c:	8b 2d       	mov	r24, r11
    156e:	8f 70       	andi	r24, 0x0F	; 15
    1570:	e8 2e       	mov	r14, r24
    1572:	f1 2c       	mov	r15, r1
    1574:	ee 0c       	add	r14, r14
    1576:	ff 1c       	adc	r15, r15
    1578:	e1 0e       	add	r14, r17
    157a:	f1 1c       	adc	r15, r1
    157c:	c7 01       	movw	r24, r14
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	9c 01       	movw	r18, r24
    158c:	20 54       	subi	r18, 0x40	; 64
    158e:	3d 4d       	sbci	r19, 0xDD	; 221
    1590:	79 01       	movw	r14, r18
    1592:	c9 01       	movw	r24, r18
    1594:	2c df       	rcall	.-424    	; 0x13ee <udd_ep_get_size>
    1596:	6c 01       	movw	r12, r24
    1598:	11 23       	and	r17, r17
    159a:	09 f4       	brne	.+2      	; 0x159e <udd_ep_trans_complet+0x52>
    159c:	5b c0       	rjmp	.+182    	; 0x1654 <udd_ep_trans_complet+0x108>
    159e:	d7 01       	movw	r26, r14
    15a0:	16 96       	adiw	r26, 0x06	; 6
    15a2:	2d 91       	ld	r18, X+
    15a4:	3c 91       	ld	r19, X
    15a6:	17 97       	sbiw	r26, 0x07	; 7
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	9e 81       	ldd	r25, Y+6	; 0x06
    15ac:	28 0f       	add	r18, r24
    15ae:	39 1f       	adc	r19, r25
    15b0:	2d 83       	std	Y+5, r18	; 0x05
    15b2:	3e 83       	std	Y+6, r19	; 0x06
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	28 17       	cp	r18, r24
    15ba:	39 07       	cpc	r19, r25
    15bc:	c9 f1       	breq	.+114    	; 0x1630 <udd_ep_trans_complet+0xe4>
    15be:	fc 01       	movw	r30, r24
    15c0:	e2 1b       	sub	r30, r18
    15c2:	f3 0b       	sbc	r31, r19
    15c4:	9f 01       	movw	r18, r30
    15c6:	21 15       	cp	r18, r1
    15c8:	f4 e0       	ldi	r31, 0x04	; 4
    15ca:	3f 07       	cpc	r19, r31
    15cc:	40 f0       	brcs	.+16     	; 0x15de <udd_ep_trans_complet+0x92>
    15ce:	2f ef       	ldi	r18, 0xFF	; 255
    15d0:	33 e0       	ldi	r19, 0x03	; 3
    15d2:	c9 01       	movw	r24, r18
    15d4:	b6 01       	movw	r22, r12
    15d6:	0e 94 8e 14 	call	0x291c	; 0x291c <__udivmodhi4>
    15da:	28 1b       	sub	r18, r24
    15dc:	39 0b       	sbc	r19, r25
    15de:	88 81       	ld	r24, Y
    15e0:	81 ff       	sbrs	r24, 1
    15e2:	0a c0       	rjmp	.+20     	; 0x15f8 <udd_ep_trans_complet+0xac>
    15e4:	c9 01       	movw	r24, r18
    15e6:	b6 01       	movw	r22, r12
    15e8:	0e 94 8e 14 	call	0x291c	; 0x291c <__udivmodhi4>
    15ec:	41 e0       	ldi	r20, 0x01	; 1
    15ee:	89 2b       	or	r24, r25
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <udd_ep_trans_complet+0xa8>
    15f2:	40 e0       	ldi	r20, 0x00	; 0
    15f4:	94 2f       	mov	r25, r20
    15f6:	01 c0       	rjmp	.+2      	; 0x15fa <udd_ep_trans_complet+0xae>
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	88 81       	ld	r24, Y
    15fc:	90 fb       	bst	r25, 0
    15fe:	81 f9       	bld	r24, 1
    1600:	88 83       	st	Y, r24
    1602:	d7 01       	movw	r26, r14
    1604:	16 96       	adiw	r26, 0x06	; 6
    1606:	1d 92       	st	X+, r1
    1608:	1c 92       	st	X, r1
    160a:	17 97       	sbiw	r26, 0x07	; 7
    160c:	12 96       	adiw	r26, 0x02	; 2
    160e:	2d 93       	st	X+, r18
    1610:	3c 93       	st	X, r19
    1612:	13 97       	sbiw	r26, 0x03	; 3
    1614:	29 81       	ldd	r18, Y+1	; 0x01
    1616:	3a 81       	ldd	r19, Y+2	; 0x02
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	82 0f       	add	r24, r18
    161e:	93 1f       	adc	r25, r19
    1620:	14 96       	adiw	r26, 0x04	; 4
    1622:	8d 93       	st	X+, r24
    1624:	9c 93       	st	X, r25
    1626:	15 97       	sbiw	r26, 0x05	; 5
    1628:	f7 01       	movw	r30, r14
    162a:	02 e0       	ldi	r16, 0x02	; 2
    162c:	06 93       	lac	Z, r16
    162e:	98 c0       	rjmp	.+304    	; 0x1760 <udd_ep_trans_complet+0x214>
    1630:	88 81       	ld	r24, Y
    1632:	81 ff       	sbrs	r24, 1
    1634:	87 c0       	rjmp	.+270    	; 0x1744 <udd_ep_trans_complet+0x1f8>
    1636:	8d 7f       	andi	r24, 0xFD	; 253
    1638:	88 83       	st	Y, r24
    163a:	d7 01       	movw	r26, r14
    163c:	16 96       	adiw	r26, 0x06	; 6
    163e:	1d 92       	st	X+, r1
    1640:	1c 92       	st	X, r1
    1642:	17 97       	sbiw	r26, 0x07	; 7
    1644:	12 96       	adiw	r26, 0x02	; 2
    1646:	1d 92       	st	X+, r1
    1648:	1c 92       	st	X, r1
    164a:	13 97       	sbiw	r26, 0x03	; 3
    164c:	f7 01       	movw	r30, r14
    164e:	02 e0       	ldi	r16, 0x02	; 2
    1650:	06 93       	lac	Z, r16
    1652:	86 c0       	rjmp	.+268    	; 0x1760 <udd_ep_trans_complet+0x214>
    1654:	d7 01       	movw	r26, r14
    1656:	12 96       	adiw	r26, 0x02	; 2
    1658:	0d 91       	ld	r16, X+
    165a:	1c 91       	ld	r17, X
    165c:	13 97       	sbiw	r26, 0x03	; 3
    165e:	88 81       	ld	r24, Y
    1660:	82 ff       	sbrs	r24, 2
    1662:	15 c0       	rjmp	.+42     	; 0x168e <udd_ep_trans_complet+0x142>
    1664:	e9 81       	ldd	r30, Y+1	; 0x01
    1666:	fa 81       	ldd	r31, Y+2	; 0x02
    1668:	2d 81       	ldd	r18, Y+5	; 0x05
    166a:	3e 81       	ldd	r19, Y+6	; 0x06
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	b6 01       	movw	r22, r12
    1672:	0e 94 8e 14 	call	0x291c	; 0x291c <__udivmodhi4>
    1676:	b0 e4       	ldi	r27, 0x40	; 64
    1678:	bb 9e       	mul	r11, r27
    167a:	b0 01       	movw	r22, r0
    167c:	11 24       	eor	r1, r1
    167e:	66 57       	subi	r22, 0x76	; 118
    1680:	7e 4d       	sbci	r23, 0xDE	; 222
    1682:	ac 01       	movw	r20, r24
    1684:	cf 01       	movw	r24, r30
    1686:	82 0f       	add	r24, r18
    1688:	93 1f       	adc	r25, r19
    168a:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <memcpy>
    168e:	2d 81       	ldd	r18, Y+5	; 0x05
    1690:	3e 81       	ldd	r19, Y+6	; 0x06
    1692:	20 0f       	add	r18, r16
    1694:	31 1f       	adc	r19, r17
    1696:	2d 83       	std	Y+5, r18	; 0x05
    1698:	3e 83       	std	Y+6, r19	; 0x06
    169a:	eb 81       	ldd	r30, Y+3	; 0x03
    169c:	fc 81       	ldd	r31, Y+4	; 0x04
    169e:	e2 17       	cp	r30, r18
    16a0:	f3 07       	cpc	r31, r19
    16a2:	10 f4       	brcc	.+4      	; 0x16a8 <udd_ep_trans_complet+0x15c>
    16a4:	ed 83       	std	Y+5, r30	; 0x05
    16a6:	fe 83       	std	Y+6, r31	; 0x06
    16a8:	d7 01       	movw	r26, r14
    16aa:	16 96       	adiw	r26, 0x06	; 6
    16ac:	8d 91       	ld	r24, X+
    16ae:	9c 91       	ld	r25, X
    16b0:	17 97       	sbiw	r26, 0x07	; 7
    16b2:	80 17       	cp	r24, r16
    16b4:	91 07       	cpc	r25, r17
    16b6:	09 f0       	breq	.+2      	; 0x16ba <udd_ep_trans_complet+0x16e>
    16b8:	45 c0       	rjmp	.+138    	; 0x1744 <udd_ep_trans_complet+0x1f8>
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	e8 17       	cp	r30, r24
    16c0:	f9 07       	cpc	r31, r25
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <udd_ep_trans_complet+0x17a>
    16c4:	3f c0       	rjmp	.+126    	; 0x1744 <udd_ep_trans_complet+0x1f8>
    16c6:	e8 1b       	sub	r30, r24
    16c8:	f9 0b       	sbc	r31, r25
    16ca:	e1 15       	cp	r30, r1
    16cc:	b4 e0       	ldi	r27, 0x04	; 4
    16ce:	fb 07       	cpc	r31, r27
    16d0:	48 f0       	brcs	.+18     	; 0x16e4 <udd_ep_trans_complet+0x198>
    16d2:	ef ef       	ldi	r30, 0xFF	; 255
    16d4:	f3 e0       	ldi	r31, 0x03	; 3
    16d6:	cf 01       	movw	r24, r30
    16d8:	b6 01       	movw	r22, r12
    16da:	0e 94 8e 14 	call	0x291c	; 0x291c <__udivmodhi4>
    16de:	e8 1b       	sub	r30, r24
    16e0:	f9 0b       	sbc	r31, r25
    16e2:	06 c0       	rjmp	.+12     	; 0x16f0 <udd_ep_trans_complet+0x1a4>
    16e4:	cf 01       	movw	r24, r30
    16e6:	b6 01       	movw	r22, r12
    16e8:	0e 94 8e 14 	call	0x291c	; 0x291c <__udivmodhi4>
    16ec:	e8 1b       	sub	r30, r24
    16ee:	f9 0b       	sbc	r31, r25
    16f0:	d7 01       	movw	r26, r14
    16f2:	12 96       	adiw	r26, 0x02	; 2
    16f4:	1d 92       	st	X+, r1
    16f6:	1c 92       	st	X, r1
    16f8:	13 97       	sbiw	r26, 0x03	; 3
    16fa:	ec 15       	cp	r30, r12
    16fc:	fd 05       	cpc	r31, r13
    16fe:	78 f4       	brcc	.+30     	; 0x171e <udd_ep_trans_complet+0x1d2>
    1700:	88 81       	ld	r24, Y
    1702:	84 60       	ori	r24, 0x04	; 4
    1704:	88 83       	st	Y, r24
    1706:	b0 e4       	ldi	r27, 0x40	; 64
    1708:	bb 9e       	mul	r11, r27
    170a:	c0 01       	movw	r24, r0
    170c:	11 24       	eor	r1, r1
    170e:	86 57       	subi	r24, 0x76	; 118
    1710:	9e 4d       	sbci	r25, 0xDE	; 222
    1712:	f7 01       	movw	r30, r14
    1714:	84 83       	std	Z+4, r24	; 0x04
    1716:	95 83       	std	Z+5, r25	; 0x05
    1718:	c6 82       	std	Z+6, r12	; 0x06
    171a:	d7 82       	std	Z+7, r13	; 0x07
    171c:	0f c0       	rjmp	.+30     	; 0x173c <udd_ep_trans_complet+0x1f0>
    171e:	29 81       	ldd	r18, Y+1	; 0x01
    1720:	3a 81       	ldd	r19, Y+2	; 0x02
    1722:	8d 81       	ldd	r24, Y+5	; 0x05
    1724:	9e 81       	ldd	r25, Y+6	; 0x06
    1726:	82 0f       	add	r24, r18
    1728:	93 1f       	adc	r25, r19
    172a:	d7 01       	movw	r26, r14
    172c:	14 96       	adiw	r26, 0x04	; 4
    172e:	8d 93       	st	X+, r24
    1730:	9c 93       	st	X, r25
    1732:	15 97       	sbiw	r26, 0x05	; 5
    1734:	16 96       	adiw	r26, 0x06	; 6
    1736:	ed 93       	st	X+, r30
    1738:	fc 93       	st	X, r31
    173a:	17 97       	sbiw	r26, 0x07	; 7
    173c:	f7 01       	movw	r30, r14
    173e:	02 e0       	ldi	r16, 0x02	; 2
    1740:	06 93       	lac	Z, r16
    1742:	0e c0       	rjmp	.+28     	; 0x1760 <udd_ep_trans_complet+0x214>
    1744:	88 81       	ld	r24, Y
    1746:	80 ff       	sbrs	r24, 0
    1748:	0b c0       	rjmp	.+22     	; 0x1760 <udd_ep_trans_complet+0x214>
    174a:	8e 7f       	andi	r24, 0xFE	; 254
    174c:	88 83       	st	Y, r24
    174e:	ef 81       	ldd	r30, Y+7	; 0x07
    1750:	f8 85       	ldd	r31, Y+8	; 0x08
    1752:	30 97       	sbiw	r30, 0x00	; 0
    1754:	29 f0       	breq	.+10     	; 0x1760 <udd_ep_trans_complet+0x214>
    1756:	6d 81       	ldd	r22, Y+5	; 0x05
    1758:	7e 81       	ldd	r23, Y+6	; 0x06
    175a:	4b 2d       	mov	r20, r11
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	09 95       	icall
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	ff 90       	pop	r15
    176a:	ef 90       	pop	r14
    176c:	df 90       	pop	r13
    176e:	cf 90       	pop	r12
    1770:	bf 90       	pop	r11
    1772:	08 95       	ret

00001774 <udd_is_high_speed>:
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	08 95       	ret

00001778 <udd_set_address>:
    1778:	80 93 c3 04 	sts	0x04C3, r24
    177c:	08 95       	ret

0000177e <udd_getaddress>:
    177e:	80 91 c3 04 	lds	r24, 0x04C3
    1782:	08 95       	ret

00001784 <udd_get_frame_number>:
    1784:	80 91 f0 22 	lds	r24, 0x22F0
    1788:	90 91 f1 22 	lds	r25, 0x22F1
    178c:	08 95       	ret

0000178e <udd_get_micro_frame_number>:
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	08 95       	ret

00001794 <udd_set_setup_payload>:
    1794:	80 93 ff 22 	sts	0x22FF, r24
    1798:	90 93 00 23 	sts	0x2300, r25
    179c:	60 93 01 23 	sts	0x2301, r22
    17a0:	70 93 02 23 	sts	0x2302, r23
    17a4:	08 95       	ret

000017a6 <udd_ep_alloc>:
    17a6:	e8 2f       	mov	r30, r24
    17a8:	ef 70       	andi	r30, 0x0F	; 15
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	ee 0f       	add	r30, r30
    17ae:	ff 1f       	adc	r31, r31
    17b0:	99 27       	eor	r25, r25
    17b2:	87 fd       	sbrc	r24, 7
    17b4:	90 95       	com	r25
    17b6:	88 27       	eor	r24, r24
    17b8:	99 0f       	add	r25, r25
    17ba:	88 1f       	adc	r24, r24
    17bc:	99 27       	eor	r25, r25
    17be:	e8 0f       	add	r30, r24
    17c0:	f9 1f       	adc	r31, r25
    17c2:	ee 0f       	add	r30, r30
    17c4:	ff 1f       	adc	r31, r31
    17c6:	ee 0f       	add	r30, r30
    17c8:	ff 1f       	adc	r31, r31
    17ca:	ee 0f       	add	r30, r30
    17cc:	ff 1f       	adc	r31, r31
    17ce:	e0 54       	subi	r30, 0x40	; 64
    17d0:	fd 4d       	sbci	r31, 0xDD	; 221
    17d2:	81 81       	ldd	r24, Z+1	; 0x01
    17d4:	80 7c       	andi	r24, 0xC0	; 192
    17d6:	09 f0       	breq	.+2      	; 0x17da <udd_ep_alloc+0x34>
    17d8:	43 c0       	rjmp	.+134    	; 0x1860 <udd_ep_alloc+0xba>
    17da:	63 70       	andi	r22, 0x03	; 3
    17dc:	61 30       	cpi	r22, 0x01	; 1
    17de:	29 f0       	breq	.+10     	; 0x17ea <udd_ep_alloc+0x44>
    17e0:	10 f4       	brcc	.+4      	; 0x17e6 <udd_ep_alloc+0x40>
    17e2:	80 e4       	ldi	r24, 0x40	; 64
    17e4:	03 c0       	rjmp	.+6      	; 0x17ec <udd_ep_alloc+0x46>
    17e6:	80 e8       	ldi	r24, 0x80	; 128
    17e8:	01 c0       	rjmp	.+2      	; 0x17ec <udd_ep_alloc+0x46>
    17ea:	80 ec       	ldi	r24, 0xC0	; 192
    17ec:	40 38       	cpi	r20, 0x80	; 128
    17ee:	51 05       	cpc	r21, r1
    17f0:	e1 f0       	breq	.+56     	; 0x182a <udd_ep_alloc+0x84>
    17f2:	50 f4       	brcc	.+20     	; 0x1808 <udd_ep_alloc+0x62>
    17f4:	40 32       	cpi	r20, 0x20	; 32
    17f6:	51 05       	cpc	r21, r1
    17f8:	a1 f0       	breq	.+40     	; 0x1822 <udd_ep_alloc+0x7c>
    17fa:	40 34       	cpi	r20, 0x40	; 64
    17fc:	51 05       	cpc	r21, r1
    17fe:	99 f0       	breq	.+38     	; 0x1826 <udd_ep_alloc+0x80>
    1800:	40 31       	cpi	r20, 0x10	; 16
    1802:	51 05       	cpc	r21, r1
    1804:	61 f4       	brne	.+24     	; 0x181e <udd_ep_alloc+0x78>
    1806:	19 c0       	rjmp	.+50     	; 0x183a <udd_ep_alloc+0x94>
    1808:	41 15       	cp	r20, r1
    180a:	92 e0       	ldi	r25, 0x02	; 2
    180c:	59 07       	cpc	r21, r25
    180e:	89 f0       	breq	.+34     	; 0x1832 <udd_ep_alloc+0x8c>
    1810:	4f 3f       	cpi	r20, 0xFF	; 255
    1812:	93 e0       	ldi	r25, 0x03	; 3
    1814:	59 07       	cpc	r21, r25
    1816:	79 f0       	breq	.+30     	; 0x1836 <udd_ep_alloc+0x90>
    1818:	41 15       	cp	r20, r1
    181a:	51 40       	sbci	r21, 0x01	; 1
    181c:	41 f0       	breq	.+16     	; 0x182e <udd_ep_alloc+0x88>
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	0d c0       	rjmp	.+26     	; 0x183c <udd_ep_alloc+0x96>
    1822:	22 e0       	ldi	r18, 0x02	; 2
    1824:	0b c0       	rjmp	.+22     	; 0x183c <udd_ep_alloc+0x96>
    1826:	23 e0       	ldi	r18, 0x03	; 3
    1828:	09 c0       	rjmp	.+18     	; 0x183c <udd_ep_alloc+0x96>
    182a:	24 e0       	ldi	r18, 0x04	; 4
    182c:	07 c0       	rjmp	.+14     	; 0x183c <udd_ep_alloc+0x96>
    182e:	25 e0       	ldi	r18, 0x05	; 5
    1830:	05 c0       	rjmp	.+10     	; 0x183c <udd_ep_alloc+0x96>
    1832:	26 e0       	ldi	r18, 0x06	; 6
    1834:	03 c0       	rjmp	.+6      	; 0x183c <udd_ep_alloc+0x96>
    1836:	27 e0       	ldi	r18, 0x07	; 7
    1838:	01 c0       	rjmp	.+2      	; 0x183c <udd_ep_alloc+0x96>
    183a:	21 e0       	ldi	r18, 0x01	; 1
    183c:	11 82       	std	Z+1, r1	; 0x01
    183e:	96 e0       	ldi	r25, 0x06	; 6
    1840:	90 83       	st	Z, r25
    1842:	82 2b       	or	r24, r18
    1844:	81 83       	std	Z+1, r24	; 0x01
    1846:	81 81       	ldd	r24, Z+1	; 0x01
    1848:	80 7c       	andi	r24, 0xC0	; 192
    184a:	80 3c       	cpi	r24, 0xC0	; 192
    184c:	21 f4       	brne	.+8      	; 0x1856 <udd_ep_alloc+0xb0>
    184e:	81 81       	ldd	r24, Z+1	; 0x01
    1850:	87 70       	andi	r24, 0x07	; 7
    1852:	87 30       	cpi	r24, 0x07	; 7
    1854:	39 f0       	breq	.+14     	; 0x1864 <udd_ep_alloc+0xbe>
    1856:	81 81       	ldd	r24, Z+1	; 0x01
    1858:	80 62       	ori	r24, 0x20	; 32
    185a:	81 83       	std	Z+1, r24	; 0x01
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	08 95       	ret
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	08 95       	ret
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	08 95       	ret

00001868 <udd_ep_is_halted>:
    1868:	e8 2f       	mov	r30, r24
    186a:	ef 70       	andi	r30, 0x0F	; 15
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	ee 0f       	add	r30, r30
    1870:	ff 1f       	adc	r31, r31
    1872:	99 27       	eor	r25, r25
    1874:	87 fd       	sbrc	r24, 7
    1876:	90 95       	com	r25
    1878:	88 27       	eor	r24, r24
    187a:	99 0f       	add	r25, r25
    187c:	88 1f       	adc	r24, r24
    187e:	99 27       	eor	r25, r25
    1880:	e8 0f       	add	r30, r24
    1882:	f9 1f       	adc	r31, r25
    1884:	ee 0f       	add	r30, r30
    1886:	ff 1f       	adc	r31, r31
    1888:	ee 0f       	add	r30, r30
    188a:	ff 1f       	adc	r31, r31
    188c:	ee 0f       	add	r30, r30
    188e:	ff 1f       	adc	r31, r31
    1890:	e0 54       	subi	r30, 0x40	; 64
    1892:	fd 4d       	sbci	r31, 0xDD	; 221
    1894:	81 81       	ldd	r24, Z+1	; 0x01
    1896:	82 fb       	bst	r24, 2
    1898:	88 27       	eor	r24, r24
    189a:	80 f9       	bld	r24, 0
    189c:	08 95       	ret

0000189e <udd_ep_clear_halt>:
    189e:	e8 2f       	mov	r30, r24
    18a0:	ef 70       	andi	r30, 0x0F	; 15
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	ee 0f       	add	r30, r30
    18a6:	ff 1f       	adc	r31, r31
    18a8:	28 2f       	mov	r18, r24
    18aa:	33 27       	eor	r19, r19
    18ac:	27 fd       	sbrc	r18, 7
    18ae:	30 95       	com	r19
    18b0:	22 27       	eor	r18, r18
    18b2:	33 0f       	add	r19, r19
    18b4:	22 1f       	adc	r18, r18
    18b6:	33 27       	eor	r19, r19
    18b8:	e2 0f       	add	r30, r18
    18ba:	f3 1f       	adc	r31, r19
    18bc:	ee 0f       	add	r30, r30
    18be:	ff 1f       	adc	r31, r31
    18c0:	ee 0f       	add	r30, r30
    18c2:	ff 1f       	adc	r31, r31
    18c4:	ee 0f       	add	r30, r30
    18c6:	ff 1f       	adc	r31, r31
    18c8:	e0 54       	subi	r30, 0x40	; 64
    18ca:	fd 4d       	sbci	r31, 0xDD	; 221
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	92 ff       	sbrs	r25, 2
    18d0:	0e c0       	rjmp	.+28     	; 0x18ee <udd_ep_clear_halt+0x50>
    18d2:	91 81       	ldd	r25, Z+1	; 0x01
    18d4:	9b 7f       	andi	r25, 0xFB	; 251
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	af dd       	rcall	.-1186   	; 0x1438 <udd_ep_get_job>
    18da:	fc 01       	movw	r30, r24
    18dc:	80 81       	ld	r24, Z
    18de:	80 ff       	sbrs	r24, 0
    18e0:	06 c0       	rjmp	.+12     	; 0x18ee <udd_ep_clear_halt+0x50>
    18e2:	8e 7f       	andi	r24, 0xFE	; 254
    18e4:	80 83       	st	Z, r24
    18e6:	07 80       	ldd	r0, Z+7	; 0x07
    18e8:	f0 85       	ldd	r31, Z+8	; 0x08
    18ea:	e0 2d       	mov	r30, r0
    18ec:	09 95       	icall
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	08 95       	ret

000018f2 <udd_ep_run>:
    18f2:	7f 92       	push	r7
    18f4:	8f 92       	push	r8
    18f6:	9f 92       	push	r9
    18f8:	af 92       	push	r10
    18fa:	bf 92       	push	r11
    18fc:	cf 92       	push	r12
    18fe:	df 92       	push	r13
    1900:	ef 92       	push	r14
    1902:	ff 92       	push	r15
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	98 2e       	mov	r9, r24
    190e:	86 2e       	mov	r8, r22
    1910:	5a 01       	movw	r10, r20
    1912:	69 01       	movw	r12, r18
    1914:	91 dd       	rcall	.-1246   	; 0x1438 <udd_ep_get_job>
    1916:	7c 01       	movw	r14, r24
    1918:	79 2c       	mov	r7, r9
    191a:	77 1c       	adc	r7, r7
    191c:	77 24       	eor	r7, r7
    191e:	77 1c       	adc	r7, r7
    1920:	c9 2d       	mov	r28, r9
    1922:	cf 70       	andi	r28, 0x0F	; 15
    1924:	d0 e0       	ldi	r29, 0x00	; 0
    1926:	cc 0f       	add	r28, r28
    1928:	dd 1f       	adc	r29, r29
    192a:	c7 0d       	add	r28, r7
    192c:	d1 1d       	adc	r29, r1
    192e:	cc 0f       	add	r28, r28
    1930:	dd 1f       	adc	r29, r29
    1932:	cc 0f       	add	r28, r28
    1934:	dd 1f       	adc	r29, r29
    1936:	cc 0f       	add	r28, r28
    1938:	dd 1f       	adc	r29, r29
    193a:	c0 54       	subi	r28, 0x40	; 64
    193c:	dd 4d       	sbci	r29, 0xDD	; 221
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	80 7c       	andi	r24, 0xC0	; 192
    1942:	09 f4       	brne	.+2      	; 0x1946 <udd_ep_run+0x54>
    1944:	4b c0       	rjmp	.+150    	; 0x19dc <udd_ep_run+0xea>
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	80 7c       	andi	r24, 0xC0	; 192
    194a:	80 3c       	cpi	r24, 0xC0	; 192
    194c:	19 f0       	breq	.+6      	; 0x1954 <udd_ep_run+0x62>
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	82 fd       	sbrc	r24, 2
    1952:	46 c0       	rjmp	.+140    	; 0x19e0 <udd_ep_run+0xee>
    1954:	8f b7       	in	r24, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	f7 01       	movw	r30, r14
    195a:	90 81       	ld	r25, Z
    195c:	90 ff       	sbrs	r25, 0
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <udd_ep_run+0x74>
    1960:	8f bf       	out	0x3f, r24	; 63
    1962:	71 2c       	mov	r7, r1
    1964:	3e c0       	rjmp	.+124    	; 0x19e2 <udd_ep_run+0xf0>
    1966:	f7 01       	movw	r30, r14
    1968:	90 81       	ld	r25, Z
    196a:	91 60       	ori	r25, 0x01	; 1
    196c:	90 83       	st	Z, r25
    196e:	8f bf       	out	0x3f, r24	; 63
    1970:	f7 01       	movw	r30, r14
    1972:	a1 82       	std	Z+1, r10	; 0x01
    1974:	b2 82       	std	Z+2, r11	; 0x02
    1976:	c3 82       	std	Z+3, r12	; 0x03
    1978:	d4 82       	std	Z+4, r13	; 0x04
    197a:	15 82       	std	Z+5, r1	; 0x05
    197c:	16 82       	std	Z+6, r1	; 0x06
    197e:	07 83       	std	Z+7, r16	; 0x07
    1980:	10 87       	std	Z+8, r17	; 0x08
    1982:	81 10       	cpse	r8, r1
    1984:	06 c0       	rjmp	.+12     	; 0x1992 <udd_ep_run+0xa0>
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	c1 14       	cp	r12, r1
    198a:	d1 04       	cpc	r13, r1
    198c:	19 f0       	breq	.+6      	; 0x1994 <udd_ep_run+0xa2>
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	01 c0       	rjmp	.+2      	; 0x1994 <udd_ep_run+0xa2>
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	f7 01       	movw	r30, r14
    1996:	80 81       	ld	r24, Z
    1998:	90 fb       	bst	r25, 0
    199a:	81 f9       	bld	r24, 1
    199c:	8b 7f       	andi	r24, 0xFB	; 251
    199e:	80 83       	st	Z, r24
    19a0:	77 20       	and	r7, r7
    19a2:	19 f0       	breq	.+6      	; 0x19aa <udd_ep_run+0xb8>
    19a4:	1e 82       	std	Y+6, r1	; 0x06
    19a6:	1f 82       	std	Y+7, r1	; 0x07
    19a8:	14 c0       	rjmp	.+40     	; 0x19d2 <udd_ep_run+0xe0>
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	80 7c       	andi	r24, 0xC0	; 192
    19ae:	80 3c       	cpi	r24, 0xC0	; 192
    19b0:	61 f4       	brne	.+24     	; 0x19ca <udd_ep_run+0xd8>
    19b2:	ce 01       	movw	r24, r28
    19b4:	1c dd       	rcall	.-1480   	; 0x13ee <udd_ep_get_size>
    19b6:	bc 01       	movw	r22, r24
    19b8:	c6 01       	movw	r24, r12
    19ba:	b0 d7       	rcall	.+3936   	; 0x291c <__udivmodhi4>
    19bc:	89 2b       	or	r24, r25
    19be:	29 f0       	breq	.+10     	; 0x19ca <udd_ep_run+0xd8>
    19c0:	f7 01       	movw	r30, r14
    19c2:	80 81       	ld	r24, Z
    19c4:	8e 7f       	andi	r24, 0xFE	; 254
    19c6:	80 83       	st	Z, r24
    19c8:	0c c0       	rjmp	.+24     	; 0x19e2 <udd_ep_run+0xf0>
    19ca:	1a 82       	std	Y+2, r1	; 0x02
    19cc:	1b 82       	std	Y+3, r1	; 0x03
    19ce:	1e 82       	std	Y+6, r1	; 0x06
    19d0:	1f 82       	std	Y+7, r1	; 0x07
    19d2:	89 2d       	mov	r24, r9
    19d4:	bb dd       	rcall	.-1162   	; 0x154c <udd_ep_trans_complet>
    19d6:	77 24       	eor	r7, r7
    19d8:	73 94       	inc	r7
    19da:	03 c0       	rjmp	.+6      	; 0x19e2 <udd_ep_run+0xf0>
    19dc:	71 2c       	mov	r7, r1
    19de:	01 c0       	rjmp	.+2      	; 0x19e2 <udd_ep_run+0xf0>
    19e0:	71 2c       	mov	r7, r1
    19e2:	87 2d       	mov	r24, r7
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	1f 91       	pop	r17
    19ea:	0f 91       	pop	r16
    19ec:	ff 90       	pop	r15
    19ee:	ef 90       	pop	r14
    19f0:	df 90       	pop	r13
    19f2:	cf 90       	pop	r12
    19f4:	bf 90       	pop	r11
    19f6:	af 90       	pop	r10
    19f8:	9f 90       	pop	r9
    19fa:	8f 90       	pop	r8
    19fc:	7f 90       	pop	r7
    19fe:	08 95       	ret

00001a00 <udd_ep_abort>:
    1a00:	ff 92       	push	r15
    1a02:	0f 93       	push	r16
    1a04:	1f 93       	push	r17
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	18 2f       	mov	r17, r24
    1a0c:	f8 2e       	mov	r15, r24
    1a0e:	ff 1c       	adc	r15, r15
    1a10:	ff 24       	eor	r15, r15
    1a12:	ff 1c       	adc	r15, r15
    1a14:	c8 2f       	mov	r28, r24
    1a16:	cf 70       	andi	r28, 0x0F	; 15
    1a18:	d0 e0       	ldi	r29, 0x00	; 0
    1a1a:	cc 0f       	add	r28, r28
    1a1c:	dd 1f       	adc	r29, r29
    1a1e:	cf 0d       	add	r28, r15
    1a20:	d1 1d       	adc	r29, r1
    1a22:	cc 0f       	add	r28, r28
    1a24:	dd 1f       	adc	r29, r29
    1a26:	cc 0f       	add	r28, r28
    1a28:	dd 1f       	adc	r29, r29
    1a2a:	cc 0f       	add	r28, r28
    1a2c:	dd 1f       	adc	r29, r29
    1a2e:	c0 54       	subi	r28, 0x40	; 64
    1a30:	dd 4d       	sbci	r29, 0xDD	; 221
    1a32:	02 dd       	rcall	.-1532   	; 0x1438 <udd_ep_get_job>
    1a34:	dc 01       	movw	r26, r24
    1a36:	fe 01       	movw	r30, r28
    1a38:	02 e0       	ldi	r16, 0x02	; 2
    1a3a:	05 93       	las	Z, r16
    1a3c:	8c 91       	ld	r24, X
    1a3e:	80 ff       	sbrs	r24, 0
    1a40:	12 c0       	rjmp	.+36     	; 0x1a66 <udd_ep_abort+0x66>
    1a42:	8e 7f       	andi	r24, 0xFE	; 254
    1a44:	8c 93       	st	X, r24
    1a46:	17 96       	adiw	r26, 0x07	; 7
    1a48:	ed 91       	ld	r30, X+
    1a4a:	fc 91       	ld	r31, X
    1a4c:	18 97       	sbiw	r26, 0x08	; 8
    1a4e:	30 97       	sbiw	r30, 0x00	; 0
    1a50:	51 f0       	breq	.+20     	; 0x1a66 <udd_ep_abort+0x66>
    1a52:	ff 20       	and	r15, r15
    1a54:	19 f0       	breq	.+6      	; 0x1a5c <udd_ep_abort+0x5c>
    1a56:	6e 81       	ldd	r22, Y+6	; 0x06
    1a58:	7f 81       	ldd	r23, Y+7	; 0x07
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <udd_ep_abort+0x60>
    1a5c:	6a 81       	ldd	r22, Y+2	; 0x02
    1a5e:	7b 81       	ldd	r23, Y+3	; 0x03
    1a60:	41 2f       	mov	r20, r17
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	09 95       	icall
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	1f 91       	pop	r17
    1a6c:	0f 91       	pop	r16
    1a6e:	ff 90       	pop	r15
    1a70:	08 95       	ret

00001a72 <udd_ep_free>:
    1a72:	cf 93       	push	r28
    1a74:	c8 2f       	mov	r28, r24
    1a76:	c4 df       	rcall	.-120    	; 0x1a00 <udd_ep_abort>
    1a78:	ec 2f       	mov	r30, r28
    1a7a:	ef 70       	andi	r30, 0x0F	; 15
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	ee 0f       	add	r30, r30
    1a80:	ff 1f       	adc	r31, r31
    1a82:	8c 2f       	mov	r24, r28
    1a84:	99 27       	eor	r25, r25
    1a86:	87 fd       	sbrc	r24, 7
    1a88:	90 95       	com	r25
    1a8a:	88 27       	eor	r24, r24
    1a8c:	99 0f       	add	r25, r25
    1a8e:	88 1f       	adc	r24, r24
    1a90:	99 27       	eor	r25, r25
    1a92:	e8 0f       	add	r30, r24
    1a94:	f9 1f       	adc	r31, r25
    1a96:	ee 0f       	add	r30, r30
    1a98:	ff 1f       	adc	r31, r31
    1a9a:	ee 0f       	add	r30, r30
    1a9c:	ff 1f       	adc	r31, r31
    1a9e:	ee 0f       	add	r30, r30
    1aa0:	ff 1f       	adc	r31, r31
    1aa2:	e0 54       	subi	r30, 0x40	; 64
    1aa4:	fd 4d       	sbci	r31, 0xDD	; 221
    1aa6:	11 82       	std	Z+1, r1	; 0x01
    1aa8:	cf 91       	pop	r28
    1aaa:	08 95       	ret

00001aac <udd_ep_set_halt>:
    1aac:	0f 93       	push	r16
    1aae:	e8 2f       	mov	r30, r24
    1ab0:	ef 70       	andi	r30, 0x0F	; 15
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	ee 0f       	add	r30, r30
    1ab6:	ff 1f       	adc	r31, r31
    1ab8:	28 2f       	mov	r18, r24
    1aba:	33 27       	eor	r19, r19
    1abc:	27 fd       	sbrc	r18, 7
    1abe:	30 95       	com	r19
    1ac0:	22 27       	eor	r18, r18
    1ac2:	33 0f       	add	r19, r19
    1ac4:	22 1f       	adc	r18, r18
    1ac6:	33 27       	eor	r19, r19
    1ac8:	e2 0f       	add	r30, r18
    1aca:	f3 1f       	adc	r31, r19
    1acc:	ee 0f       	add	r30, r30
    1ace:	ff 1f       	adc	r31, r31
    1ad0:	ee 0f       	add	r30, r30
    1ad2:	ff 1f       	adc	r31, r31
    1ad4:	ee 0f       	add	r30, r30
    1ad6:	ff 1f       	adc	r31, r31
    1ad8:	e0 54       	subi	r30, 0x40	; 64
    1ada:	fd 4d       	sbci	r31, 0xDD	; 221
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	94 60       	ori	r25, 0x04	; 4
    1ae0:	91 83       	std	Z+1, r25	; 0x01
    1ae2:	01 e0       	ldi	r16, 0x01	; 1
    1ae4:	06 93       	lac	Z, r16
    1ae6:	8c df       	rcall	.-232    	; 0x1a00 <udd_ep_abort>
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	0f 91       	pop	r16
    1aec:	08 95       	ret

00001aee <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1aee:	1f 92       	push	r1
    1af0:	0f 92       	push	r0
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	0f 92       	push	r0
    1af6:	11 24       	eor	r1, r1
    1af8:	0f 93       	push	r16
    1afa:	2f 93       	push	r18
    1afc:	3f 93       	push	r19
    1afe:	4f 93       	push	r20
    1b00:	5f 93       	push	r21
    1b02:	6f 93       	push	r22
    1b04:	7f 93       	push	r23
    1b06:	8f 93       	push	r24
    1b08:	9f 93       	push	r25
    1b0a:	af 93       	push	r26
    1b0c:	bf 93       	push	r27
    1b0e:	ef 93       	push	r30
    1b10:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1b12:	80 91 cb 04 	lds	r24, 0x04CB
    1b16:	88 23       	and	r24, r24
    1b18:	34 f4       	brge	.+12     	; 0x1b26 <__vector_125+0x38>
		udd_ack_start_of_frame_event();
    1b1a:	80 e8       	ldi	r24, 0x80	; 128
    1b1c:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    1b20:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1b24:	88 c0       	rjmp	.+272    	; 0x1c36 <__vector_125+0x148>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1b26:	80 91 cb 04 	lds	r24, 0x04CB
    1b2a:	82 ff       	sbrs	r24, 2
    1b2c:	20 c0       	rjmp	.+64     	; 0x1b6e <__vector_125+0x80>
		udd_ack_underflow_event();
    1b2e:	84 e0       	ldi	r24, 0x04	; 4
    1b30:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    1b34:	80 91 c8 22 	lds	r24, 0x22C8
    1b38:	86 ff       	sbrs	r24, 6
    1b3a:	7d c0       	rjmp	.+250    	; 0x1c36 <__vector_125+0x148>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1b3c:	80 91 cc 04 	lds	r24, 0x04CC
    1b40:	81 fd       	sbrc	r24, 1
    1b42:	79 c0       	rjmp	.+242    	; 0x1c36 <__vector_125+0x148>
    1b44:	94 dc       	rcall	.-1752   	; 0x146e <udd_ctrl_interrupt_tc_setup>
    1b46:	81 11       	cpse	r24, r1
    1b48:	76 c0       	rjmp	.+236    	; 0x1c36 <__vector_125+0x148>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1b4a:	80 91 b2 22 	lds	r24, 0x22B2
    1b4e:	81 30       	cpi	r24, 0x01	; 1
    1b50:	11 f4       	brne	.+4      	; 0x1b56 <__vector_125+0x68>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1b52:	c9 db       	rcall	.-2158   	; 0x12e6 <udd_ctrl_send_zlp_in>
    1b54:	70 c0       	rjmp	.+224    	; 0x1c36 <__vector_125+0x148>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1b56:	84 30       	cpi	r24, 0x04	; 4
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <__vector_125+0x6e>
    1b5a:	6d c0       	rjmp	.+218    	; 0x1c36 <__vector_125+0x148>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    1b5c:	e9 ec       	ldi	r30, 0xC9	; 201
    1b5e:	f2 e2       	ldi	r31, 0x22	; 34
    1b60:	04 e0       	ldi	r16, 0x04	; 4
    1b62:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1b64:	e1 ec       	ldi	r30, 0xC1	; 193
    1b66:	f2 e2       	ldi	r31, 0x22	; 34
    1b68:	04 e0       	ldi	r16, 0x04	; 4
    1b6a:	05 93       	las	Z, r16
    1b6c:	64 c0       	rjmp	.+200    	; 0x1c36 <__vector_125+0x148>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1b6e:	80 91 cb 04 	lds	r24, 0x04CB
    1b72:	81 ff       	sbrs	r24, 1
    1b74:	5b c0       	rjmp	.+182    	; 0x1c2c <__vector_125+0x13e>
		udd_ack_overflow_event();
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    1b7c:	80 91 c0 22 	lds	r24, 0x22C0
    1b80:	86 ff       	sbrs	r24, 6
    1b82:	59 c0       	rjmp	.+178    	; 0x1c36 <__vector_125+0x148>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1b84:	80 91 cc 04 	lds	r24, 0x04CC
    1b88:	81 fd       	sbrc	r24, 1
    1b8a:	55 c0       	rjmp	.+170    	; 0x1c36 <__vector_125+0x148>
    1b8c:	70 dc       	rcall	.-1824   	; 0x146e <udd_ctrl_interrupt_tc_setup>
    1b8e:	81 11       	cpse	r24, r1
    1b90:	52 c0       	rjmp	.+164    	; 0x1c36 <__vector_125+0x148>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1b92:	80 91 b2 22 	lds	r24, 0x22B2
    1b96:	82 30       	cpi	r24, 0x02	; 2
    1b98:	41 f4       	brne	.+16     	; 0x1baa <__vector_125+0xbc>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1b9a:	84 e0       	ldi	r24, 0x04	; 4
    1b9c:	80 93 b2 22 	sts	0x22B2, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    1ba0:	e0 ec       	ldi	r30, 0xC0	; 192
    1ba2:	f2 e2       	ldi	r31, 0x22	; 34
    1ba4:	02 e0       	ldi	r16, 0x02	; 2
    1ba6:	06 93       	lac	Z, r16
    1ba8:	46 c0       	rjmp	.+140    	; 0x1c36 <__vector_125+0x148>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1baa:	83 30       	cpi	r24, 0x03	; 3
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <__vector_125+0xc2>
    1bae:	43 c0       	rjmp	.+134    	; 0x1c36 <__vector_125+0x148>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1bb0:	e9 ec       	ldi	r30, 0xC9	; 201
    1bb2:	f2 e2       	ldi	r31, 0x22	; 34
    1bb4:	04 e0       	ldi	r16, 0x04	; 4
    1bb6:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1bb8:	e1 ec       	ldi	r30, 0xC1	; 193
    1bba:	f2 e2       	ldi	r31, 0x22	; 34
    1bbc:	04 e0       	ldi	r16, 0x04	; 4
    1bbe:	05 93       	las	Z, r16
    1bc0:	3a c0       	rjmp	.+116    	; 0x1c36 <__vector_125+0x148>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1bc2:	80 e1       	ldi	r24, 0x10	; 16
    1bc4:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	1a df       	rcall	.-460    	; 0x1a00 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1bcc:	81 e8       	ldi	r24, 0x81	; 129
    1bce:	18 df       	rcall	.-464    	; 0x1a00 <udd_ep_abort>
		}
#endif
		udc_reset();
    1bd0:	0e 94 33 04 	call	0x866	; 0x866 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1bd4:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1bd8:	e1 ec       	ldi	r30, 0xC1	; 193
    1bda:	f2 e2       	ldi	r31, 0x22	; 34
    1bdc:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1bde:	96 e0       	ldi	r25, 0x06	; 6
    1be0:	90 93 c0 22 	sts	0x22C0, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1be4:	83 e4       	ldi	r24, 0x43	; 67
    1be6:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1be8:	e9 ec       	ldi	r30, 0xC9	; 201
    1bea:	f2 e2       	ldi	r31, 0x22	; 34
    1bec:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1bee:	90 93 c8 22 	sts	0x22C8, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1bf2:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    1bf4:	8e e6       	ldi	r24, 0x6E	; 110
    1bf6:	92 e2       	ldi	r25, 0x22	; 34
    1bf8:	80 93 c4 22 	sts	0x22C4, r24
    1bfc:	90 93 c5 22 	sts	0x22C5, r25
		// Reset endpoint control management
		udd_ctrl_init();
    1c00:	39 db       	rcall	.-2446   	; 0x1274 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    1c02:	19 c0       	rjmp	.+50     	; 0x1c36 <__vector_125+0x148>
	}

	if (udd_is_suspend_event()) {
    1c04:	80 91 cb 04 	lds	r24, 0x04CB
    1c08:	86 ff       	sbrs	r24, 6
    1c0a:	06 c0       	rjmp	.+12     	; 0x1c18 <__vector_125+0x12a>
		udd_ack_suspend_event();
    1c0c:	80 e4       	ldi	r24, 0x40	; 64
    1c0e:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	10 db       	rcall	.-2528   	; 0x1236 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1c16:	0f c0       	rjmp	.+30     	; 0x1c36 <__vector_125+0x148>
	}

	if (udd_is_resume_event()) {
    1c18:	80 91 cb 04 	lds	r24, 0x04CB
    1c1c:	85 ff       	sbrs	r24, 5
    1c1e:	0b c0       	rjmp	.+22     	; 0x1c36 <__vector_125+0x148>
		udd_ack_resume_event();
    1c20:	80 e2       	ldi	r24, 0x20	; 32
    1c22:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	06 db       	rcall	.-2548   	; 0x1236 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1c2a:	05 c0       	rjmp	.+10     	; 0x1c36 <__vector_125+0x148>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    1c2c:	80 91 cb 04 	lds	r24, 0x04CB
    1c30:	84 ff       	sbrs	r24, 4
    1c32:	e8 cf       	rjmp	.-48     	; 0x1c04 <__vector_125+0x116>
    1c34:	c6 cf       	rjmp	.-116    	; 0x1bc2 <__vector_125+0xd4>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    1c36:	ff 91       	pop	r31
    1c38:	ef 91       	pop	r30
    1c3a:	bf 91       	pop	r27
    1c3c:	af 91       	pop	r26
    1c3e:	9f 91       	pop	r25
    1c40:	8f 91       	pop	r24
    1c42:	7f 91       	pop	r23
    1c44:	6f 91       	pop	r22
    1c46:	5f 91       	pop	r21
    1c48:	4f 91       	pop	r20
    1c4a:	3f 91       	pop	r19
    1c4c:	2f 91       	pop	r18
    1c4e:	0f 91       	pop	r16
    1c50:	0f 90       	pop	r0
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	0f 90       	pop	r0
    1c56:	1f 90       	pop	r1
    1c58:	18 95       	reti

00001c5a <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1c5a:	1f 92       	push	r1
    1c5c:	0f 92       	push	r0
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	0f 92       	push	r0
    1c62:	11 24       	eor	r1, r1
    1c64:	0f 93       	push	r16
    1c66:	1f 93       	push	r17
    1c68:	2f 93       	push	r18
    1c6a:	3f 93       	push	r19
    1c6c:	4f 93       	push	r20
    1c6e:	5f 93       	push	r21
    1c70:	6f 93       	push	r22
    1c72:	7f 93       	push	r23
    1c74:	8f 93       	push	r24
    1c76:	9f 93       	push	r25
    1c78:	af 93       	push	r26
    1c7a:	bf 93       	push	r27
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	ef 93       	push	r30
    1c82:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1c84:	80 91 cc 04 	lds	r24, 0x04CC
    1c88:	81 fd       	sbrc	r24, 1
    1c8a:	03 c0       	rjmp	.+6      	; 0x1c92 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    1c8c:	f0 db       	rcall	.-2080   	; 0x146e <udd_ctrl_interrupt_tc_setup>
    1c8e:	81 11       	cpse	r24, r1
    1c90:	b8 c0       	rjmp	.+368    	; 0x1e02 <__vector_126+0x1a8>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    1c92:	82 e0       	ldi	r24, 0x02	; 2
    1c94:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1c98:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    1c9c:	81 95       	neg	r24
    1c9e:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    1ca0:	e0 ec       	ldi	r30, 0xC0	; 192
    1ca2:	f2 e2       	ldi	r31, 0x22	; 34
    1ca4:	e8 1b       	sub	r30, r24
    1ca6:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1ca8:	20 81       	ld	r18, Z
    1caa:	31 81       	ldd	r19, Z+1	; 0x01
    1cac:	20 5c       	subi	r18, 0xC0	; 192
    1cae:	32 42       	sbci	r19, 0x22	; 34
    1cb0:	36 95       	lsr	r19
    1cb2:	27 95       	ror	r18
    1cb4:	36 95       	lsr	r19
    1cb6:	27 95       	ror	r18
    1cb8:	36 95       	lsr	r19
    1cba:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    1cbc:	82 2f       	mov	r24, r18
    1cbe:	86 95       	lsr	r24
    1cc0:	20 ff       	sbrs	r18, 0
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <__vector_126+0x6e>
    1cc4:	90 e8       	ldi	r25, 0x80	; 128
    1cc6:	01 c0       	rjmp	.+2      	; 0x1cca <__vector_126+0x70>
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1ccc:	e8 2f       	mov	r30, r24
    1cce:	ef 70       	andi	r30, 0x0F	; 15
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	ee 0f       	add	r30, r30
    1cd4:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	33 27       	eor	r19, r19
    1cda:	27 fd       	sbrc	r18, 7
    1cdc:	30 95       	com	r19
    1cde:	22 27       	eor	r18, r18
    1ce0:	33 0f       	add	r19, r19
    1ce2:	22 1f       	adc	r18, r18
    1ce4:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1ce6:	e2 0f       	add	r30, r18
    1ce8:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    1cea:	ee 0f       	add	r30, r30
    1cec:	ff 1f       	adc	r31, r31
    1cee:	ee 0f       	add	r30, r30
    1cf0:	ff 1f       	adc	r31, r31
    1cf2:	ee 0f       	add	r30, r30
    1cf4:	ff 1f       	adc	r31, r31
    1cf6:	e0 54       	subi	r30, 0x40	; 64
    1cf8:	fd 4d       	sbci	r31, 0xDD	; 221
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1cfa:	90 81       	ld	r25, Z
    1cfc:	95 ff       	sbrs	r25, 5
    1cfe:	81 c0       	rjmp	.+258    	; 0x1e02 <__vector_126+0x1a8>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1d00:	00 e2       	ldi	r16, 0x20	; 32
    1d02:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    1d04:	81 11       	cpse	r24, r1
    1d06:	78 c0       	rjmp	.+240    	; 0x1df8 <__vector_126+0x19e>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1d08:	80 91 b2 22 	lds	r24, 0x22B2
    1d0c:	84 30       	cpi	r24, 0x04	; 4
    1d0e:	19 f4       	brne	.+6      	; 0x1d16 <__vector_126+0xbc>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    1d10:	f8 da       	rcall	.-2576   	; 0x1302 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1d12:	b0 da       	rcall	.-2720   	; 0x1274 <udd_ctrl_init>
    1d14:	76 c0       	rjmp	.+236    	; 0x1e02 <__vector_126+0x1a8>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1d16:	c0 91 c2 22 	lds	r28, 0x22C2
    1d1a:	d0 91 c3 22 	lds	r29, 0x22C3

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1d1e:	80 91 01 23 	lds	r24, 0x2301
    1d22:	90 91 02 23 	lds	r25, 0x2302
    1d26:	00 91 ae 22 	lds	r16, 0x22AE
    1d2a:	10 91 af 22 	lds	r17, 0x22AF
    1d2e:	98 01       	movw	r18, r16
    1d30:	2c 0f       	add	r18, r28
    1d32:	3d 1f       	adc	r19, r29
    1d34:	82 17       	cp	r24, r18
    1d36:	93 07       	cpc	r25, r19
    1d38:	18 f4       	brcc	.+6      	; 0x1d40 <__vector_126+0xe6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1d3a:	ec 01       	movw	r28, r24
    1d3c:	c0 1b       	sub	r28, r16
    1d3e:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    1d40:	80 91 ff 22 	lds	r24, 0x22FF
    1d44:	90 91 00 23 	lds	r25, 0x2300
    1d48:	ae 01       	movw	r20, r28
    1d4a:	6e e6       	ldi	r22, 0x6E	; 110
    1d4c:	72 e2       	ldi	r23, 0x22	; 34
    1d4e:	80 0f       	add	r24, r16
    1d50:	91 1f       	adc	r25, r17
    1d52:	80 d6       	rcall	.+3328   	; 0x2a54 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1d54:	0c 0f       	add	r16, r28
    1d56:	1d 1f       	adc	r17, r29
    1d58:	00 93 ae 22 	sts	0x22AE, r16
    1d5c:	10 93 af 22 	sts	0x22AF, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1d60:	c0 34       	cpi	r28, 0x40	; 64
    1d62:	d1 05       	cpc	r29, r1
    1d64:	69 f4       	brne	.+26     	; 0x1d80 <__vector_126+0x126>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1d66:	80 91 b0 22 	lds	r24, 0x22B0
    1d6a:	90 91 b1 22 	lds	r25, 0x22B1
    1d6e:	80 0f       	add	r24, r16
    1d70:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1d72:	20 91 fd 22 	lds	r18, 0x22FD
    1d76:	30 91 fe 22 	lds	r19, 0x22FE
    1d7a:	82 17       	cp	r24, r18
    1d7c:	93 07       	cpc	r25, r19
    1d7e:	88 f0       	brcs	.+34     	; 0x1da2 <__vector_126+0x148>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1d80:	00 93 01 23 	sts	0x2301, r16
    1d84:	10 93 02 23 	sts	0x2302, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1d88:	e0 91 05 23 	lds	r30, 0x2305
    1d8c:	f0 91 06 23 	lds	r31, 0x2306
    1d90:	30 97       	sbiw	r30, 0x00	; 0
    1d92:	29 f0       	breq	.+10     	; 0x1d9e <__vector_126+0x144>
			if (!udd_g_ctrlreq.over_under_run()) {
    1d94:	09 95       	icall
    1d96:	81 11       	cpse	r24, r1
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <__vector_126+0x144>
				// Stall ZLP
				udd_ctrl_stall_data();
    1d9a:	97 da       	rcall	.-2770   	; 0x12ca <udd_ctrl_stall_data>
    1d9c:	32 c0       	rjmp	.+100    	; 0x1e02 <__vector_126+0x1a8>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    1d9e:	a3 da       	rcall	.-2746   	; 0x12e6 <udd_ctrl_send_zlp_in>
    1da0:	30 c0       	rjmp	.+96     	; 0x1e02 <__vector_126+0x1a8>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1da2:	80 91 01 23 	lds	r24, 0x2301
    1da6:	90 91 02 23 	lds	r25, 0x2302
    1daa:	08 17       	cp	r16, r24
    1dac:	19 07       	cpc	r17, r25
    1dae:	f9 f4       	brne	.+62     	; 0x1dee <__vector_126+0x194>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1db0:	e0 91 05 23 	lds	r30, 0x2305
    1db4:	f0 91 06 23 	lds	r31, 0x2306
    1db8:	30 97       	sbiw	r30, 0x00	; 0
    1dba:	11 f4       	brne	.+4      	; 0x1dc0 <__vector_126+0x166>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    1dbc:	86 da       	rcall	.-2804   	; 0x12ca <udd_ctrl_stall_data>
    1dbe:	21 c0       	rjmp	.+66     	; 0x1e02 <__vector_126+0x1a8>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1dc0:	09 95       	icall
    1dc2:	81 11       	cpse	r24, r1
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <__vector_126+0x170>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1dc6:	81 da       	rcall	.-2814   	; 0x12ca <udd_ctrl_stall_data>
    1dc8:	1c c0       	rjmp	.+56     	; 0x1e02 <__vector_126+0x1a8>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1dca:	20 91 b0 22 	lds	r18, 0x22B0
    1dce:	30 91 b1 22 	lds	r19, 0x22B1
    1dd2:	80 91 ae 22 	lds	r24, 0x22AE
    1dd6:	90 91 af 22 	lds	r25, 0x22AF
    1dda:	82 0f       	add	r24, r18
    1ddc:	93 1f       	adc	r25, r19
    1dde:	80 93 b0 22 	sts	0x22B0, r24
    1de2:	90 93 b1 22 	sts	0x22B1, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1de6:	10 92 ae 22 	sts	0x22AE, r1
    1dea:	10 92 af 22 	sts	0x22AF, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1dee:	e0 ec       	ldi	r30, 0xC0	; 192
    1df0:	f2 e2       	ldi	r31, 0x22	; 34
    1df2:	02 e0       	ldi	r16, 0x02	; 2
    1df4:	06 93       	lac	Z, r16
    1df6:	05 c0       	rjmp	.+10     	; 0x1e02 <__vector_126+0x1a8>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1df8:	80 38       	cpi	r24, 0x80	; 128
    1dfa:	11 f4       	brne	.+4      	; 0x1e00 <__vector_126+0x1a6>
		udd_ctrl_in_sent();
    1dfc:	8a da       	rcall	.-2796   	; 0x1312 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <__vector_126+0x1a8>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1e00:	a5 db       	rcall	.-2230   	; 0x154c <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    1e02:	ff 91       	pop	r31
    1e04:	ef 91       	pop	r30
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	bf 91       	pop	r27
    1e0c:	af 91       	pop	r26
    1e0e:	9f 91       	pop	r25
    1e10:	8f 91       	pop	r24
    1e12:	7f 91       	pop	r23
    1e14:	6f 91       	pop	r22
    1e16:	5f 91       	pop	r21
    1e18:	4f 91       	pop	r20
    1e1a:	3f 91       	pop	r19
    1e1c:	2f 91       	pop	r18
    1e1e:	1f 91       	pop	r17
    1e20:	0f 91       	pop	r16
    1e22:	0f 90       	pop	r0
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	0f 90       	pop	r0
    1e28:	1f 90       	pop	r1
    1e2a:	18 95       	reti

00001e2c <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <sysclk_init+0x6>
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <sysclk_init+0x8>
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1e38:	8f ef       	ldi	r24, 0xFF	; 255
    1e3a:	80 93 70 00 	sts	0x0070, r24
    1e3e:	80 93 71 00 	sts	0x0071, r24
    1e42:	80 93 72 00 	sts	0x0072, r24
    1e46:	80 93 73 00 	sts	0x0073, r24
    1e4a:	80 93 74 00 	sts	0x0074, r24
    1e4e:	80 93 75 00 	sts	0x0075, r24
    1e52:	80 93 76 00 	sts	0x0076, r24
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1e56:	6c e1       	ldi	r22, 0x1C	; 28
    1e58:	70 e0       	ldi	r23, 0x00	; 0
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	68 d0       	rcall	.+208    	; 0x1f2e <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    1e5e:	8a 83       	std	Y+2, r24	; 0x02
    1e60:	6d e1       	ldi	r22, 0x1D	; 29
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	63 d0       	rcall	.+198    	; 0x1f2e <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    1e68:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6e:	01 96       	adiw	r24, 0x01	; 1
    1e70:	21 f4       	brne	.+8      	; 0x1e7a <sysclk_init+0x4e>
		cal = 0x2340;
    1e72:	80 e4       	ldi	r24, 0x40	; 64
    1e74:	93 e2       	ldi	r25, 0x23	; 35
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	9a 83       	std	Y+2, r25	; 0x02
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	8b 83       	std	Y+3, r24	; 0x03
    1e80:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    1e82:	e0 e6       	ldi	r30, 0x60	; 96
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1e8c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1e8e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1e90:	e0 e5       	ldi	r30, 0x50	; 80
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	90 81       	ld	r25, Z
    1e96:	92 60       	ori	r25, 0x02	; 2
    1e98:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1e9a:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1e9c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1e9e:	81 ff       	sbrs	r24, 1
    1ea0:	fd cf       	rjmp	.-6      	; 0x1e9c <sysclk_init+0x70>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1ea2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1ea4:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1ea6:	a0 e5       	ldi	r26, 0x50	; 80
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	16 96       	adiw	r26, 0x06	; 6
    1eac:	9c 91       	ld	r25, X
    1eae:	16 97       	sbiw	r26, 0x06	; 6
    1eb0:	99 7f       	andi	r25, 0xF9	; 249
    1eb2:	16 96       	adiw	r26, 0x06	; 6
    1eb4:	9c 93       	st	X, r25
    1eb6:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1eb8:	e0 e6       	ldi	r30, 0x60	; 96
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	90 e8       	ldi	r25, 0x80	; 128
    1ebe:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    1ec0:	9b eb       	ldi	r25, 0xBB	; 187
    1ec2:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1ec4:	16 96       	adiw	r26, 0x06	; 6
    1ec6:	9c 91       	ld	r25, X
    1ec8:	16 97       	sbiw	r26, 0x06	; 6
    1eca:	94 60       	ori	r25, 0x04	; 4
    1ecc:	16 96       	adiw	r26, 0x06	; 6
    1ece:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1ed0:	90 81       	ld	r25, Z
    1ed2:	91 60       	ori	r25, 0x01	; 1
    1ed4:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ed6:	8f bf       	out	0x3f, r24	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	80 e4       	ldi	r24, 0x40	; 64
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	31 d0       	rcall	.+98     	; 0x1f42 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1ee0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1ee2:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1ee4:	e0 e5       	ldi	r30, 0x50	; 80
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	90 81       	ld	r25, Z
    1eea:	9e 7f       	andi	r25, 0xFE	; 254
    1eec:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1eee:	8f bf       	out	0x3f, r24	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1ef0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1ef2:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1ef4:	90 81       	ld	r25, Z
    1ef6:	94 60       	ori	r25, 0x04	; 4
    1ef8:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1efa:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1efc:	81 81       	ldd	r24, Z+1	; 0x01
    1efe:	82 ff       	sbrs	r24, 2
    1f00:	fd cf       	rjmp	.-6      	; 0x1efc <sysclk_init+0xd0>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    1f02:	8d e0       	ldi	r24, 0x0D	; 13
    1f04:	e0 e4       	ldi	r30, 0x40	; 64
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	83 83       	std	Z+3, r24	; 0x03
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    1f0a:	24 96       	adiw	r28, 0x04	; 4
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	08 95       	ret

00001f16 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1f16:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1f18:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1f1a:	e8 2f       	mov	r30, r24
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	e0 59       	subi	r30, 0x90	; 144
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	60 95       	com	r22
    1f24:	80 81       	ld	r24, Z
    1f26:	68 23       	and	r22, r24
    1f28:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f2a:	9f bf       	out	0x3f, r25	; 63
    1f2c:	08 95       	ret

00001f2e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1f2e:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1f32:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1f34:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1f36:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1f3a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1f3c:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1f40:	08 95       	ret

00001f42 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1f42:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1f44:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1f46:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1f48:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1f4a:	60 83       	st	Z, r22
	ret                             // Return to caller
    1f4c:	08 95       	ret

00001f4e <bluetooth_init>:
void bluetooth_init_interrupt(void)
{
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
	USARTD0.CTRLA = USART_RXCINTLVL_HI_gc;
	cpu_irq_enable();
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	27 97       	sbiw	r28, 0x07	; 7
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	88 e0       	ldi	r24, 0x08	; 8
    1f5e:	e0 e6       	ldi	r30, 0x60	; 96
    1f60:	f6 e0       	ldi	r31, 0x06	; 6
    1f62:	81 83       	std	Z+1, r24	; 0x01
    1f64:	80 91 80 20 	lds	r24, 0x2080
    1f68:	8d 83       	std	Y+5, r24	; 0x05
    1f6a:	80 91 81 20 	lds	r24, 0x2081
    1f6e:	8e 83       	std	Y+6, r24	; 0x06
    1f70:	80 91 82 20 	lds	r24, 0x2082
    1f74:	8f 83       	std	Y+7, r24	; 0x07
    1f76:	80 91 7c 20 	lds	r24, 0x207C
    1f7a:	90 91 7d 20 	lds	r25, 0x207D
    1f7e:	a0 91 7e 20 	lds	r26, 0x207E
    1f82:	b0 91 7f 20 	lds	r27, 0x207F
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	ab 83       	std	Y+3, r26	; 0x03
    1f8c:	bc 83       	std	Y+4, r27	; 0x04
    1f8e:	60 e1       	ldi	r22, 0x10	; 16
    1f90:	84 e0       	ldi	r24, 0x04	; 4
    1f92:	c1 df       	rcall	.-126    	; 0x1f16 <sysclk_enable_module>
    1f94:	be 01       	movw	r22, r28
    1f96:	6f 5f       	subi	r22, 0xFF	; 255
    1f98:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9a:	80 ea       	ldi	r24, 0xA0	; 160
    1f9c:	99 e0       	ldi	r25, 0x09	; 9
    1f9e:	5f d8       	rcall	.-3906   	; 0x105e <usart_init_rs232>
    1fa0:	83 e8       	ldi	r24, 0x83	; 131
    1fa2:	90 e2       	ldi	r25, 0x20	; 32
    1fa4:	80 93 0f 23 	sts	0x230F, r24
    1fa8:	90 93 10 23 	sts	0x2310, r25
    1fac:	80 93 0d 23 	sts	0x230D, r24
    1fb0:	90 93 0e 23 	sts	0x230E, r25
    1fb4:	27 96       	adiw	r28, 0x07	; 7
    1fb6:	cd bf       	out	0x3d, r28	; 61
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	08 95       	ret

00001fc0 <bluetooth_putchar>:
}

void bluetooth_putchar(char a)
{
	usart_putchar(BLUETOOTH,a);
    1fc0:	68 2f       	mov	r22, r24
    1fc2:	80 ea       	ldi	r24, 0xA0	; 160
    1fc4:	99 e0       	ldi	r25, 0x09	; 9
    1fc6:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <usart_putchar>
    1fca:	08 95       	ret

00001fcc <bluetooth_putchar_printf>:
}


#ifdef PRINTF_BLUETOOTH

int bluetooth_putchar_printf(char var, FILE *stream) {
    1fcc:	cf 93       	push	r28
    1fce:	c8 2f       	mov	r28, r24
	// translate \n to \r for br@y++ terminal
	if (var == '\n') bluetooth_putchar('\r');
    1fd0:	8a 30       	cpi	r24, 0x0A	; 10
    1fd2:	11 f4       	brne	.+4      	; 0x1fd8 <bluetooth_putchar_printf+0xc>
    1fd4:	8d e0       	ldi	r24, 0x0D	; 13
    1fd6:	f4 df       	rcall	.-24     	; 0x1fc0 <bluetooth_putchar>
	bluetooth_putchar(var);
    1fd8:	8c 2f       	mov	r24, r28
    1fda:	f2 df       	rcall	.-28     	; 0x1fc0 <bluetooth_putchar>
	return 0;
}
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	cf 91       	pop	r28
    1fe2:	08 95       	ret

00001fe4 <bluetooth_getchar>:
	usart_putchar(BLUETOOTH,a);
}

char bluetooth_getchar(void)
{
	return usart_getchar(BLUETOOTH);
    1fe4:	80 ea       	ldi	r24, 0xA0	; 160
    1fe6:	99 e0       	ldi	r25, 0x09	; 9
    1fe8:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <usart_getchar>
}
    1fec:	08 95       	ret

00001fee <bluetooth_getchar_scanf>:
	bluetooth_putchar(var);
	return 0;
}

int bluetooth_getchar_scanf(FILE *stream)
{
    1fee:	1f 93       	push	r17
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
    1ff4:	ec 01       	movw	r28, r24
	uint8_t u8Data;
	// Wait for byte to be received
	u8Data=bluetooth_getchar();
    1ff6:	f6 df       	rcall	.-20     	; 0x1fe4 <bluetooth_getchar>
    1ff8:	18 2f       	mov	r17, r24
	//echo input data
	bluetooth_putchar_printf(u8Data,stream);
    1ffa:	be 01       	movw	r22, r28
    1ffc:	e7 df       	rcall	.-50     	; 0x1fcc <bluetooth_putchar_printf>
	// Return received data
	return u8Data;
}
    1ffe:	81 2f       	mov	r24, r17
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	1f 91       	pop	r17
    2008:	08 95       	ret

0000200a <init_DomOctopus>:

#include "../DomOctopus.h"

void init_DomOctopus(void)
{
	sysclk_init();
    200a:	10 df       	rcall	.-480    	; 0x1e2c <sysclk_init>
	ioport_init();
	leds_init();
    200c:	15 d0       	rcall	.+42     	; 0x2038 <leds_init>
	switch_init();
    200e:	8e d2       	rcall	.+1308   	; 0x252c <switch_init>
	
	#ifdef ENABLE_BLUETOOTH
		bluetooth_init();
    2010:	9e df       	rcall	.-196    	; 0x1f4e <bluetooth_init>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    2012:	e0 e4       	ldi	r30, 0x40	; 64
    2014:	f6 e0       	ldi	r31, 0x06	; 6
    2016:	90 e1       	ldi	r25, 0x10	; 16
    2018:	91 83       	std	Z+1, r25	; 0x01
    201a:	80 e2       	ldi	r24, 0x20	; 32
    201c:	81 83       	std	Z+1, r24	; 0x01
    201e:	20 e4       	ldi	r18, 0x40	; 64
    2020:	21 83       	std	Z+1, r18	; 0x01
    2022:	20 e8       	ldi	r18, 0x80	; 128
    2024:	21 83       	std	Z+1, r18	; 0x01
    2026:	e0 e6       	ldi	r30, 0x60	; 96
    2028:	f6 e0       	ldi	r31, 0x06	; 6
    202a:	21 e0       	ldi	r18, 0x01	; 1
    202c:	21 83       	std	Z+1, r18	; 0x01
    202e:	22 e0       	ldi	r18, 0x02	; 2
    2030:	21 83       	std	Z+1, r18	; 0x01
    2032:	91 83       	std	Z+1, r25	; 0x01
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    2034:	82 83       	std	Z+2, r24	; 0x02
    2036:	08 95       	ret

00002038 <leds_init>:
	led1( ( leds & (1<<0) ) && (1<<0)  );
	led2( ( leds & (1<<1) ) && (1<<1)  );
	led3( ( leds & (1<<2) ) && (1<<2)  );
	led4( ( leds & (1<<3) ) && (1<<3)  );

}
    2038:	e0 e0       	ldi	r30, 0x00	; 0
    203a:	f6 e0       	ldi	r31, 0x06	; 6
    203c:	88 e0       	ldi	r24, 0x08	; 8
    203e:	81 83       	std	Z+1, r24	; 0x01
    2040:	80 e1       	ldi	r24, 0x10	; 16
    2042:	81 83       	std	Z+1, r24	; 0x01
    2044:	80 e2       	ldi	r24, 0x20	; 32
    2046:	81 83       	std	Z+1, r24	; 0x01
    2048:	80 e4       	ldi	r24, 0x40	; 64
    204a:	81 83       	std	Z+1, r24	; 0x01
    204c:	08 95       	ret

0000204e <led1>:
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	91 05       	cpc	r25, r1
    2052:	31 f0       	breq	.+12     	; 0x2060 <led1+0x12>
    2054:	82 30       	cpi	r24, 0x02	; 2
    2056:	91 05       	cpc	r25, r1
    2058:	69 f0       	breq	.+26     	; 0x2074 <led1+0x26>
    205a:	89 2b       	or	r24, r25
    205c:	79 f4       	brne	.+30     	; 0x207c <led1+0x2e>
    205e:	05 c0       	rjmp	.+10     	; 0x206a <led1+0x1c>
    2060:	88 e0       	ldi	r24, 0x08	; 8
    2062:	e0 e0       	ldi	r30, 0x00	; 0
    2064:	f6 e0       	ldi	r31, 0x06	; 6
    2066:	85 83       	std	Z+5, r24	; 0x05
    2068:	08 95       	ret
    206a:	88 e0       	ldi	r24, 0x08	; 8
    206c:	e0 e0       	ldi	r30, 0x00	; 0
    206e:	f6 e0       	ldi	r31, 0x06	; 6
    2070:	86 83       	std	Z+6, r24	; 0x06
    2072:	08 95       	ret
    2074:	88 e0       	ldi	r24, 0x08	; 8
    2076:	e0 e0       	ldi	r30, 0x00	; 0
    2078:	f6 e0       	ldi	r31, 0x06	; 6
    207a:	87 83       	std	Z+7, r24	; 0x07
    207c:	08 95       	ret

0000207e <led2>:
    207e:	81 30       	cpi	r24, 0x01	; 1
    2080:	91 05       	cpc	r25, r1
    2082:	31 f0       	breq	.+12     	; 0x2090 <led2+0x12>
    2084:	82 30       	cpi	r24, 0x02	; 2
    2086:	91 05       	cpc	r25, r1
    2088:	69 f0       	breq	.+26     	; 0x20a4 <led2+0x26>
    208a:	89 2b       	or	r24, r25
    208c:	79 f4       	brne	.+30     	; 0x20ac <led2+0x2e>
    208e:	05 c0       	rjmp	.+10     	; 0x209a <led2+0x1c>
    2090:	80 e1       	ldi	r24, 0x10	; 16
    2092:	e0 e0       	ldi	r30, 0x00	; 0
    2094:	f6 e0       	ldi	r31, 0x06	; 6
    2096:	85 83       	std	Z+5, r24	; 0x05
    2098:	08 95       	ret
    209a:	80 e1       	ldi	r24, 0x10	; 16
    209c:	e0 e0       	ldi	r30, 0x00	; 0
    209e:	f6 e0       	ldi	r31, 0x06	; 6
    20a0:	86 83       	std	Z+6, r24	; 0x06
    20a2:	08 95       	ret
    20a4:	80 e1       	ldi	r24, 0x10	; 16
    20a6:	e0 e0       	ldi	r30, 0x00	; 0
    20a8:	f6 e0       	ldi	r31, 0x06	; 6
    20aa:	87 83       	std	Z+7, r24	; 0x07
    20ac:	08 95       	ret

000020ae <led3>:
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	91 05       	cpc	r25, r1
    20b2:	31 f0       	breq	.+12     	; 0x20c0 <led3+0x12>
    20b4:	82 30       	cpi	r24, 0x02	; 2
    20b6:	91 05       	cpc	r25, r1
    20b8:	69 f0       	breq	.+26     	; 0x20d4 <led3+0x26>
    20ba:	89 2b       	or	r24, r25
    20bc:	79 f4       	brne	.+30     	; 0x20dc <led3+0x2e>
    20be:	05 c0       	rjmp	.+10     	; 0x20ca <led3+0x1c>
    20c0:	80 e2       	ldi	r24, 0x20	; 32
    20c2:	e0 e0       	ldi	r30, 0x00	; 0
    20c4:	f6 e0       	ldi	r31, 0x06	; 6
    20c6:	85 83       	std	Z+5, r24	; 0x05
    20c8:	08 95       	ret
    20ca:	80 e2       	ldi	r24, 0x20	; 32
    20cc:	e0 e0       	ldi	r30, 0x00	; 0
    20ce:	f6 e0       	ldi	r31, 0x06	; 6
    20d0:	86 83       	std	Z+6, r24	; 0x06
    20d2:	08 95       	ret
    20d4:	80 e2       	ldi	r24, 0x20	; 32
    20d6:	e0 e0       	ldi	r30, 0x00	; 0
    20d8:	f6 e0       	ldi	r31, 0x06	; 6
    20da:	87 83       	std	Z+7, r24	; 0x07
    20dc:	08 95       	ret

000020de <led4>:
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	91 05       	cpc	r25, r1
    20e2:	31 f0       	breq	.+12     	; 0x20f0 <led4+0x12>
    20e4:	82 30       	cpi	r24, 0x02	; 2
    20e6:	91 05       	cpc	r25, r1
    20e8:	69 f0       	breq	.+26     	; 0x2104 <led4+0x26>
    20ea:	89 2b       	or	r24, r25
    20ec:	79 f4       	brne	.+30     	; 0x210c <led4+0x2e>
    20ee:	05 c0       	rjmp	.+10     	; 0x20fa <led4+0x1c>
    20f0:	80 e4       	ldi	r24, 0x40	; 64
    20f2:	e0 e0       	ldi	r30, 0x00	; 0
    20f4:	f6 e0       	ldi	r31, 0x06	; 6
    20f6:	85 83       	std	Z+5, r24	; 0x05
    20f8:	08 95       	ret
    20fa:	80 e4       	ldi	r24, 0x40	; 64
    20fc:	e0 e0       	ldi	r30, 0x00	; 0
    20fe:	f6 e0       	ldi	r31, 0x06	; 6
    2100:	86 83       	std	Z+6, r24	; 0x06
    2102:	08 95       	ret
    2104:	80 e4       	ldi	r24, 0x40	; 64
    2106:	e0 e0       	ldi	r30, 0x00	; 0
    2108:	f6 e0       	ldi	r31, 0x06	; 6
    210a:	87 83       	std	Z+7, r24	; 0x07
    210c:	08 95       	ret

0000210e <animation>:
	}
}


void animation(void)
{
    210e:	af 92       	push	r10
    2110:	bf 92       	push	r11
    2112:	cf 92       	push	r12
    2114:	df 92       	push	r13
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	00 d0       	rcall	.+0      	; 0x2124 <animation+0x16>
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
	volatile int i;
	for(i = 50;i<ANIMATION_MAX;i+=15)
    2128:	82 e3       	ldi	r24, 0x32	; 50
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	9a 83       	std	Y+2, r25	; 0x02
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	84 36       	cpi	r24, 0x64	; 100
    2136:	91 05       	cpc	r25, r1
    2138:	0c f0       	brlt	.+2      	; 0x213c <animation+0x2e>
    213a:	eb c1       	rjmp	.+982    	; 0x2512 <animation+0x404>
	{
		led1(ON);
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	86 df       	rcall	.-244    	; 0x204e <led1>
		delay_ms(i);
    2142:	e9 81       	ldd	r30, Y+1	; 0x01
    2144:	fa 81       	ldd	r31, Y+2	; 0x02
    2146:	9f 2f       	mov	r25, r31
    2148:	99 0f       	add	r25, r25
    214a:	99 0b       	sbc	r25, r25
    214c:	a1 2c       	mov	r10, r1
    214e:	0f 2e       	mov	r0, r31
    2150:	fc e6       	ldi	r31, 0x6C	; 108
    2152:	bf 2e       	mov	r11, r31
    2154:	f0 2d       	mov	r31, r0
    2156:	0f 2e       	mov	r0, r31
    2158:	fc ed       	ldi	r31, 0xDC	; 220
    215a:	cf 2e       	mov	r12, r31
    215c:	f0 2d       	mov	r31, r0
    215e:	68 94       	set
    2160:	dd 24       	eor	r13, r13
    2162:	d1 f8       	bld	r13, 1
    2164:	e1 2c       	mov	r14, r1
    2166:	f1 2c       	mov	r15, r1
    2168:	00 e0       	ldi	r16, 0x00	; 0
    216a:	10 e0       	ldi	r17, 0x00	; 0
    216c:	2e 2f       	mov	r18, r30
    216e:	3f 2f       	mov	r19, r31
    2170:	49 2f       	mov	r20, r25
    2172:	59 2f       	mov	r21, r25
    2174:	69 2f       	mov	r22, r25
    2176:	79 2f       	mov	r23, r25
    2178:	89 2f       	mov	r24, r25
    217a:	0c d4       	rcall	.+2072   	; 0x2994 <__muldi3>
    217c:	29 51       	subi	r18, 0x19	; 25
    217e:	3c 4f       	sbci	r19, 0xFC	; 252
    2180:	4f 4f       	sbci	r20, 0xFF	; 255
    2182:	5f 4f       	sbci	r21, 0xFF	; 255
    2184:	6f 4f       	sbci	r22, 0xFF	; 255
    2186:	7f 4f       	sbci	r23, 0xFF	; 255
    2188:	8f 4f       	sbci	r24, 0xFF	; 255
    218a:	9f 4f       	sbci	r25, 0xFF	; 255
    218c:	28 d3       	rcall	.+1616   	; 0x27de <__floatundisf>
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e8       	ldi	r19, 0x80	; 128
    2192:	4b eb       	ldi	r20, 0xBB	; 187
    2194:	55 e4       	ldi	r21, 0x45	; 69
    2196:	81 d2       	rcall	.+1282   	; 0x269a <__divsf3>
    2198:	ed d2       	rcall	.+1498   	; 0x2774 <__fixunssfdi>
    219a:	f2 2f       	mov	r31, r18
    219c:	e3 2f       	mov	r30, r19
    219e:	8f 2f       	mov	r24, r31
    21a0:	9e 2f       	mov	r25, r30
    21a2:	a4 2f       	mov	r26, r20
    21a4:	b5 2f       	mov	r27, r21
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	a1 09       	sbc	r26, r1
    21aa:	b1 09       	sbc	r27, r1
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	a1 05       	cpc	r26, r1
    21b0:	b1 05       	cpc	r27, r1
    21b2:	c9 f7       	brne	.-14     	; 0x21a6 <animation+0x98>
		led2(ON);
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	62 df       	rcall	.-316    	; 0x207e <led2>
		delay_ms(i);
    21ba:	e9 81       	ldd	r30, Y+1	; 0x01
    21bc:	fa 81       	ldd	r31, Y+2	; 0x02
    21be:	9f 2f       	mov	r25, r31
    21c0:	99 0f       	add	r25, r25
    21c2:	99 0b       	sbc	r25, r25
    21c4:	a1 2c       	mov	r10, r1
    21c6:	0f 2e       	mov	r0, r31
    21c8:	fc e6       	ldi	r31, 0x6C	; 108
    21ca:	bf 2e       	mov	r11, r31
    21cc:	f0 2d       	mov	r31, r0
    21ce:	0f 2e       	mov	r0, r31
    21d0:	fc ed       	ldi	r31, 0xDC	; 220
    21d2:	cf 2e       	mov	r12, r31
    21d4:	f0 2d       	mov	r31, r0
    21d6:	68 94       	set
    21d8:	dd 24       	eor	r13, r13
    21da:	d1 f8       	bld	r13, 1
    21dc:	e1 2c       	mov	r14, r1
    21de:	f1 2c       	mov	r15, r1
    21e0:	00 e0       	ldi	r16, 0x00	; 0
    21e2:	10 e0       	ldi	r17, 0x00	; 0
    21e4:	2e 2f       	mov	r18, r30
    21e6:	3f 2f       	mov	r19, r31
    21e8:	49 2f       	mov	r20, r25
    21ea:	59 2f       	mov	r21, r25
    21ec:	69 2f       	mov	r22, r25
    21ee:	79 2f       	mov	r23, r25
    21f0:	89 2f       	mov	r24, r25
    21f2:	d0 d3       	rcall	.+1952   	; 0x2994 <__muldi3>
    21f4:	29 51       	subi	r18, 0x19	; 25
    21f6:	3c 4f       	sbci	r19, 0xFC	; 252
    21f8:	4f 4f       	sbci	r20, 0xFF	; 255
    21fa:	5f 4f       	sbci	r21, 0xFF	; 255
    21fc:	6f 4f       	sbci	r22, 0xFF	; 255
    21fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2200:	8f 4f       	sbci	r24, 0xFF	; 255
    2202:	9f 4f       	sbci	r25, 0xFF	; 255
    2204:	ec d2       	rcall	.+1496   	; 0x27de <__floatundisf>
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e8       	ldi	r19, 0x80	; 128
    220a:	4b eb       	ldi	r20, 0xBB	; 187
    220c:	55 e4       	ldi	r21, 0x45	; 69
    220e:	45 d2       	rcall	.+1162   	; 0x269a <__divsf3>
    2210:	b1 d2       	rcall	.+1378   	; 0x2774 <__fixunssfdi>
    2212:	f2 2f       	mov	r31, r18
    2214:	e3 2f       	mov	r30, r19
    2216:	8f 2f       	mov	r24, r31
    2218:	9e 2f       	mov	r25, r30
    221a:	a4 2f       	mov	r26, r20
    221c:	b5 2f       	mov	r27, r21
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	a1 09       	sbc	r26, r1
    2222:	b1 09       	sbc	r27, r1
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	a1 05       	cpc	r26, r1
    2228:	b1 05       	cpc	r27, r1
    222a:	c9 f7       	brne	.-14     	; 0x221e <animation+0x110>
		led3(ON);
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	3e df       	rcall	.-388    	; 0x20ae <led3>
		delay_ms(i);
    2232:	e9 81       	ldd	r30, Y+1	; 0x01
    2234:	fa 81       	ldd	r31, Y+2	; 0x02
    2236:	9f 2f       	mov	r25, r31
    2238:	99 0f       	add	r25, r25
    223a:	99 0b       	sbc	r25, r25
    223c:	a1 2c       	mov	r10, r1
    223e:	0f 2e       	mov	r0, r31
    2240:	fc e6       	ldi	r31, 0x6C	; 108
    2242:	bf 2e       	mov	r11, r31
    2244:	f0 2d       	mov	r31, r0
    2246:	0f 2e       	mov	r0, r31
    2248:	fc ed       	ldi	r31, 0xDC	; 220
    224a:	cf 2e       	mov	r12, r31
    224c:	f0 2d       	mov	r31, r0
    224e:	68 94       	set
    2250:	dd 24       	eor	r13, r13
    2252:	d1 f8       	bld	r13, 1
    2254:	e1 2c       	mov	r14, r1
    2256:	f1 2c       	mov	r15, r1
    2258:	00 e0       	ldi	r16, 0x00	; 0
    225a:	10 e0       	ldi	r17, 0x00	; 0
    225c:	2e 2f       	mov	r18, r30
    225e:	3f 2f       	mov	r19, r31
    2260:	49 2f       	mov	r20, r25
    2262:	59 2f       	mov	r21, r25
    2264:	69 2f       	mov	r22, r25
    2266:	79 2f       	mov	r23, r25
    2268:	89 2f       	mov	r24, r25
    226a:	94 d3       	rcall	.+1832   	; 0x2994 <__muldi3>
    226c:	29 51       	subi	r18, 0x19	; 25
    226e:	3c 4f       	sbci	r19, 0xFC	; 252
    2270:	4f 4f       	sbci	r20, 0xFF	; 255
    2272:	5f 4f       	sbci	r21, 0xFF	; 255
    2274:	6f 4f       	sbci	r22, 0xFF	; 255
    2276:	7f 4f       	sbci	r23, 0xFF	; 255
    2278:	8f 4f       	sbci	r24, 0xFF	; 255
    227a:	9f 4f       	sbci	r25, 0xFF	; 255
    227c:	b0 d2       	rcall	.+1376   	; 0x27de <__floatundisf>
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e8       	ldi	r19, 0x80	; 128
    2282:	4b eb       	ldi	r20, 0xBB	; 187
    2284:	55 e4       	ldi	r21, 0x45	; 69
    2286:	09 d2       	rcall	.+1042   	; 0x269a <__divsf3>
    2288:	75 d2       	rcall	.+1258   	; 0x2774 <__fixunssfdi>
    228a:	f2 2f       	mov	r31, r18
    228c:	e3 2f       	mov	r30, r19
    228e:	8f 2f       	mov	r24, r31
    2290:	9e 2f       	mov	r25, r30
    2292:	a4 2f       	mov	r26, r20
    2294:	b5 2f       	mov	r27, r21
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	a1 09       	sbc	r26, r1
    229a:	b1 09       	sbc	r27, r1
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	a1 05       	cpc	r26, r1
    22a0:	b1 05       	cpc	r27, r1
    22a2:	c9 f7       	brne	.-14     	; 0x2296 <animation+0x188>
		led4(ON);
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	1a df       	rcall	.-460    	; 0x20de <led4>
		delay_ms(i);
    22aa:	e9 81       	ldd	r30, Y+1	; 0x01
    22ac:	fa 81       	ldd	r31, Y+2	; 0x02
    22ae:	9f 2f       	mov	r25, r31
    22b0:	99 0f       	add	r25, r25
    22b2:	99 0b       	sbc	r25, r25
    22b4:	a1 2c       	mov	r10, r1
    22b6:	0f 2e       	mov	r0, r31
    22b8:	fc e6       	ldi	r31, 0x6C	; 108
    22ba:	bf 2e       	mov	r11, r31
    22bc:	f0 2d       	mov	r31, r0
    22be:	0f 2e       	mov	r0, r31
    22c0:	fc ed       	ldi	r31, 0xDC	; 220
    22c2:	cf 2e       	mov	r12, r31
    22c4:	f0 2d       	mov	r31, r0
    22c6:	68 94       	set
    22c8:	dd 24       	eor	r13, r13
    22ca:	d1 f8       	bld	r13, 1
    22cc:	e1 2c       	mov	r14, r1
    22ce:	f1 2c       	mov	r15, r1
    22d0:	00 e0       	ldi	r16, 0x00	; 0
    22d2:	10 e0       	ldi	r17, 0x00	; 0
    22d4:	2e 2f       	mov	r18, r30
    22d6:	3f 2f       	mov	r19, r31
    22d8:	49 2f       	mov	r20, r25
    22da:	59 2f       	mov	r21, r25
    22dc:	69 2f       	mov	r22, r25
    22de:	79 2f       	mov	r23, r25
    22e0:	89 2f       	mov	r24, r25
    22e2:	58 d3       	rcall	.+1712   	; 0x2994 <__muldi3>
    22e4:	29 51       	subi	r18, 0x19	; 25
    22e6:	3c 4f       	sbci	r19, 0xFC	; 252
    22e8:	4f 4f       	sbci	r20, 0xFF	; 255
    22ea:	5f 4f       	sbci	r21, 0xFF	; 255
    22ec:	6f 4f       	sbci	r22, 0xFF	; 255
    22ee:	7f 4f       	sbci	r23, 0xFF	; 255
    22f0:	8f 4f       	sbci	r24, 0xFF	; 255
    22f2:	9f 4f       	sbci	r25, 0xFF	; 255
    22f4:	74 d2       	rcall	.+1256   	; 0x27de <__floatundisf>
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e8       	ldi	r19, 0x80	; 128
    22fa:	4b eb       	ldi	r20, 0xBB	; 187
    22fc:	55 e4       	ldi	r21, 0x45	; 69
    22fe:	cd d1       	rcall	.+922    	; 0x269a <__divsf3>
    2300:	39 d2       	rcall	.+1138   	; 0x2774 <__fixunssfdi>
    2302:	f2 2f       	mov	r31, r18
    2304:	e3 2f       	mov	r30, r19
    2306:	8f 2f       	mov	r24, r31
    2308:	9e 2f       	mov	r25, r30
    230a:	a4 2f       	mov	r26, r20
    230c:	b5 2f       	mov	r27, r21
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	a1 09       	sbc	r26, r1
    2312:	b1 09       	sbc	r27, r1
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	a1 05       	cpc	r26, r1
    2318:	b1 05       	cpc	r27, r1
    231a:	c9 f7       	brne	.-14     	; 0x230e <animation+0x200>
		
		led1(OFF);
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	96 de       	rcall	.-724    	; 0x204e <led1>
		delay_ms(i);
    2322:	e9 81       	ldd	r30, Y+1	; 0x01
    2324:	fa 81       	ldd	r31, Y+2	; 0x02
    2326:	9f 2f       	mov	r25, r31
    2328:	99 0f       	add	r25, r25
    232a:	99 0b       	sbc	r25, r25
    232c:	a1 2c       	mov	r10, r1
    232e:	0f 2e       	mov	r0, r31
    2330:	fc e6       	ldi	r31, 0x6C	; 108
    2332:	bf 2e       	mov	r11, r31
    2334:	f0 2d       	mov	r31, r0
    2336:	0f 2e       	mov	r0, r31
    2338:	fc ed       	ldi	r31, 0xDC	; 220
    233a:	cf 2e       	mov	r12, r31
    233c:	f0 2d       	mov	r31, r0
    233e:	68 94       	set
    2340:	dd 24       	eor	r13, r13
    2342:	d1 f8       	bld	r13, 1
    2344:	e1 2c       	mov	r14, r1
    2346:	f1 2c       	mov	r15, r1
    2348:	00 e0       	ldi	r16, 0x00	; 0
    234a:	10 e0       	ldi	r17, 0x00	; 0
    234c:	2e 2f       	mov	r18, r30
    234e:	3f 2f       	mov	r19, r31
    2350:	49 2f       	mov	r20, r25
    2352:	59 2f       	mov	r21, r25
    2354:	69 2f       	mov	r22, r25
    2356:	79 2f       	mov	r23, r25
    2358:	89 2f       	mov	r24, r25
    235a:	1c d3       	rcall	.+1592   	; 0x2994 <__muldi3>
    235c:	29 51       	subi	r18, 0x19	; 25
    235e:	3c 4f       	sbci	r19, 0xFC	; 252
    2360:	4f 4f       	sbci	r20, 0xFF	; 255
    2362:	5f 4f       	sbci	r21, 0xFF	; 255
    2364:	6f 4f       	sbci	r22, 0xFF	; 255
    2366:	7f 4f       	sbci	r23, 0xFF	; 255
    2368:	8f 4f       	sbci	r24, 0xFF	; 255
    236a:	9f 4f       	sbci	r25, 0xFF	; 255
    236c:	38 d2       	rcall	.+1136   	; 0x27de <__floatundisf>
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e8       	ldi	r19, 0x80	; 128
    2372:	4b eb       	ldi	r20, 0xBB	; 187
    2374:	55 e4       	ldi	r21, 0x45	; 69
    2376:	91 d1       	rcall	.+802    	; 0x269a <__divsf3>
    2378:	fd d1       	rcall	.+1018   	; 0x2774 <__fixunssfdi>
    237a:	f2 2f       	mov	r31, r18
    237c:	e3 2f       	mov	r30, r19
    237e:	8f 2f       	mov	r24, r31
    2380:	9e 2f       	mov	r25, r30
    2382:	a4 2f       	mov	r26, r20
    2384:	b5 2f       	mov	r27, r21
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	a1 09       	sbc	r26, r1
    238a:	b1 09       	sbc	r27, r1
    238c:	00 97       	sbiw	r24, 0x00	; 0
    238e:	a1 05       	cpc	r26, r1
    2390:	b1 05       	cpc	r27, r1
    2392:	c9 f7       	brne	.-14     	; 0x2386 <animation+0x278>
		led2(OFF);
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	72 de       	rcall	.-796    	; 0x207e <led2>
		delay_ms(i);
    239a:	e9 81       	ldd	r30, Y+1	; 0x01
    239c:	fa 81       	ldd	r31, Y+2	; 0x02
    239e:	9f 2f       	mov	r25, r31
    23a0:	99 0f       	add	r25, r25
    23a2:	99 0b       	sbc	r25, r25
    23a4:	a1 2c       	mov	r10, r1
    23a6:	0f 2e       	mov	r0, r31
    23a8:	fc e6       	ldi	r31, 0x6C	; 108
    23aa:	bf 2e       	mov	r11, r31
    23ac:	f0 2d       	mov	r31, r0
    23ae:	0f 2e       	mov	r0, r31
    23b0:	fc ed       	ldi	r31, 0xDC	; 220
    23b2:	cf 2e       	mov	r12, r31
    23b4:	f0 2d       	mov	r31, r0
    23b6:	68 94       	set
    23b8:	dd 24       	eor	r13, r13
    23ba:	d1 f8       	bld	r13, 1
    23bc:	e1 2c       	mov	r14, r1
    23be:	f1 2c       	mov	r15, r1
    23c0:	00 e0       	ldi	r16, 0x00	; 0
    23c2:	10 e0       	ldi	r17, 0x00	; 0
    23c4:	2e 2f       	mov	r18, r30
    23c6:	3f 2f       	mov	r19, r31
    23c8:	49 2f       	mov	r20, r25
    23ca:	59 2f       	mov	r21, r25
    23cc:	69 2f       	mov	r22, r25
    23ce:	79 2f       	mov	r23, r25
    23d0:	89 2f       	mov	r24, r25
    23d2:	e0 d2       	rcall	.+1472   	; 0x2994 <__muldi3>
    23d4:	29 51       	subi	r18, 0x19	; 25
    23d6:	3c 4f       	sbci	r19, 0xFC	; 252
    23d8:	4f 4f       	sbci	r20, 0xFF	; 255
    23da:	5f 4f       	sbci	r21, 0xFF	; 255
    23dc:	6f 4f       	sbci	r22, 0xFF	; 255
    23de:	7f 4f       	sbci	r23, 0xFF	; 255
    23e0:	8f 4f       	sbci	r24, 0xFF	; 255
    23e2:	9f 4f       	sbci	r25, 0xFF	; 255
    23e4:	fc d1       	rcall	.+1016   	; 0x27de <__floatundisf>
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e8       	ldi	r19, 0x80	; 128
    23ea:	4b eb       	ldi	r20, 0xBB	; 187
    23ec:	55 e4       	ldi	r21, 0x45	; 69
    23ee:	55 d1       	rcall	.+682    	; 0x269a <__divsf3>
    23f0:	c1 d1       	rcall	.+898    	; 0x2774 <__fixunssfdi>
    23f2:	f2 2f       	mov	r31, r18
    23f4:	e3 2f       	mov	r30, r19
    23f6:	8f 2f       	mov	r24, r31
    23f8:	9e 2f       	mov	r25, r30
    23fa:	a4 2f       	mov	r26, r20
    23fc:	b5 2f       	mov	r27, r21
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	a1 09       	sbc	r26, r1
    2402:	b1 09       	sbc	r27, r1
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	a1 05       	cpc	r26, r1
    2408:	b1 05       	cpc	r27, r1
    240a:	c9 f7       	brne	.-14     	; 0x23fe <animation+0x2f0>
		led3(OFF);
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	4e de       	rcall	.-868    	; 0x20ae <led3>
		delay_ms(i);
    2412:	e9 81       	ldd	r30, Y+1	; 0x01
    2414:	fa 81       	ldd	r31, Y+2	; 0x02
    2416:	9f 2f       	mov	r25, r31
    2418:	99 0f       	add	r25, r25
    241a:	99 0b       	sbc	r25, r25
    241c:	a1 2c       	mov	r10, r1
    241e:	0f 2e       	mov	r0, r31
    2420:	fc e6       	ldi	r31, 0x6C	; 108
    2422:	bf 2e       	mov	r11, r31
    2424:	f0 2d       	mov	r31, r0
    2426:	0f 2e       	mov	r0, r31
    2428:	fc ed       	ldi	r31, 0xDC	; 220
    242a:	cf 2e       	mov	r12, r31
    242c:	f0 2d       	mov	r31, r0
    242e:	68 94       	set
    2430:	dd 24       	eor	r13, r13
    2432:	d1 f8       	bld	r13, 1
    2434:	e1 2c       	mov	r14, r1
    2436:	f1 2c       	mov	r15, r1
    2438:	00 e0       	ldi	r16, 0x00	; 0
    243a:	10 e0       	ldi	r17, 0x00	; 0
    243c:	2e 2f       	mov	r18, r30
    243e:	3f 2f       	mov	r19, r31
    2440:	49 2f       	mov	r20, r25
    2442:	59 2f       	mov	r21, r25
    2444:	69 2f       	mov	r22, r25
    2446:	79 2f       	mov	r23, r25
    2448:	89 2f       	mov	r24, r25
    244a:	a4 d2       	rcall	.+1352   	; 0x2994 <__muldi3>
    244c:	29 51       	subi	r18, 0x19	; 25
    244e:	3c 4f       	sbci	r19, 0xFC	; 252
    2450:	4f 4f       	sbci	r20, 0xFF	; 255
    2452:	5f 4f       	sbci	r21, 0xFF	; 255
    2454:	6f 4f       	sbci	r22, 0xFF	; 255
    2456:	7f 4f       	sbci	r23, 0xFF	; 255
    2458:	8f 4f       	sbci	r24, 0xFF	; 255
    245a:	9f 4f       	sbci	r25, 0xFF	; 255
    245c:	c0 d1       	rcall	.+896    	; 0x27de <__floatundisf>
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e8       	ldi	r19, 0x80	; 128
    2462:	4b eb       	ldi	r20, 0xBB	; 187
    2464:	55 e4       	ldi	r21, 0x45	; 69
    2466:	19 d1       	rcall	.+562    	; 0x269a <__divsf3>
    2468:	85 d1       	rcall	.+778    	; 0x2774 <__fixunssfdi>
    246a:	f2 2f       	mov	r31, r18
    246c:	e3 2f       	mov	r30, r19
    246e:	8f 2f       	mov	r24, r31
    2470:	9e 2f       	mov	r25, r30
    2472:	a4 2f       	mov	r26, r20
    2474:	b5 2f       	mov	r27, r21
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	a1 09       	sbc	r26, r1
    247a:	b1 09       	sbc	r27, r1
    247c:	00 97       	sbiw	r24, 0x00	; 0
    247e:	a1 05       	cpc	r26, r1
    2480:	b1 05       	cpc	r27, r1
    2482:	c9 f7       	brne	.-14     	; 0x2476 <animation+0x368>
		led4(OFF);
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	2a de       	rcall	.-940    	; 0x20de <led4>
		delay_ms(i);
    248a:	e9 81       	ldd	r30, Y+1	; 0x01
    248c:	fa 81       	ldd	r31, Y+2	; 0x02
    248e:	9f 2f       	mov	r25, r31
    2490:	99 0f       	add	r25, r25
    2492:	99 0b       	sbc	r25, r25
    2494:	a1 2c       	mov	r10, r1
    2496:	0f 2e       	mov	r0, r31
    2498:	fc e6       	ldi	r31, 0x6C	; 108
    249a:	bf 2e       	mov	r11, r31
    249c:	f0 2d       	mov	r31, r0
    249e:	0f 2e       	mov	r0, r31
    24a0:	fc ed       	ldi	r31, 0xDC	; 220
    24a2:	cf 2e       	mov	r12, r31
    24a4:	f0 2d       	mov	r31, r0
    24a6:	68 94       	set
    24a8:	dd 24       	eor	r13, r13
    24aa:	d1 f8       	bld	r13, 1
    24ac:	e1 2c       	mov	r14, r1
    24ae:	f1 2c       	mov	r15, r1
    24b0:	00 e0       	ldi	r16, 0x00	; 0
    24b2:	10 e0       	ldi	r17, 0x00	; 0
    24b4:	2e 2f       	mov	r18, r30
    24b6:	3f 2f       	mov	r19, r31
    24b8:	49 2f       	mov	r20, r25
    24ba:	59 2f       	mov	r21, r25
    24bc:	69 2f       	mov	r22, r25
    24be:	79 2f       	mov	r23, r25
    24c0:	89 2f       	mov	r24, r25
    24c2:	68 d2       	rcall	.+1232   	; 0x2994 <__muldi3>
    24c4:	29 51       	subi	r18, 0x19	; 25
    24c6:	3c 4f       	sbci	r19, 0xFC	; 252
    24c8:	4f 4f       	sbci	r20, 0xFF	; 255
    24ca:	5f 4f       	sbci	r21, 0xFF	; 255
    24cc:	6f 4f       	sbci	r22, 0xFF	; 255
    24ce:	7f 4f       	sbci	r23, 0xFF	; 255
    24d0:	8f 4f       	sbci	r24, 0xFF	; 255
    24d2:	9f 4f       	sbci	r25, 0xFF	; 255
    24d4:	84 d1       	rcall	.+776    	; 0x27de <__floatundisf>
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e8       	ldi	r19, 0x80	; 128
    24da:	4b eb       	ldi	r20, 0xBB	; 187
    24dc:	55 e4       	ldi	r21, 0x45	; 69
    24de:	dd d0       	rcall	.+442    	; 0x269a <__divsf3>
    24e0:	49 d1       	rcall	.+658    	; 0x2774 <__fixunssfdi>
    24e2:	f2 2f       	mov	r31, r18
    24e4:	e3 2f       	mov	r30, r19
    24e6:	8f 2f       	mov	r24, r31
    24e8:	9e 2f       	mov	r25, r30
    24ea:	a4 2f       	mov	r26, r20
    24ec:	b5 2f       	mov	r27, r21
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	a1 09       	sbc	r26, r1
    24f2:	b1 09       	sbc	r27, r1
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	a1 05       	cpc	r26, r1
    24f8:	b1 05       	cpc	r27, r1
    24fa:	c9 f7       	brne	.-14     	; 0x24ee <animation+0x3e0>


void animation(void)
{
	volatile int i;
	for(i = 50;i<ANIMATION_MAX;i+=15)
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2500:	0f 96       	adiw	r24, 0x0f	; 15
    2502:	89 83       	std	Y+1, r24	; 0x01
    2504:	9a 83       	std	Y+2, r25	; 0x02
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	9a 81       	ldd	r25, Y+2	; 0x02
    250a:	84 36       	cpi	r24, 0x64	; 100
    250c:	91 05       	cpc	r25, r1
    250e:	0c f4       	brge	.+2      	; 0x2512 <animation+0x404>
    2510:	15 ce       	rjmp	.-982    	; 0x213c <animation+0x2e>
		led3(OFF);
		delay_ms(i);
		led4(OFF);
		delay_ms(i);
	}
}
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	1f 91       	pop	r17
    251c:	0f 91       	pop	r16
    251e:	ff 90       	pop	r15
    2520:	ef 90       	pop	r14
    2522:	df 90       	pop	r13
    2524:	cf 90       	pop	r12
    2526:	bf 90       	pop	r11
    2528:	af 90       	pop	r10
    252a:	08 95       	ret

0000252c <switch_init>:
    252c:	88 e0       	ldi	r24, 0x08	; 8
    252e:	e0 e4       	ldi	r30, 0x40	; 64
    2530:	f6 e0       	ldi	r31, 0x06	; 6
    2532:	82 83       	std	Z+2, r24	; 0x02
    2534:	08 95       	ret

00002536 <__vector_2>:
// 	RTC.CNT = 0;
// 	led4(TOGGLE);
// }

ISR(PORTC_INT0_vect) // BOTON
{
    2536:	1f 92       	push	r1
    2538:	0f 92       	push	r0
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	0f 92       	push	r0
    253e:	11 24       	eor	r1, r1
    2540:	2f 93       	push	r18
    2542:	3f 93       	push	r19
    2544:	4f 93       	push	r20
    2546:	5f 93       	push	r21
    2548:	6f 93       	push	r22
    254a:	7f 93       	push	r23
    254c:	8f 93       	push	r24
    254e:	9f 93       	push	r25
    2550:	af 93       	push	r26
    2552:	bf 93       	push	r27
    2554:	ef 93       	push	r30
    2556:	ff 93       	push	r31
	led2(TOGGLE);
    2558:	82 e0       	ldi	r24, 0x02	; 2
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	90 dd       	rcall	.-1248   	; 0x207e <led2>
	if(FlagDimmer)
    255e:	80 91 f5 22 	lds	r24, 0x22F5
    2562:	90 91 f6 22 	lds	r25, 0x22F6
    2566:	89 2b       	or	r24, r25
    2568:	29 f0       	breq	.+10     	; 0x2574 <__vector_2+0x3e>
	FlagDimmer=0;
    256a:	10 92 f5 22 	sts	0x22F5, r1
    256e:	10 92 f6 22 	sts	0x22F6, r1
    2572:	06 c0       	rjmp	.+12     	; 0x2580 <__vector_2+0x4a>
	else
	FlagDimmer = 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	80 93 f5 22 	sts	0x22F5, r24
    257c:	90 93 f6 22 	sts	0x22F6, r25
}
    2580:	ff 91       	pop	r31
    2582:	ef 91       	pop	r30
    2584:	bf 91       	pop	r27
    2586:	af 91       	pop	r26
    2588:	9f 91       	pop	r25
    258a:	8f 91       	pop	r24
    258c:	7f 91       	pop	r23
    258e:	6f 91       	pop	r22
    2590:	5f 91       	pop	r21
    2592:	4f 91       	pop	r20
    2594:	3f 91       	pop	r19
    2596:	2f 91       	pop	r18
    2598:	0f 90       	pop	r0
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	0f 90       	pop	r0
    259e:	1f 90       	pop	r1
    25a0:	18 95       	reti

000025a2 <__vector_11>:

ISR(RTC_COMP_vect)
{
    25a2:	1f 92       	push	r1
    25a4:	0f 92       	push	r0
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	0f 92       	push	r0
    25aa:	11 24       	eor	r1, r1
    25ac:	2f 93       	push	r18
    25ae:	3f 93       	push	r19
    25b0:	4f 93       	push	r20
    25b2:	5f 93       	push	r21
    25b4:	6f 93       	push	r22
    25b6:	7f 93       	push	r23
    25b8:	8f 93       	push	r24
    25ba:	9f 93       	push	r25
    25bc:	af 93       	push	r26
    25be:	bf 93       	push	r27
    25c0:	ef 93       	push	r30
    25c2:	ff 93       	push	r31
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <__vector_11+0x28>
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
	while( (RTC.STATUS&0x01) && 0x01 );
    25ce:	e0 e0       	ldi	r30, 0x00	; 0
    25d0:	f4 e0       	ldi	r31, 0x04	; 4
    25d2:	81 81       	ldd	r24, Z+1	; 0x01
    25d4:	80 fd       	sbrc	r24, 0
    25d6:	fd cf       	rjmp	.-6      	; 0x25d2 <__vector_11+0x30>
	volatile int val = RTC.COMP;
    25d8:	e0 e0       	ldi	r30, 0x00	; 0
    25da:	f4 e0       	ldi	r31, 0x04	; 4
    25dc:	84 85       	ldd	r24, Z+12	; 0x0c
    25de:	95 85       	ldd	r25, Z+13	; 0x0d
    25e0:	89 83       	std	Y+1, r24	; 0x01
    25e2:	9a 83       	std	Y+2, r25	; 0x02
	led1(TOGGLE);
    25e4:	82 e0       	ldi	r24, 0x02	; 2
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	32 dd       	rcall	.-1436   	; 0x204e <led1>
	if (FlagDimmer)
    25ea:	80 91 f5 22 	lds	r24, 0x22F5
    25ee:	90 91 f6 22 	lds	r25, 0x22F6
    25f2:	89 2b       	or	r24, r25
    25f4:	41 f0       	breq	.+16     	; 0x2606 <__vector_11+0x64>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    25f6:	e0 e6       	ldi	r30, 0x60	; 96
    25f8:	f6 e0       	ldi	r31, 0x06	; 6
    25fa:	80 85       	ldd	r24, Z+8	; 0x08
    25fc:	85 fb       	bst	r24, 5
    25fe:	88 27       	eor	r24, r24
    2600:	80 f9       	bld	r24, 0
	{
		bluetooth_putchar(ioport_get_pin_level(IO_8)+'0');
    2602:	80 5d       	subi	r24, 0xD0	; 208
    2604:	dd dc       	rcall	.-1606   	; 0x1fc0 <bluetooth_putchar>
	}
	
	RTC.CNT = 0;
    2606:	e0 e0       	ldi	r30, 0x00	; 0
    2608:	f4 e0       	ldi	r31, 0x04	; 4
    260a:	10 86       	std	Z+8, r1	; 0x08
    260c:	11 86       	std	Z+9, r1	; 0x09
}
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	df 91       	pop	r29
    2614:	cf 91       	pop	r28
    2616:	ff 91       	pop	r31
    2618:	ef 91       	pop	r30
    261a:	bf 91       	pop	r27
    261c:	af 91       	pop	r26
    261e:	9f 91       	pop	r25
    2620:	8f 91       	pop	r24
    2622:	7f 91       	pop	r23
    2624:	6f 91       	pop	r22
    2626:	5f 91       	pop	r21
    2628:	4f 91       	pop	r20
    262a:	3f 91       	pop	r19
    262c:	2f 91       	pop	r18
    262e:	0f 90       	pop	r0
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	0f 90       	pop	r0
    2634:	1f 90       	pop	r1
    2636:	18 95       	reti

00002638 <main>:



int main (void)
{
	init_DomOctopus();
    2638:	e8 dc       	rcall	.-1584   	; 0x200a <init_DomOctopus>
	animation();
    263a:	69 dd       	rcall	.-1326   	; 0x210e <animation>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    263c:	e0 ea       	ldi	r30, 0xA0	; 160
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	87 e0       	ldi	r24, 0x07	; 7
    2642:	82 83       	std	Z+2, r24	; 0x02
		PMIC.CTRL &= ~PMIC_RREN_bm;
		PMIC.INTPRI = 0;
		break;

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	80 68       	ori	r24, 0x80	; 128
    2648:	82 83       	std	Z+2, r24	; 0x02
	
	//Activate button interrupt
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
	PORTC.INTCTRL = 0x01;
    264a:	e0 e4       	ldi	r30, 0x40	; 64
    264c:	f6 e0       	ldi	r31, 0x06	; 6
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	81 87       	std	Z+9, r24	; 0x09
	PORTC.INT0MASK = (1<<3);
    2652:	88 e0       	ldi	r24, 0x08	; 8
    2654:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.PIN3CTRL |= (1<<1);
    2656:	83 89       	ldd	r24, Z+19	; 0x13
    2658:	82 60       	ori	r24, 0x02	; 2
    265a:	83 8b       	std	Z+19, r24	; 0x13
	cpu_irq_enable();
    265c:	78 94       	sei
// 	PORTD.INT0MASK = (1<<5);
// 	PORTD.PIN5CTRL |= 0x02;
// 	cpu_irq_enable();
	
	//Activate RTC and interruption
	cpu_irq_disable();
    265e:	f8 94       	cli
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2660:	64 e0       	ldi	r22, 0x04	; 4
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	58 dc       	rcall	.-1872   	; 0x1f16 <sysclk_enable_module>
	RTC.PER = 0xffff;
    2666:	e0 e0       	ldi	r30, 0x00	; 0
    2668:	f4 e0       	ldi	r31, 0x04	; 4
    266a:	8f ef       	ldi	r24, 0xFF	; 255
    266c:	9f ef       	ldi	r25, 0xFF	; 255
    266e:	82 87       	std	Z+10, r24	; 0x0a
    2670:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
    2672:	10 86       	std	Z+8, r1	; 0x08
    2674:	11 86       	std	Z+9, r1	; 0x09
	//RTC.COMP=32768;
	RTC.COMP=1;
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	84 87       	std	Z+12, r24	; 0x0c
    267c:	95 87       	std	Z+13, r25	; 0x0d
	RTC.INTCTRL = 0x0C;
    267e:	8c e0       	ldi	r24, 0x0C	; 12
    2680:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	80 83       	st	Z, r24
	cpu_irq_enable();
    2686:	78 94       	sei
    2688:	c0 e6       	ldi	r28, 0x60	; 96
    268a:	d6 e0       	ldi	r29, 0x06	; 6
    268c:	88 85       	ldd	r24, Y+8	; 0x08
	
	for (;;)
	{
		led3(ioport_get_pin_level(IO_8));
    268e:	85 fb       	bst	r24, 5
    2690:	88 27       	eor	r24, r24
    2692:	80 f9       	bld	r24, 0
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	0b dd       	rcall	.-1514   	; 0x20ae <led3>
    2698:	f9 cf       	rjmp	.-14     	; 0x268c <main+0x54>

0000269a <__divsf3>:
    269a:	0c d0       	rcall	.+24     	; 0x26b4 <__divsf3x>
    269c:	05 c1       	rjmp	.+522    	; 0x28a8 <__fp_round>
    269e:	fd d0       	rcall	.+506    	; 0x289a <__fp_pscB>
    26a0:	40 f0       	brcs	.+16     	; 0x26b2 <__divsf3+0x18>
    26a2:	f4 d0       	rcall	.+488    	; 0x288c <__fp_pscA>
    26a4:	30 f0       	brcs	.+12     	; 0x26b2 <__divsf3+0x18>
    26a6:	21 f4       	brne	.+8      	; 0x26b0 <__divsf3+0x16>
    26a8:	5f 3f       	cpi	r21, 0xFF	; 255
    26aa:	19 f0       	breq	.+6      	; 0x26b2 <__divsf3+0x18>
    26ac:	d6 c0       	rjmp	.+428    	; 0x285a <__fp_inf>
    26ae:	51 11       	cpse	r21, r1
    26b0:	2f c1       	rjmp	.+606    	; 0x2910 <__fp_szero>
    26b2:	d9 c0       	rjmp	.+434    	; 0x2866 <__fp_nan>

000026b4 <__divsf3x>:
    26b4:	0a d1       	rcall	.+532    	; 0x28ca <__fp_split3>
    26b6:	98 f3       	brcs	.-26     	; 0x269e <__divsf3+0x4>

000026b8 <__divsf3_pse>:
    26b8:	99 23       	and	r25, r25
    26ba:	c9 f3       	breq	.-14     	; 0x26ae <__divsf3+0x14>
    26bc:	55 23       	and	r21, r21
    26be:	b1 f3       	breq	.-20     	; 0x26ac <__divsf3+0x12>
    26c0:	95 1b       	sub	r25, r21
    26c2:	55 0b       	sbc	r21, r21
    26c4:	bb 27       	eor	r27, r27
    26c6:	aa 27       	eor	r26, r26
    26c8:	62 17       	cp	r22, r18
    26ca:	73 07       	cpc	r23, r19
    26cc:	84 07       	cpc	r24, r20
    26ce:	38 f0       	brcs	.+14     	; 0x26de <__divsf3_pse+0x26>
    26d0:	9f 5f       	subi	r25, 0xFF	; 255
    26d2:	5f 4f       	sbci	r21, 0xFF	; 255
    26d4:	22 0f       	add	r18, r18
    26d6:	33 1f       	adc	r19, r19
    26d8:	44 1f       	adc	r20, r20
    26da:	aa 1f       	adc	r26, r26
    26dc:	a9 f3       	breq	.-22     	; 0x26c8 <__divsf3_pse+0x10>
    26de:	33 d0       	rcall	.+102    	; 0x2746 <__divsf3_pse+0x8e>
    26e0:	0e 2e       	mov	r0, r30
    26e2:	3a f0       	brmi	.+14     	; 0x26f2 <__divsf3_pse+0x3a>
    26e4:	e0 e8       	ldi	r30, 0x80	; 128
    26e6:	30 d0       	rcall	.+96     	; 0x2748 <__divsf3_pse+0x90>
    26e8:	91 50       	subi	r25, 0x01	; 1
    26ea:	50 40       	sbci	r21, 0x00	; 0
    26ec:	e6 95       	lsr	r30
    26ee:	00 1c       	adc	r0, r0
    26f0:	ca f7       	brpl	.-14     	; 0x26e4 <__divsf3_pse+0x2c>
    26f2:	29 d0       	rcall	.+82     	; 0x2746 <__divsf3_pse+0x8e>
    26f4:	fe 2f       	mov	r31, r30
    26f6:	27 d0       	rcall	.+78     	; 0x2746 <__divsf3_pse+0x8e>
    26f8:	66 0f       	add	r22, r22
    26fa:	77 1f       	adc	r23, r23
    26fc:	88 1f       	adc	r24, r24
    26fe:	bb 1f       	adc	r27, r27
    2700:	26 17       	cp	r18, r22
    2702:	37 07       	cpc	r19, r23
    2704:	48 07       	cpc	r20, r24
    2706:	ab 07       	cpc	r26, r27
    2708:	b0 e8       	ldi	r27, 0x80	; 128
    270a:	09 f0       	breq	.+2      	; 0x270e <__divsf3_pse+0x56>
    270c:	bb 0b       	sbc	r27, r27
    270e:	80 2d       	mov	r24, r0
    2710:	bf 01       	movw	r22, r30
    2712:	ff 27       	eor	r31, r31
    2714:	93 58       	subi	r25, 0x83	; 131
    2716:	5f 4f       	sbci	r21, 0xFF	; 255
    2718:	2a f0       	brmi	.+10     	; 0x2724 <__divsf3_pse+0x6c>
    271a:	9e 3f       	cpi	r25, 0xFE	; 254
    271c:	51 05       	cpc	r21, r1
    271e:	68 f0       	brcs	.+26     	; 0x273a <__divsf3_pse+0x82>
    2720:	9c c0       	rjmp	.+312    	; 0x285a <__fp_inf>
    2722:	f6 c0       	rjmp	.+492    	; 0x2910 <__fp_szero>
    2724:	5f 3f       	cpi	r21, 0xFF	; 255
    2726:	ec f3       	brlt	.-6      	; 0x2722 <__divsf3_pse+0x6a>
    2728:	98 3e       	cpi	r25, 0xE8	; 232
    272a:	dc f3       	brlt	.-10     	; 0x2722 <__divsf3_pse+0x6a>
    272c:	86 95       	lsr	r24
    272e:	77 95       	ror	r23
    2730:	67 95       	ror	r22
    2732:	b7 95       	ror	r27
    2734:	f7 95       	ror	r31
    2736:	9f 5f       	subi	r25, 0xFF	; 255
    2738:	c9 f7       	brne	.-14     	; 0x272c <__divsf3_pse+0x74>
    273a:	88 0f       	add	r24, r24
    273c:	91 1d       	adc	r25, r1
    273e:	96 95       	lsr	r25
    2740:	87 95       	ror	r24
    2742:	97 f9       	bld	r25, 7
    2744:	08 95       	ret
    2746:	e1 e0       	ldi	r30, 0x01	; 1
    2748:	66 0f       	add	r22, r22
    274a:	77 1f       	adc	r23, r23
    274c:	88 1f       	adc	r24, r24
    274e:	bb 1f       	adc	r27, r27
    2750:	62 17       	cp	r22, r18
    2752:	73 07       	cpc	r23, r19
    2754:	84 07       	cpc	r24, r20
    2756:	ba 07       	cpc	r27, r26
    2758:	20 f0       	brcs	.+8      	; 0x2762 <__divsf3_pse+0xaa>
    275a:	62 1b       	sub	r22, r18
    275c:	73 0b       	sbc	r23, r19
    275e:	84 0b       	sbc	r24, r20
    2760:	ba 0b       	sbc	r27, r26
    2762:	ee 1f       	adc	r30, r30
    2764:	88 f7       	brcc	.-30     	; 0x2748 <__divsf3_pse+0x90>
    2766:	e0 95       	com	r30
    2768:	08 95       	ret

0000276a <__fixsfdi>:
    276a:	be e3       	ldi	r27, 0x3E	; 62
    276c:	04 d0       	rcall	.+8      	; 0x2776 <__fixunssfdi+0x2>
    276e:	08 f4       	brcc	.+2      	; 0x2772 <__fixsfdi+0x8>
    2770:	90 e8       	ldi	r25, 0x80	; 128
    2772:	08 95       	ret

00002774 <__fixunssfdi>:
    2774:	bf e3       	ldi	r27, 0x3F	; 63
    2776:	22 27       	eor	r18, r18
    2778:	33 27       	eor	r19, r19
    277a:	a9 01       	movw	r20, r18
    277c:	ae d0       	rcall	.+348    	; 0x28da <__fp_splitA>
    277e:	58 f1       	brcs	.+86     	; 0x27d6 <__fixunssfdi+0x62>
    2780:	9f 57       	subi	r25, 0x7F	; 127
    2782:	40 f1       	brcs	.+80     	; 0x27d4 <__fixunssfdi+0x60>
    2784:	b9 17       	cp	r27, r25
    2786:	38 f1       	brcs	.+78     	; 0x27d6 <__fixunssfdi+0x62>
    2788:	bf e3       	ldi	r27, 0x3F	; 63
    278a:	b9 1b       	sub	r27, r25
    278c:	99 27       	eor	r25, r25
    278e:	b8 50       	subi	r27, 0x08	; 8
    2790:	3a f4       	brpl	.+14     	; 0x27a0 <__fixunssfdi+0x2c>
    2792:	66 0f       	add	r22, r22
    2794:	77 1f       	adc	r23, r23
    2796:	88 1f       	adc	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	b3 95       	inc	r27
    279c:	d2 f3       	brmi	.-12     	; 0x2792 <__fixunssfdi+0x1e>
    279e:	16 c0       	rjmp	.+44     	; 0x27cc <__fixunssfdi+0x58>
    27a0:	b8 50       	subi	r27, 0x08	; 8
    27a2:	4a f0       	brmi	.+18     	; 0x27b6 <__fixunssfdi+0x42>
    27a4:	23 2f       	mov	r18, r19
    27a6:	34 2f       	mov	r19, r20
    27a8:	45 2f       	mov	r20, r21
    27aa:	56 2f       	mov	r21, r22
    27ac:	67 2f       	mov	r22, r23
    27ae:	78 2f       	mov	r23, r24
    27b0:	88 27       	eor	r24, r24
    27b2:	b8 50       	subi	r27, 0x08	; 8
    27b4:	ba f7       	brpl	.-18     	; 0x27a4 <__fixunssfdi+0x30>
    27b6:	b8 5f       	subi	r27, 0xF8	; 248
    27b8:	49 f0       	breq	.+18     	; 0x27cc <__fixunssfdi+0x58>
    27ba:	86 95       	lsr	r24
    27bc:	77 95       	ror	r23
    27be:	67 95       	ror	r22
    27c0:	57 95       	ror	r21
    27c2:	47 95       	ror	r20
    27c4:	37 95       	ror	r19
    27c6:	27 95       	ror	r18
    27c8:	ba 95       	dec	r27
    27ca:	b9 f7       	brne	.-18     	; 0x27ba <__fixunssfdi+0x46>
    27cc:	0e f4       	brtc	.+2      	; 0x27d0 <__fixunssfdi+0x5c>
    27ce:	4e d0       	rcall	.+156    	; 0x286c <__fp_negdi>
    27d0:	88 94       	clc
    27d2:	08 95       	ret
    27d4:	88 94       	clc
    27d6:	60 e0       	ldi	r22, 0x00	; 0
    27d8:	70 e0       	ldi	r23, 0x00	; 0
    27da:	cb 01       	movw	r24, r22
    27dc:	08 95       	ret

000027de <__floatundisf>:
    27de:	e8 94       	clt

000027e0 <__fp_di2sf>:
    27e0:	f9 2f       	mov	r31, r25
    27e2:	96 eb       	ldi	r25, 0xB6	; 182
    27e4:	ff 23       	and	r31, r31
    27e6:	81 f0       	breq	.+32     	; 0x2808 <__fp_di2sf+0x28>
    27e8:	12 16       	cp	r1, r18
    27ea:	13 06       	cpc	r1, r19
    27ec:	14 06       	cpc	r1, r20
    27ee:	44 0b       	sbc	r20, r20
    27f0:	93 95       	inc	r25
    27f2:	f6 95       	lsr	r31
    27f4:	87 95       	ror	r24
    27f6:	77 95       	ror	r23
    27f8:	67 95       	ror	r22
    27fa:	57 95       	ror	r21
    27fc:	40 40       	sbci	r20, 0x00	; 0
    27fe:	ff 23       	and	r31, r31
    2800:	b9 f7       	brne	.-18     	; 0x27f0 <__fp_di2sf+0x10>
    2802:	1b c0       	rjmp	.+54     	; 0x283a <__fp_di2sf+0x5a>
    2804:	99 27       	eor	r25, r25
    2806:	08 95       	ret
    2808:	88 23       	and	r24, r24
    280a:	51 f4       	brne	.+20     	; 0x2820 <__fp_di2sf+0x40>
    280c:	98 50       	subi	r25, 0x08	; 8
    280e:	d2 f7       	brpl	.-12     	; 0x2804 <__fp_di2sf+0x24>
    2810:	87 2b       	or	r24, r23
    2812:	76 2f       	mov	r23, r22
    2814:	65 2f       	mov	r22, r21
    2816:	54 2f       	mov	r21, r20
    2818:	43 2f       	mov	r20, r19
    281a:	32 2f       	mov	r19, r18
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	b1 f3       	breq	.-20     	; 0x280c <__fp_di2sf+0x2c>
    2820:	12 16       	cp	r1, r18
    2822:	13 06       	cpc	r1, r19
    2824:	14 06       	cpc	r1, r20
    2826:	44 0b       	sbc	r20, r20
    2828:	88 23       	and	r24, r24
    282a:	3a f0       	brmi	.+14     	; 0x283a <__fp_di2sf+0x5a>
    282c:	9a 95       	dec	r25
    282e:	44 0f       	add	r20, r20
    2830:	55 1f       	adc	r21, r21
    2832:	66 1f       	adc	r22, r22
    2834:	77 1f       	adc	r23, r23
    2836:	88 1f       	adc	r24, r24
    2838:	ca f7       	brpl	.-14     	; 0x282c <__fp_di2sf+0x4c>
    283a:	55 23       	and	r21, r21
    283c:	4a f4       	brpl	.+18     	; 0x2850 <__fp_di2sf+0x70>
    283e:	44 0f       	add	r20, r20
    2840:	55 1f       	adc	r21, r21
    2842:	11 f4       	brne	.+4      	; 0x2848 <__fp_di2sf+0x68>
    2844:	60 ff       	sbrs	r22, 0
    2846:	04 c0       	rjmp	.+8      	; 0x2850 <__fp_di2sf+0x70>
    2848:	6f 5f       	subi	r22, 0xFF	; 255
    284a:	7f 4f       	sbci	r23, 0xFF	; 255
    284c:	8f 4f       	sbci	r24, 0xFF	; 255
    284e:	9f 4f       	sbci	r25, 0xFF	; 255
    2850:	88 0f       	add	r24, r24
    2852:	96 95       	lsr	r25
    2854:	87 95       	ror	r24
    2856:	97 f9       	bld	r25, 7
    2858:	08 95       	ret

0000285a <__fp_inf>:
    285a:	97 f9       	bld	r25, 7
    285c:	9f 67       	ori	r25, 0x7F	; 127
    285e:	80 e8       	ldi	r24, 0x80	; 128
    2860:	70 e0       	ldi	r23, 0x00	; 0
    2862:	60 e0       	ldi	r22, 0x00	; 0
    2864:	08 95       	ret

00002866 <__fp_nan>:
    2866:	9f ef       	ldi	r25, 0xFF	; 255
    2868:	80 ec       	ldi	r24, 0xC0	; 192
    286a:	08 95       	ret

0000286c <__fp_negdi>:
    286c:	90 95       	com	r25
    286e:	80 95       	com	r24
    2870:	70 95       	com	r23
    2872:	60 95       	com	r22
    2874:	50 95       	com	r21
    2876:	40 95       	com	r20
    2878:	30 95       	com	r19
    287a:	21 95       	neg	r18
    287c:	3f 4f       	sbci	r19, 0xFF	; 255
    287e:	4f 4f       	sbci	r20, 0xFF	; 255
    2880:	5f 4f       	sbci	r21, 0xFF	; 255
    2882:	6f 4f       	sbci	r22, 0xFF	; 255
    2884:	7f 4f       	sbci	r23, 0xFF	; 255
    2886:	8f 4f       	sbci	r24, 0xFF	; 255
    2888:	9f 4f       	sbci	r25, 0xFF	; 255
    288a:	08 95       	ret

0000288c <__fp_pscA>:
    288c:	00 24       	eor	r0, r0
    288e:	0a 94       	dec	r0
    2890:	16 16       	cp	r1, r22
    2892:	17 06       	cpc	r1, r23
    2894:	18 06       	cpc	r1, r24
    2896:	09 06       	cpc	r0, r25
    2898:	08 95       	ret

0000289a <__fp_pscB>:
    289a:	00 24       	eor	r0, r0
    289c:	0a 94       	dec	r0
    289e:	12 16       	cp	r1, r18
    28a0:	13 06       	cpc	r1, r19
    28a2:	14 06       	cpc	r1, r20
    28a4:	05 06       	cpc	r0, r21
    28a6:	08 95       	ret

000028a8 <__fp_round>:
    28a8:	09 2e       	mov	r0, r25
    28aa:	03 94       	inc	r0
    28ac:	00 0c       	add	r0, r0
    28ae:	11 f4       	brne	.+4      	; 0x28b4 <__fp_round+0xc>
    28b0:	88 23       	and	r24, r24
    28b2:	52 f0       	brmi	.+20     	; 0x28c8 <__fp_round+0x20>
    28b4:	bb 0f       	add	r27, r27
    28b6:	40 f4       	brcc	.+16     	; 0x28c8 <__fp_round+0x20>
    28b8:	bf 2b       	or	r27, r31
    28ba:	11 f4       	brne	.+4      	; 0x28c0 <__fp_round+0x18>
    28bc:	60 ff       	sbrs	r22, 0
    28be:	04 c0       	rjmp	.+8      	; 0x28c8 <__fp_round+0x20>
    28c0:	6f 5f       	subi	r22, 0xFF	; 255
    28c2:	7f 4f       	sbci	r23, 0xFF	; 255
    28c4:	8f 4f       	sbci	r24, 0xFF	; 255
    28c6:	9f 4f       	sbci	r25, 0xFF	; 255
    28c8:	08 95       	ret

000028ca <__fp_split3>:
    28ca:	57 fd       	sbrc	r21, 7
    28cc:	90 58       	subi	r25, 0x80	; 128
    28ce:	44 0f       	add	r20, r20
    28d0:	55 1f       	adc	r21, r21
    28d2:	59 f0       	breq	.+22     	; 0x28ea <__fp_splitA+0x10>
    28d4:	5f 3f       	cpi	r21, 0xFF	; 255
    28d6:	71 f0       	breq	.+28     	; 0x28f4 <__fp_splitA+0x1a>
    28d8:	47 95       	ror	r20

000028da <__fp_splitA>:
    28da:	88 0f       	add	r24, r24
    28dc:	97 fb       	bst	r25, 7
    28de:	99 1f       	adc	r25, r25
    28e0:	61 f0       	breq	.+24     	; 0x28fa <__fp_splitA+0x20>
    28e2:	9f 3f       	cpi	r25, 0xFF	; 255
    28e4:	79 f0       	breq	.+30     	; 0x2904 <__fp_splitA+0x2a>
    28e6:	87 95       	ror	r24
    28e8:	08 95       	ret
    28ea:	12 16       	cp	r1, r18
    28ec:	13 06       	cpc	r1, r19
    28ee:	14 06       	cpc	r1, r20
    28f0:	55 1f       	adc	r21, r21
    28f2:	f2 cf       	rjmp	.-28     	; 0x28d8 <__fp_split3+0xe>
    28f4:	46 95       	lsr	r20
    28f6:	f1 df       	rcall	.-30     	; 0x28da <__fp_splitA>
    28f8:	08 c0       	rjmp	.+16     	; 0x290a <__fp_splitA+0x30>
    28fa:	16 16       	cp	r1, r22
    28fc:	17 06       	cpc	r1, r23
    28fe:	18 06       	cpc	r1, r24
    2900:	99 1f       	adc	r25, r25
    2902:	f1 cf       	rjmp	.-30     	; 0x28e6 <__fp_splitA+0xc>
    2904:	86 95       	lsr	r24
    2906:	71 05       	cpc	r23, r1
    2908:	61 05       	cpc	r22, r1
    290a:	08 94       	sec
    290c:	08 95       	ret

0000290e <__fp_zero>:
    290e:	e8 94       	clt

00002910 <__fp_szero>:
    2910:	bb 27       	eor	r27, r27
    2912:	66 27       	eor	r22, r22
    2914:	77 27       	eor	r23, r23
    2916:	cb 01       	movw	r24, r22
    2918:	97 f9       	bld	r25, 7
    291a:	08 95       	ret

0000291c <__udivmodhi4>:
    291c:	aa 1b       	sub	r26, r26
    291e:	bb 1b       	sub	r27, r27
    2920:	51 e1       	ldi	r21, 0x11	; 17
    2922:	07 c0       	rjmp	.+14     	; 0x2932 <__udivmodhi4_ep>

00002924 <__udivmodhi4_loop>:
    2924:	aa 1f       	adc	r26, r26
    2926:	bb 1f       	adc	r27, r27
    2928:	a6 17       	cp	r26, r22
    292a:	b7 07       	cpc	r27, r23
    292c:	10 f0       	brcs	.+4      	; 0x2932 <__udivmodhi4_ep>
    292e:	a6 1b       	sub	r26, r22
    2930:	b7 0b       	sbc	r27, r23

00002932 <__udivmodhi4_ep>:
    2932:	88 1f       	adc	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	5a 95       	dec	r21
    2938:	a9 f7       	brne	.-22     	; 0x2924 <__udivmodhi4_loop>
    293a:	80 95       	com	r24
    293c:	90 95       	com	r25
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	08 95       	ret

00002944 <__udivmodsi4>:
    2944:	a1 e2       	ldi	r26, 0x21	; 33
    2946:	1a 2e       	mov	r1, r26
    2948:	aa 1b       	sub	r26, r26
    294a:	bb 1b       	sub	r27, r27
    294c:	fd 01       	movw	r30, r26
    294e:	0d c0       	rjmp	.+26     	; 0x296a <__udivmodsi4_ep>

00002950 <__udivmodsi4_loop>:
    2950:	aa 1f       	adc	r26, r26
    2952:	bb 1f       	adc	r27, r27
    2954:	ee 1f       	adc	r30, r30
    2956:	ff 1f       	adc	r31, r31
    2958:	a2 17       	cp	r26, r18
    295a:	b3 07       	cpc	r27, r19
    295c:	e4 07       	cpc	r30, r20
    295e:	f5 07       	cpc	r31, r21
    2960:	20 f0       	brcs	.+8      	; 0x296a <__udivmodsi4_ep>
    2962:	a2 1b       	sub	r26, r18
    2964:	b3 0b       	sbc	r27, r19
    2966:	e4 0b       	sbc	r30, r20
    2968:	f5 0b       	sbc	r31, r21

0000296a <__udivmodsi4_ep>:
    296a:	66 1f       	adc	r22, r22
    296c:	77 1f       	adc	r23, r23
    296e:	88 1f       	adc	r24, r24
    2970:	99 1f       	adc	r25, r25
    2972:	1a 94       	dec	r1
    2974:	69 f7       	brne	.-38     	; 0x2950 <__udivmodsi4_loop>
    2976:	60 95       	com	r22
    2978:	70 95       	com	r23
    297a:	80 95       	com	r24
    297c:	90 95       	com	r25
    297e:	9b 01       	movw	r18, r22
    2980:	ac 01       	movw	r20, r24
    2982:	bd 01       	movw	r22, r26
    2984:	cf 01       	movw	r24, r30
    2986:	08 95       	ret

00002988 <__tablejump2__>:
    2988:	ee 0f       	add	r30, r30
    298a:	ff 1f       	adc	r31, r31

0000298c <__tablejump__>:
    298c:	05 90       	lpm	r0, Z+
    298e:	f4 91       	lpm	r31, Z
    2990:	e0 2d       	mov	r30, r0
    2992:	09 94       	ijmp

00002994 <__muldi3>:
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	1f 93       	push	r17
    299a:	0f 93       	push	r16
    299c:	9a 9d       	mul	r25, r10
    299e:	f0 2d       	mov	r31, r0
    29a0:	21 9f       	mul	r18, r17
    29a2:	f0 0d       	add	r31, r0
    29a4:	8b 9d       	mul	r24, r11
    29a6:	f0 0d       	add	r31, r0
    29a8:	8a 9d       	mul	r24, r10
    29aa:	e0 2d       	mov	r30, r0
    29ac:	f1 0d       	add	r31, r1
    29ae:	03 9f       	mul	r16, r19
    29b0:	f0 0d       	add	r31, r0
    29b2:	02 9f       	mul	r16, r18
    29b4:	e0 0d       	add	r30, r0
    29b6:	f1 1d       	adc	r31, r1
    29b8:	4e 9d       	mul	r20, r14
    29ba:	e0 0d       	add	r30, r0
    29bc:	f1 1d       	adc	r31, r1
    29be:	5e 9d       	mul	r21, r14
    29c0:	f0 0d       	add	r31, r0
    29c2:	4f 9d       	mul	r20, r15
    29c4:	f0 0d       	add	r31, r0
    29c6:	7f 93       	push	r23
    29c8:	6f 93       	push	r22
    29ca:	bf 92       	push	r11
    29cc:	af 92       	push	r10
    29ce:	5f 93       	push	r21
    29d0:	4f 93       	push	r20
    29d2:	d5 01       	movw	r26, r10
    29d4:	30 d0       	rcall	.+96     	; 0x2a36 <__umulhisi3>
    29d6:	8b 01       	movw	r16, r22
    29d8:	ac 01       	movw	r20, r24
    29da:	d7 01       	movw	r26, r14
    29dc:	2c d0       	rcall	.+88     	; 0x2a36 <__umulhisi3>
    29de:	eb 01       	movw	r28, r22
    29e0:	e8 0f       	add	r30, r24
    29e2:	f9 1f       	adc	r31, r25
    29e4:	d6 01       	movw	r26, r12
    29e6:	1f d0       	rcall	.+62     	; 0x2a26 <__muldi3_6>
    29e8:	2f 91       	pop	r18
    29ea:	3f 91       	pop	r19
    29ec:	d6 01       	movw	r26, r12
    29ee:	23 d0       	rcall	.+70     	; 0x2a36 <__umulhisi3>
    29f0:	c6 0f       	add	r28, r22
    29f2:	d7 1f       	adc	r29, r23
    29f4:	e8 1f       	adc	r30, r24
    29f6:	f9 1f       	adc	r31, r25
    29f8:	af 91       	pop	r26
    29fa:	bf 91       	pop	r27
    29fc:	14 d0       	rcall	.+40     	; 0x2a26 <__muldi3_6>
    29fe:	2f 91       	pop	r18
    2a00:	3f 91       	pop	r19
    2a02:	19 d0       	rcall	.+50     	; 0x2a36 <__umulhisi3>
    2a04:	c6 0f       	add	r28, r22
    2a06:	d7 1f       	adc	r29, r23
    2a08:	e8 1f       	adc	r30, r24
    2a0a:	f9 1f       	adc	r31, r25
    2a0c:	d6 01       	movw	r26, r12
    2a0e:	13 d0       	rcall	.+38     	; 0x2a36 <__umulhisi3>
    2a10:	e6 0f       	add	r30, r22
    2a12:	f7 1f       	adc	r31, r23
    2a14:	98 01       	movw	r18, r16
    2a16:	be 01       	movw	r22, r28
    2a18:	cf 01       	movw	r24, r30
    2a1a:	11 24       	eor	r1, r1
    2a1c:	0f 91       	pop	r16
    2a1e:	1f 91       	pop	r17
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <__muldi3_6>:
    2a26:	07 d0       	rcall	.+14     	; 0x2a36 <__umulhisi3>
    2a28:	46 0f       	add	r20, r22
    2a2a:	57 1f       	adc	r21, r23
    2a2c:	c8 1f       	adc	r28, r24
    2a2e:	d9 1f       	adc	r29, r25
    2a30:	08 f4       	brcc	.+2      	; 0x2a34 <__muldi3_6+0xe>
    2a32:	31 96       	adiw	r30, 0x01	; 1
    2a34:	08 95       	ret

00002a36 <__umulhisi3>:
    2a36:	a2 9f       	mul	r26, r18
    2a38:	b0 01       	movw	r22, r0
    2a3a:	b3 9f       	mul	r27, r19
    2a3c:	c0 01       	movw	r24, r0
    2a3e:	a3 9f       	mul	r26, r19
    2a40:	70 0d       	add	r23, r0
    2a42:	81 1d       	adc	r24, r1
    2a44:	11 24       	eor	r1, r1
    2a46:	91 1d       	adc	r25, r1
    2a48:	b2 9f       	mul	r27, r18
    2a4a:	70 0d       	add	r23, r0
    2a4c:	81 1d       	adc	r24, r1
    2a4e:	11 24       	eor	r1, r1
    2a50:	91 1d       	adc	r25, r1
    2a52:	08 95       	ret

00002a54 <memcpy>:
    2a54:	fb 01       	movw	r30, r22
    2a56:	dc 01       	movw	r26, r24
    2a58:	02 c0       	rjmp	.+4      	; 0x2a5e <memcpy+0xa>
    2a5a:	01 90       	ld	r0, Z+
    2a5c:	0d 92       	st	X+, r0
    2a5e:	41 50       	subi	r20, 0x01	; 1
    2a60:	50 40       	sbci	r21, 0x00	; 0
    2a62:	d8 f7       	brcc	.-10     	; 0x2a5a <memcpy+0x6>
    2a64:	08 95       	ret

00002a66 <_exit>:
    2a66:	f8 94       	cli

00002a68 <__stop_program>:
    2a68:	ff cf       	rjmp	.-2      	; 0x2a68 <__stop_program>
